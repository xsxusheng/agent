// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RealQueryHostStatus.proto

#ifndef PROTOBUF_RealQueryHostStatus_2eproto__INCLUDED
#define PROTOBUF_RealQueryHostStatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonDefine.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class RealDiskCfgInfo;
class RealDiskCfgInfoDefaultTypeInternal;
extern RealDiskCfgInfoDefaultTypeInternal _RealDiskCfgInfo_default_instance_;
class RealDiskHealthInfo;
class RealDiskHealthInfoDefaultTypeInternal;
extern RealDiskHealthInfoDefaultTypeInternal _RealDiskHealthInfo_default_instance_;
class RealDiskRaidCfgInfo;
class RealDiskRaidCfgInfoDefaultTypeInternal;
extern RealDiskRaidCfgInfoDefaultTypeInternal _RealDiskRaidCfgInfo_default_instance_;
class RealDiskStatusInfo;
class RealDiskStatusInfoDefaultTypeInternal;
extern RealDiskStatusInfoDefaultTypeInternal _RealDiskStatusInfo_default_instance_;
class RealNicStatusInfo;
class RealNicStatusInfoDefaultTypeInternal;
extern RealNicStatusInfoDefaultTypeInternal _RealNicStatusInfo_default_instance_;
class RealProcessStatusInfo;
class RealProcessStatusInfoDefaultTypeInternal;
extern RealProcessStatusInfoDefaultTypeInternal _RealProcessStatusInfo_default_instance_;
class RealQueryHostStatusData;
class RealQueryHostStatusDataDefaultTypeInternal;
extern RealQueryHostStatusDataDefaultTypeInternal _RealQueryHostStatusData_default_instance_;
class RealQueryHostStatusResponse;
class RealQueryHostStatusResponseDefaultTypeInternal;
extern RealQueryHostStatusResponseDefaultTypeInternal _RealQueryHostStatusResponse_default_instance_;
class RealSingleDiskCfgInfo;
class RealSingleDiskCfgInfoDefaultTypeInternal;
extern RealSingleDiskCfgInfoDefaultTypeInternal _RealSingleDiskCfgInfo_default_instance_;
class RealSingleDiskHealthInfo;
class RealSingleDiskHealthInfoDefaultTypeInternal;
extern RealSingleDiskHealthInfoDefaultTypeInternal _RealSingleDiskHealthInfo_default_instance_;
class RealSingleDiskStatusInfo;
class RealSingleDiskStatusInfoDefaultTypeInternal;
extern RealSingleDiskStatusInfoDefaultTypeInternal _RealSingleDiskStatusInfo_default_instance_;
class RealSingleProcessStatusInfo;
class RealSingleProcessStatusInfoDefaultTypeInternal;
extern RealSingleProcessStatusInfoDefaultTypeInternal _RealSingleProcessStatusInfo_default_instance_;
class RealSystemInfo;
class RealSystemInfoDefaultTypeInternal;
extern RealSystemInfoDefaultTypeInternal _RealSystemInfo_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_RealQueryHostStatus_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_RealQueryHostStatus_2eproto

enum RealQueryHostStatusData_HostCfgTypeEnum {
  RealQueryHostStatusData_HostCfgTypeEnum_SYSTEM = 0,
  RealQueryHostStatusData_HostCfgTypeEnum_DISKSTATUS = 1,
  RealQueryHostStatusData_HostCfgTypeEnum_DISKCFG = 2,
  RealQueryHostStatusData_HostCfgTypeEnum_DISKRAID = 3,
  RealQueryHostStatusData_HostCfgTypeEnum_DISKHEALTH = 4,
  RealQueryHostStatusData_HostCfgTypeEnum_NIC = 5,
  RealQueryHostStatusData_HostCfgTypeEnum_PROCESS = 6,
  RealQueryHostStatusData_HostCfgTypeEnum_RealQueryHostStatusData_HostCfgTypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RealQueryHostStatusData_HostCfgTypeEnum_RealQueryHostStatusData_HostCfgTypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RealQueryHostStatusData_HostCfgTypeEnum_IsValid(int value);
const RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusData_HostCfgTypeEnum_HostCfgTypeEnum_MIN = RealQueryHostStatusData_HostCfgTypeEnum_SYSTEM;
const RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusData_HostCfgTypeEnum_HostCfgTypeEnum_MAX = RealQueryHostStatusData_HostCfgTypeEnum_PROCESS;
const int RealQueryHostStatusData_HostCfgTypeEnum_HostCfgTypeEnum_ARRAYSIZE = RealQueryHostStatusData_HostCfgTypeEnum_HostCfgTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* RealQueryHostStatusData_HostCfgTypeEnum_descriptor();
inline const ::std::string& RealQueryHostStatusData_HostCfgTypeEnum_Name(RealQueryHostStatusData_HostCfgTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    RealQueryHostStatusData_HostCfgTypeEnum_descriptor(), value);
}
inline bool RealQueryHostStatusData_HostCfgTypeEnum_Parse(
    const ::std::string& name, RealQueryHostStatusData_HostCfgTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RealQueryHostStatusData_HostCfgTypeEnum>(
    RealQueryHostStatusData_HostCfgTypeEnum_descriptor(), name, value);
}
// ===================================================================

class RealQueryHostStatusData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RealQueryHostStatusData) */ {
 public:
  RealQueryHostStatusData();
  virtual ~RealQueryHostStatusData();

  RealQueryHostStatusData(const RealQueryHostStatusData& from);

  inline RealQueryHostStatusData& operator=(const RealQueryHostStatusData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealQueryHostStatusData(RealQueryHostStatusData&& from) noexcept
    : RealQueryHostStatusData() {
    *this = ::std::move(from);
  }

  inline RealQueryHostStatusData& operator=(RealQueryHostStatusData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealQueryHostStatusData& default_instance();

  static inline const RealQueryHostStatusData* internal_default_instance() {
    return reinterpret_cast<const RealQueryHostStatusData*>(
               &_RealQueryHostStatusData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RealQueryHostStatusData* other);
  friend void swap(RealQueryHostStatusData& a, RealQueryHostStatusData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealQueryHostStatusData* New() const PROTOBUF_FINAL { return New(NULL); }

  RealQueryHostStatusData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RealQueryHostStatusData& from);
  void MergeFrom(const RealQueryHostStatusData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RealQueryHostStatusData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RealQueryHostStatusData_HostCfgTypeEnum HostCfgTypeEnum;
  static const HostCfgTypeEnum SYSTEM =
    RealQueryHostStatusData_HostCfgTypeEnum_SYSTEM;
  static const HostCfgTypeEnum DISKSTATUS =
    RealQueryHostStatusData_HostCfgTypeEnum_DISKSTATUS;
  static const HostCfgTypeEnum DISKCFG =
    RealQueryHostStatusData_HostCfgTypeEnum_DISKCFG;
  static const HostCfgTypeEnum DISKRAID =
    RealQueryHostStatusData_HostCfgTypeEnum_DISKRAID;
  static const HostCfgTypeEnum DISKHEALTH =
    RealQueryHostStatusData_HostCfgTypeEnum_DISKHEALTH;
  static const HostCfgTypeEnum NIC =
    RealQueryHostStatusData_HostCfgTypeEnum_NIC;
  static const HostCfgTypeEnum PROCESS =
    RealQueryHostStatusData_HostCfgTypeEnum_PROCESS;
  static inline bool HostCfgTypeEnum_IsValid(int value) {
    return RealQueryHostStatusData_HostCfgTypeEnum_IsValid(value);
  }
  static const HostCfgTypeEnum HostCfgTypeEnum_MIN =
    RealQueryHostStatusData_HostCfgTypeEnum_HostCfgTypeEnum_MIN;
  static const HostCfgTypeEnum HostCfgTypeEnum_MAX =
    RealQueryHostStatusData_HostCfgTypeEnum_HostCfgTypeEnum_MAX;
  static const int HostCfgTypeEnum_ARRAYSIZE =
    RealQueryHostStatusData_HostCfgTypeEnum_HostCfgTypeEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  HostCfgTypeEnum_descriptor() {
    return RealQueryHostStatusData_HostCfgTypeEnum_descriptor();
  }
  static inline const ::std::string& HostCfgTypeEnum_Name(HostCfgTypeEnum value) {
    return RealQueryHostStatusData_HostCfgTypeEnum_Name(value);
  }
  static inline bool HostCfgTypeEnum_Parse(const ::std::string& name,
      HostCfgTypeEnum* value) {
    return RealQueryHostStatusData_HostCfgTypeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int64 uniqueId = 1;
  void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 1;
  ::google::protobuf::int64 uniqueid() const;
  void set_uniqueid(::google::protobuf::int64 value);

  // .proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 2;
  void clear_querycfgtype();
  static const int kQueryCfgTypeFieldNumber = 2;
  ::proto::RealQueryHostStatusData_HostCfgTypeEnum querycfgtype() const;
  void set_querycfgtype(::proto::RealQueryHostStatusData_HostCfgTypeEnum value);

  // @@protoc_insertion_point(class_scope:proto.RealQueryHostStatusData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 uniqueid_;
  int querycfgtype_;
  mutable int _cached_size_;
  friend struct protobuf_RealQueryHostStatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealQueryHostStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RealQueryHostStatusResponse) */ {
 public:
  RealQueryHostStatusResponse();
  virtual ~RealQueryHostStatusResponse();

  RealQueryHostStatusResponse(const RealQueryHostStatusResponse& from);

  inline RealQueryHostStatusResponse& operator=(const RealQueryHostStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealQueryHostStatusResponse(RealQueryHostStatusResponse&& from) noexcept
    : RealQueryHostStatusResponse() {
    *this = ::std::move(from);
  }

  inline RealQueryHostStatusResponse& operator=(RealQueryHostStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealQueryHostStatusResponse& default_instance();

  static inline const RealQueryHostStatusResponse* internal_default_instance() {
    return reinterpret_cast<const RealQueryHostStatusResponse*>(
               &_RealQueryHostStatusResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RealQueryHostStatusResponse* other);
  friend void swap(RealQueryHostStatusResponse& a, RealQueryHostStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealQueryHostStatusResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RealQueryHostStatusResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RealQueryHostStatusResponse& from);
  void MergeFrom(const RealQueryHostStatusResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RealQueryHostStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 1;
  void clear_querycfgtype();
  static const int kQueryCfgTypeFieldNumber = 1;
  ::proto::RealQueryHostStatusData_HostCfgTypeEnum querycfgtype() const;
  void set_querycfgtype(::proto::RealQueryHostStatusData_HostCfgTypeEnum value);

  // @@protoc_insertion_point(class_scope:proto.RealQueryHostStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int querycfgtype_;
  mutable int _cached_size_;
  friend struct protobuf_RealQueryHostStatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealSystemInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RealSystemInfo) */ {
 public:
  RealSystemInfo();
  virtual ~RealSystemInfo();

  RealSystemInfo(const RealSystemInfo& from);

  inline RealSystemInfo& operator=(const RealSystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealSystemInfo(RealSystemInfo&& from) noexcept
    : RealSystemInfo() {
    *this = ::std::move(from);
  }

  inline RealSystemInfo& operator=(RealSystemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealSystemInfo& default_instance();

  static inline const RealSystemInfo* internal_default_instance() {
    return reinterpret_cast<const RealSystemInfo*>(
               &_RealSystemInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RealSystemInfo* other);
  friend void swap(RealSystemInfo& a, RealSystemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealSystemInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RealSystemInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RealSystemInfo& from);
  void MergeFrom(const RealSystemInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RealSystemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sysDescr = 1;
  void clear_sysdescr();
  static const int kSysDescrFieldNumber = 1;
  const ::std::string& sysdescr() const;
  void set_sysdescr(const ::std::string& value);
  #if LANG_CXX11
  void set_sysdescr(::std::string&& value);
  #endif
  void set_sysdescr(const char* value);
  void set_sysdescr(const char* value, size_t size);
  ::std::string* mutable_sysdescr();
  ::std::string* release_sysdescr();
  void set_allocated_sysdescr(::std::string* sysdescr);

  // string loadAverage = 5;
  void clear_loadaverage();
  static const int kLoadAverageFieldNumber = 5;
  const ::std::string& loadaverage() const;
  void set_loadaverage(const ::std::string& value);
  #if LANG_CXX11
  void set_loadaverage(::std::string&& value);
  #endif
  void set_loadaverage(const char* value);
  void set_loadaverage(const char* value, size_t size);
  ::std::string* mutable_loadaverage();
  ::std::string* release_loadaverage();
  void set_allocated_loadaverage(::std::string* loadaverage);

  // string osName = 13;
  void clear_osname();
  static const int kOsNameFieldNumber = 13;
  const ::std::string& osname() const;
  void set_osname(const ::std::string& value);
  #if LANG_CXX11
  void set_osname(::std::string&& value);
  #endif
  void set_osname(const char* value);
  void set_osname(const char* value, size_t size);
  ::std::string* mutable_osname();
  ::std::string* release_osname();
  void set_allocated_osname(::std::string* osname);

  // string osVersion = 14;
  void clear_osversion();
  static const int kOsVersionFieldNumber = 14;
  const ::std::string& osversion() const;
  void set_osversion(const ::std::string& value);
  #if LANG_CXX11
  void set_osversion(::std::string&& value);
  #endif
  void set_osversion(const char* value);
  void set_osversion(const char* value, size_t size);
  ::std::string* mutable_osversion();
  ::std::string* release_osversion();
  void set_allocated_osversion(::std::string* osversion);

  // string osVender = 15;
  void clear_osvender();
  static const int kOsVenderFieldNumber = 15;
  const ::std::string& osvender() const;
  void set_osvender(const ::std::string& value);
  #if LANG_CXX11
  void set_osvender(::std::string&& value);
  #endif
  void set_osvender(const char* value);
  void set_osvender(const char* value, size_t size);
  ::std::string* mutable_osvender();
  ::std::string* release_osvender();
  void set_allocated_osvender(::std::string* osvender);

  // string cpuMonokaryonUsage = 19;
  void clear_cpumonokaryonusage();
  static const int kCpuMonokaryonUsageFieldNumber = 19;
  const ::std::string& cpumonokaryonusage() const;
  void set_cpumonokaryonusage(const ::std::string& value);
  #if LANG_CXX11
  void set_cpumonokaryonusage(::std::string&& value);
  #endif
  void set_cpumonokaryonusage(const char* value);
  void set_cpumonokaryonusage(const char* value, size_t size);
  ::std::string* mutable_cpumonokaryonusage();
  ::std::string* release_cpumonokaryonusage();
  void set_allocated_cpumonokaryonusage(::std::string* cpumonokaryonusage);

  // string agentVersion = 21;
  void clear_agentversion();
  static const int kAgentVersionFieldNumber = 21;
  const ::std::string& agentversion() const;
  void set_agentversion(const ::std::string& value);
  #if LANG_CXX11
  void set_agentversion(::std::string&& value);
  #endif
  void set_agentversion(const char* value);
  void set_agentversion(const char* value, size_t size);
  ::std::string* mutable_agentversion();
  ::std::string* release_agentversion();
  void set_allocated_agentversion(::std::string* agentversion);

  // double sysUptime = 2;
  void clear_sysuptime();
  static const int kSysUptimeFieldNumber = 2;
  double sysuptime() const;
  void set_sysuptime(double value);

  // int32 cpuFrequency = 3;
  void clear_cpufrequency();
  static const int kCpuFrequencyFieldNumber = 3;
  ::google::protobuf::int32 cpufrequency() const;
  void set_cpufrequency(::google::protobuf::int32 value);

  // int32 cpuNumbers = 4;
  void clear_cpunumbers();
  static const int kCpuNumbersFieldNumber = 4;
  ::google::protobuf::int32 cpunumbers() const;
  void set_cpunumbers(::google::protobuf::int32 value);

  // double cpuUsage = 6;
  void clear_cpuusage();
  static const int kCpuUsageFieldNumber = 6;
  double cpuusage() const;
  void set_cpuusage(double value);

  // double memoryUsage = 8;
  void clear_memoryusage();
  static const int kMemoryUsageFieldNumber = 8;
  double memoryusage() const;
  void set_memoryusage(double value);

  // int32 memorySize = 7;
  void clear_memorysize();
  static const int kMemorySizeFieldNumber = 7;
  ::google::protobuf::int32 memorysize() const;
  void set_memorysize(::google::protobuf::int32 value);

  // int32 diskTotalSize = 9;
  void clear_disktotalsize();
  static const int kDiskTotalSizeFieldNumber = 9;
  ::google::protobuf::int32 disktotalsize() const;
  void set_disktotalsize(::google::protobuf::int32 value);

  // int32 mainFSDiskSize = 10;
  void clear_mainfsdisksize();
  static const int kMainFSDiskSizeFieldNumber = 10;
  ::google::protobuf::int32 mainfsdisksize() const;
  void set_mainfsdisksize(::google::protobuf::int32 value);

  // int32 mainFSAvailableSize = 11;
  void clear_mainfsavailablesize();
  static const int kMainFSAvailableSizeFieldNumber = 11;
  ::google::protobuf::int32 mainfsavailablesize() const;
  void set_mainfsavailablesize(::google::protobuf::int32 value);

  // int32 mainFSDiskUseRatio = 12;
  void clear_mainfsdiskuseratio();
  static const int kMainFSDiskUseRatioFieldNumber = 12;
  ::google::protobuf::int32 mainfsdiskuseratio() const;
  void set_mainfsdiskuseratio(::google::protobuf::int32 value);

  // int32 tcpNum = 16;
  void clear_tcpnum();
  static const int kTcpNumFieldNumber = 16;
  ::google::protobuf::int32 tcpnum() const;
  void set_tcpnum(::google::protobuf::int32 value);

  // int32 tcpTotalInbound = 17;
  void clear_tcptotalinbound();
  static const int kTcpTotalInboundFieldNumber = 17;
  ::google::protobuf::int32 tcptotalinbound() const;
  void set_tcptotalinbound(::google::protobuf::int32 value);

  // int32 tcpTotalOutbound = 18;
  void clear_tcptotaloutbound();
  static const int kTcpTotalOutboundFieldNumber = 18;
  ::google::protobuf::int32 tcptotaloutbound() const;
  void set_tcptotaloutbound(::google::protobuf::int32 value);

  // double swapUsage = 20;
  void clear_swapusage();
  static const int kSwapUsageFieldNumber = 20;
  double swapusage() const;
  void set_swapusage(double value);

  // @@protoc_insertion_point(class_scope:proto.RealSystemInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sysdescr_;
  ::google::protobuf::internal::ArenaStringPtr loadaverage_;
  ::google::protobuf::internal::ArenaStringPtr osname_;
  ::google::protobuf::internal::ArenaStringPtr osversion_;
  ::google::protobuf::internal::ArenaStringPtr osvender_;
  ::google::protobuf::internal::ArenaStringPtr cpumonokaryonusage_;
  ::google::protobuf::internal::ArenaStringPtr agentversion_;
  double sysuptime_;
  ::google::protobuf::int32 cpufrequency_;
  ::google::protobuf::int32 cpunumbers_;
  double cpuusage_;
  double memoryusage_;
  ::google::protobuf::int32 memorysize_;
  ::google::protobuf::int32 disktotalsize_;
  ::google::protobuf::int32 mainfsdisksize_;
  ::google::protobuf::int32 mainfsavailablesize_;
  ::google::protobuf::int32 mainfsdiskuseratio_;
  ::google::protobuf::int32 tcpnum_;
  ::google::protobuf::int32 tcptotalinbound_;
  ::google::protobuf::int32 tcptotaloutbound_;
  double swapusage_;
  mutable int _cached_size_;
  friend struct protobuf_RealQueryHostStatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealDiskStatusInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RealDiskStatusInfo) */ {
 public:
  RealDiskStatusInfo();
  virtual ~RealDiskStatusInfo();

  RealDiskStatusInfo(const RealDiskStatusInfo& from);

  inline RealDiskStatusInfo& operator=(const RealDiskStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealDiskStatusInfo(RealDiskStatusInfo&& from) noexcept
    : RealDiskStatusInfo() {
    *this = ::std::move(from);
  }

  inline RealDiskStatusInfo& operator=(RealDiskStatusInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealDiskStatusInfo& default_instance();

  static inline const RealDiskStatusInfo* internal_default_instance() {
    return reinterpret_cast<const RealDiskStatusInfo*>(
               &_RealDiskStatusInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RealDiskStatusInfo* other);
  friend void swap(RealDiskStatusInfo& a, RealDiskStatusInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealDiskStatusInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RealDiskStatusInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RealDiskStatusInfo& from);
  void MergeFrom(const RealDiskStatusInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RealDiskStatusInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.RealSingleDiskStatusInfo singleDiskStatus = 1;
  int singlediskstatus_size() const;
  void clear_singlediskstatus();
  static const int kSingleDiskStatusFieldNumber = 1;
  const ::proto::RealSingleDiskStatusInfo& singlediskstatus(int index) const;
  ::proto::RealSingleDiskStatusInfo* mutable_singlediskstatus(int index);
  ::proto::RealSingleDiskStatusInfo* add_singlediskstatus();
  ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskStatusInfo >*
      mutable_singlediskstatus();
  const ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskStatusInfo >&
      singlediskstatus() const;

  // @@protoc_insertion_point(class_scope:proto.RealDiskStatusInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskStatusInfo > singlediskstatus_;
  mutable int _cached_size_;
  friend struct protobuf_RealQueryHostStatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealSingleDiskStatusInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RealSingleDiskStatusInfo) */ {
 public:
  RealSingleDiskStatusInfo();
  virtual ~RealSingleDiskStatusInfo();

  RealSingleDiskStatusInfo(const RealSingleDiskStatusInfo& from);

  inline RealSingleDiskStatusInfo& operator=(const RealSingleDiskStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealSingleDiskStatusInfo(RealSingleDiskStatusInfo&& from) noexcept
    : RealSingleDiskStatusInfo() {
    *this = ::std::move(from);
  }

  inline RealSingleDiskStatusInfo& operator=(RealSingleDiskStatusInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealSingleDiskStatusInfo& default_instance();

  static inline const RealSingleDiskStatusInfo* internal_default_instance() {
    return reinterpret_cast<const RealSingleDiskStatusInfo*>(
               &_RealSingleDiskStatusInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RealSingleDiskStatusInfo* other);
  friend void swap(RealSingleDiskStatusInfo& a, RealSingleDiskStatusInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealSingleDiskStatusInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RealSingleDiskStatusInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RealSingleDiskStatusInfo& from);
  void MergeFrom(const RealSingleDiskStatusInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RealSingleDiskStatusInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diskName = 1;
  void clear_diskname();
  static const int kDiskNameFieldNumber = 1;
  const ::std::string& diskname() const;
  void set_diskname(const ::std::string& value);
  #if LANG_CXX11
  void set_diskname(::std::string&& value);
  #endif
  void set_diskname(const char* value);
  void set_diskname(const char* value, size_t size);
  ::std::string* mutable_diskname();
  ::std::string* release_diskname();
  void set_allocated_diskname(::std::string* diskname);

  // string diskServiceTime = 2;
  void clear_diskservicetime();
  static const int kDiskServiceTimeFieldNumber = 2;
  const ::std::string& diskservicetime() const;
  void set_diskservicetime(const ::std::string& value);
  #if LANG_CXX11
  void set_diskservicetime(::std::string&& value);
  #endif
  void set_diskservicetime(const char* value);
  void set_diskservicetime(const char* value, size_t size);
  ::std::string* mutable_diskservicetime();
  ::std::string* release_diskservicetime();
  void set_allocated_diskservicetime(::std::string* diskservicetime);

  // string diskQueue = 3;
  void clear_diskqueue();
  static const int kDiskQueueFieldNumber = 3;
  const ::std::string& diskqueue() const;
  void set_diskqueue(const ::std::string& value);
  #if LANG_CXX11
  void set_diskqueue(::std::string&& value);
  #endif
  void set_diskqueue(const char* value);
  void set_diskqueue(const char* value, size_t size);
  ::std::string* mutable_diskqueue();
  ::std::string* release_diskqueue();
  void set_allocated_diskqueue(::std::string* diskqueue);

  // string diskReadBytes = 4;
  void clear_diskreadbytes();
  static const int kDiskReadBytesFieldNumber = 4;
  const ::std::string& diskreadbytes() const;
  void set_diskreadbytes(const ::std::string& value);
  #if LANG_CXX11
  void set_diskreadbytes(::std::string&& value);
  #endif
  void set_diskreadbytes(const char* value);
  void set_diskreadbytes(const char* value, size_t size);
  ::std::string* mutable_diskreadbytes();
  ::std::string* release_diskreadbytes();
  void set_allocated_diskreadbytes(::std::string* diskreadbytes);

  // string diskReads = 5;
  void clear_diskreads();
  static const int kDiskReadsFieldNumber = 5;
  const ::std::string& diskreads() const;
  void set_diskreads(const ::std::string& value);
  #if LANG_CXX11
  void set_diskreads(::std::string&& value);
  #endif
  void set_diskreads(const char* value);
  void set_diskreads(const char* value, size_t size);
  ::std::string* mutable_diskreads();
  ::std::string* release_diskreads();
  void set_allocated_diskreads(::std::string* diskreads);

  // string diskWriteBytes = 6;
  void clear_diskwritebytes();
  static const int kDiskWriteBytesFieldNumber = 6;
  const ::std::string& diskwritebytes() const;
  void set_diskwritebytes(const ::std::string& value);
  #if LANG_CXX11
  void set_diskwritebytes(::std::string&& value);
  #endif
  void set_diskwritebytes(const char* value);
  void set_diskwritebytes(const char* value, size_t size);
  ::std::string* mutable_diskwritebytes();
  ::std::string* release_diskwritebytes();
  void set_allocated_diskwritebytes(::std::string* diskwritebytes);

  // string diskWrites = 7;
  void clear_diskwrites();
  static const int kDiskWritesFieldNumber = 7;
  const ::std::string& diskwrites() const;
  void set_diskwrites(const ::std::string& value);
  #if LANG_CXX11
  void set_diskwrites(::std::string&& value);
  #endif
  void set_diskwrites(const char* value);
  void set_diskwrites(const char* value, size_t size);
  ::std::string* mutable_diskwrites();
  ::std::string* release_diskwrites();
  void set_allocated_diskwrites(::std::string* diskwrites);

  // string diskTotal = 8;
  void clear_disktotal();
  static const int kDiskTotalFieldNumber = 8;
  const ::std::string& disktotal() const;
  void set_disktotal(const ::std::string& value);
  #if LANG_CXX11
  void set_disktotal(::std::string&& value);
  #endif
  void set_disktotal(const char* value);
  void set_disktotal(const char* value, size_t size);
  ::std::string* mutable_disktotal();
  ::std::string* release_disktotal();
  void set_allocated_disktotal(::std::string* disktotal);

  // string diskAvail = 9;
  void clear_diskavail();
  static const int kDiskAvailFieldNumber = 9;
  const ::std::string& diskavail() const;
  void set_diskavail(const ::std::string& value);
  #if LANG_CXX11
  void set_diskavail(::std::string&& value);
  #endif
  void set_diskavail(const char* value);
  void set_diskavail(const char* value, size_t size);
  ::std::string* mutable_diskavail();
  ::std::string* release_diskavail();
  void set_allocated_diskavail(::std::string* diskavail);

  // string diskUsage = 10;
  void clear_diskusage();
  static const int kDiskUsageFieldNumber = 10;
  const ::std::string& diskusage() const;
  void set_diskusage(const ::std::string& value);
  #if LANG_CXX11
  void set_diskusage(::std::string&& value);
  #endif
  void set_diskusage(const char* value);
  void set_diskusage(const char* value, size_t size);
  ::std::string* mutable_diskusage();
  ::std::string* release_diskusage();
  void set_allocated_diskusage(::std::string* diskusage);

  // @@protoc_insertion_point(class_scope:proto.RealSingleDiskStatusInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr diskname_;
  ::google::protobuf::internal::ArenaStringPtr diskservicetime_;
  ::google::protobuf::internal::ArenaStringPtr diskqueue_;
  ::google::protobuf::internal::ArenaStringPtr diskreadbytes_;
  ::google::protobuf::internal::ArenaStringPtr diskreads_;
  ::google::protobuf::internal::ArenaStringPtr diskwritebytes_;
  ::google::protobuf::internal::ArenaStringPtr diskwrites_;
  ::google::protobuf::internal::ArenaStringPtr disktotal_;
  ::google::protobuf::internal::ArenaStringPtr diskavail_;
  ::google::protobuf::internal::ArenaStringPtr diskusage_;
  mutable int _cached_size_;
  friend struct protobuf_RealQueryHostStatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealDiskCfgInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RealDiskCfgInfo) */ {
 public:
  RealDiskCfgInfo();
  virtual ~RealDiskCfgInfo();

  RealDiskCfgInfo(const RealDiskCfgInfo& from);

  inline RealDiskCfgInfo& operator=(const RealDiskCfgInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealDiskCfgInfo(RealDiskCfgInfo&& from) noexcept
    : RealDiskCfgInfo() {
    *this = ::std::move(from);
  }

  inline RealDiskCfgInfo& operator=(RealDiskCfgInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealDiskCfgInfo& default_instance();

  static inline const RealDiskCfgInfo* internal_default_instance() {
    return reinterpret_cast<const RealDiskCfgInfo*>(
               &_RealDiskCfgInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RealDiskCfgInfo* other);
  friend void swap(RealDiskCfgInfo& a, RealDiskCfgInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealDiskCfgInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RealDiskCfgInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RealDiskCfgInfo& from);
  void MergeFrom(const RealDiskCfgInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RealDiskCfgInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.RealSingleDiskCfgInfo singleDiskInfo = 1;
  int singlediskinfo_size() const;
  void clear_singlediskinfo();
  static const int kSingleDiskInfoFieldNumber = 1;
  const ::proto::RealSingleDiskCfgInfo& singlediskinfo(int index) const;
  ::proto::RealSingleDiskCfgInfo* mutable_singlediskinfo(int index);
  ::proto::RealSingleDiskCfgInfo* add_singlediskinfo();
  ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskCfgInfo >*
      mutable_singlediskinfo();
  const ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskCfgInfo >&
      singlediskinfo() const;

  // @@protoc_insertion_point(class_scope:proto.RealDiskCfgInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskCfgInfo > singlediskinfo_;
  mutable int _cached_size_;
  friend struct protobuf_RealQueryHostStatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealSingleDiskCfgInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RealSingleDiskCfgInfo) */ {
 public:
  RealSingleDiskCfgInfo();
  virtual ~RealSingleDiskCfgInfo();

  RealSingleDiskCfgInfo(const RealSingleDiskCfgInfo& from);

  inline RealSingleDiskCfgInfo& operator=(const RealSingleDiskCfgInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealSingleDiskCfgInfo(RealSingleDiskCfgInfo&& from) noexcept
    : RealSingleDiskCfgInfo() {
    *this = ::std::move(from);
  }

  inline RealSingleDiskCfgInfo& operator=(RealSingleDiskCfgInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealSingleDiskCfgInfo& default_instance();

  static inline const RealSingleDiskCfgInfo* internal_default_instance() {
    return reinterpret_cast<const RealSingleDiskCfgInfo*>(
               &_RealSingleDiskCfgInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RealSingleDiskCfgInfo* other);
  friend void swap(RealSingleDiskCfgInfo& a, RealSingleDiskCfgInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealSingleDiskCfgInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RealSingleDiskCfgInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RealSingleDiskCfgInfo& from);
  void MergeFrom(const RealSingleDiskCfgInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RealSingleDiskCfgInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diskName = 2;
  void clear_diskname();
  static const int kDiskNameFieldNumber = 2;
  const ::std::string& diskname() const;
  void set_diskname(const ::std::string& value);
  #if LANG_CXX11
  void set_diskname(::std::string&& value);
  #endif
  void set_diskname(const char* value);
  void set_diskname(const char* value, size_t size);
  ::std::string* mutable_diskname();
  ::std::string* release_diskname();
  void set_allocated_diskname(::std::string* diskname);

  // string diskSize = 3;
  void clear_disksize();
  static const int kDiskSizeFieldNumber = 3;
  const ::std::string& disksize() const;
  void set_disksize(const ::std::string& value);
  #if LANG_CXX11
  void set_disksize(::std::string&& value);
  #endif
  void set_disksize(const char* value);
  void set_disksize(const char* value, size_t size);
  ::std::string* mutable_disksize();
  ::std::string* release_disksize();
  void set_allocated_disksize(::std::string* disksize);

  // string diskSeqNo = 4;
  void clear_diskseqno();
  static const int kDiskSeqNoFieldNumber = 4;
  const ::std::string& diskseqno() const;
  void set_diskseqno(const ::std::string& value);
  #if LANG_CXX11
  void set_diskseqno(::std::string&& value);
  #endif
  void set_diskseqno(const char* value);
  void set_diskseqno(const char* value, size_t size);
  ::std::string* mutable_diskseqno();
  ::std::string* release_diskseqno();
  void set_allocated_diskseqno(::std::string* diskseqno);

  // int32 diskIndex = 1;
  void clear_diskindex();
  static const int kDiskIndexFieldNumber = 1;
  ::google::protobuf::int32 diskindex() const;
  void set_diskindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.RealSingleDiskCfgInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr diskname_;
  ::google::protobuf::internal::ArenaStringPtr disksize_;
  ::google::protobuf::internal::ArenaStringPtr diskseqno_;
  ::google::protobuf::int32 diskindex_;
  mutable int _cached_size_;
  friend struct protobuf_RealQueryHostStatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealDiskRaidCfgInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RealDiskRaidCfgInfo) */ {
 public:
  RealDiskRaidCfgInfo();
  virtual ~RealDiskRaidCfgInfo();

  RealDiskRaidCfgInfo(const RealDiskRaidCfgInfo& from);

  inline RealDiskRaidCfgInfo& operator=(const RealDiskRaidCfgInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealDiskRaidCfgInfo(RealDiskRaidCfgInfo&& from) noexcept
    : RealDiskRaidCfgInfo() {
    *this = ::std::move(from);
  }

  inline RealDiskRaidCfgInfo& operator=(RealDiskRaidCfgInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealDiskRaidCfgInfo& default_instance();

  static inline const RealDiskRaidCfgInfo* internal_default_instance() {
    return reinterpret_cast<const RealDiskRaidCfgInfo*>(
               &_RealDiskRaidCfgInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(RealDiskRaidCfgInfo* other);
  friend void swap(RealDiskRaidCfgInfo& a, RealDiskRaidCfgInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealDiskRaidCfgInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RealDiskRaidCfgInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RealDiskRaidCfgInfo& from);
  void MergeFrom(const RealDiskRaidCfgInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RealDiskRaidCfgInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string personalities = 1;
  void clear_personalities();
  static const int kPersonalitiesFieldNumber = 1;
  const ::std::string& personalities() const;
  void set_personalities(const ::std::string& value);
  #if LANG_CXX11
  void set_personalities(::std::string&& value);
  #endif
  void set_personalities(const char* value);
  void set_personalities(const char* value, size_t size);
  ::std::string* mutable_personalities();
  ::std::string* release_personalities();
  void set_allocated_personalities(::std::string* personalities);

  // string unusedDevices = 2;
  void clear_unuseddevices();
  static const int kUnusedDevicesFieldNumber = 2;
  const ::std::string& unuseddevices() const;
  void set_unuseddevices(const ::std::string& value);
  #if LANG_CXX11
  void set_unuseddevices(::std::string&& value);
  #endif
  void set_unuseddevices(const char* value);
  void set_unuseddevices(const char* value, size_t size);
  ::std::string* mutable_unuseddevices();
  ::std::string* release_unuseddevices();
  void set_allocated_unuseddevices(::std::string* unuseddevices);

  // @@protoc_insertion_point(class_scope:proto.RealDiskRaidCfgInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr personalities_;
  ::google::protobuf::internal::ArenaStringPtr unuseddevices_;
  mutable int _cached_size_;
  friend struct protobuf_RealQueryHostStatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealDiskHealthInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RealDiskHealthInfo) */ {
 public:
  RealDiskHealthInfo();
  virtual ~RealDiskHealthInfo();

  RealDiskHealthInfo(const RealDiskHealthInfo& from);

  inline RealDiskHealthInfo& operator=(const RealDiskHealthInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealDiskHealthInfo(RealDiskHealthInfo&& from) noexcept
    : RealDiskHealthInfo() {
    *this = ::std::move(from);
  }

  inline RealDiskHealthInfo& operator=(RealDiskHealthInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealDiskHealthInfo& default_instance();

  static inline const RealDiskHealthInfo* internal_default_instance() {
    return reinterpret_cast<const RealDiskHealthInfo*>(
               &_RealDiskHealthInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(RealDiskHealthInfo* other);
  friend void swap(RealDiskHealthInfo& a, RealDiskHealthInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealDiskHealthInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RealDiskHealthInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RealDiskHealthInfo& from);
  void MergeFrom(const RealDiskHealthInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RealDiskHealthInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.RealSingleDiskHealthInfo singleDiskHealth = 1;
  int singlediskhealth_size() const;
  void clear_singlediskhealth();
  static const int kSingleDiskHealthFieldNumber = 1;
  const ::proto::RealSingleDiskHealthInfo& singlediskhealth(int index) const;
  ::proto::RealSingleDiskHealthInfo* mutable_singlediskhealth(int index);
  ::proto::RealSingleDiskHealthInfo* add_singlediskhealth();
  ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskHealthInfo >*
      mutable_singlediskhealth();
  const ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskHealthInfo >&
      singlediskhealth() const;

  // @@protoc_insertion_point(class_scope:proto.RealDiskHealthInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskHealthInfo > singlediskhealth_;
  mutable int _cached_size_;
  friend struct protobuf_RealQueryHostStatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealSingleDiskHealthInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RealSingleDiskHealthInfo) */ {
 public:
  RealSingleDiskHealthInfo();
  virtual ~RealSingleDiskHealthInfo();

  RealSingleDiskHealthInfo(const RealSingleDiskHealthInfo& from);

  inline RealSingleDiskHealthInfo& operator=(const RealSingleDiskHealthInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealSingleDiskHealthInfo(RealSingleDiskHealthInfo&& from) noexcept
    : RealSingleDiskHealthInfo() {
    *this = ::std::move(from);
  }

  inline RealSingleDiskHealthInfo& operator=(RealSingleDiskHealthInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealSingleDiskHealthInfo& default_instance();

  static inline const RealSingleDiskHealthInfo* internal_default_instance() {
    return reinterpret_cast<const RealSingleDiskHealthInfo*>(
               &_RealSingleDiskHealthInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(RealSingleDiskHealthInfo* other);
  friend void swap(RealSingleDiskHealthInfo& a, RealSingleDiskHealthInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealSingleDiskHealthInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RealSingleDiskHealthInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RealSingleDiskHealthInfo& from);
  void MergeFrom(const RealSingleDiskHealthInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RealSingleDiskHealthInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string diskName = 1;
  void clear_diskname();
  static const int kDiskNameFieldNumber = 1;
  const ::std::string& diskname() const;
  void set_diskname(const ::std::string& value);
  #if LANG_CXX11
  void set_diskname(::std::string&& value);
  #endif
  void set_diskname(const char* value);
  void set_diskname(const char* value, size_t size);
  ::std::string* mutable_diskname();
  ::std::string* release_diskname();
  void set_allocated_diskname(::std::string* diskname);

  // string smartCtlInfo = 2;
  void clear_smartctlinfo();
  static const int kSmartCtlInfoFieldNumber = 2;
  const ::std::string& smartctlinfo() const;
  void set_smartctlinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_smartctlinfo(::std::string&& value);
  #endif
  void set_smartctlinfo(const char* value);
  void set_smartctlinfo(const char* value, size_t size);
  ::std::string* mutable_smartctlinfo();
  ::std::string* release_smartctlinfo();
  void set_allocated_smartctlinfo(::std::string* smartctlinfo);

  // @@protoc_insertion_point(class_scope:proto.RealSingleDiskHealthInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr diskname_;
  ::google::protobuf::internal::ArenaStringPtr smartctlinfo_;
  mutable int _cached_size_;
  friend struct protobuf_RealQueryHostStatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealNicStatusInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RealNicStatusInfo) */ {
 public:
  RealNicStatusInfo();
  virtual ~RealNicStatusInfo();

  RealNicStatusInfo(const RealNicStatusInfo& from);

  inline RealNicStatusInfo& operator=(const RealNicStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealNicStatusInfo(RealNicStatusInfo&& from) noexcept
    : RealNicStatusInfo() {
    *this = ::std::move(from);
  }

  inline RealNicStatusInfo& operator=(RealNicStatusInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealNicStatusInfo& default_instance();

  static inline const RealNicStatusInfo* internal_default_instance() {
    return reinterpret_cast<const RealNicStatusInfo*>(
               &_RealNicStatusInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(RealNicStatusInfo* other);
  friend void swap(RealNicStatusInfo& a, RealNicStatusInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealNicStatusInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RealNicStatusInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RealNicStatusInfo& from);
  void MergeFrom(const RealNicStatusInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RealNicStatusInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.SingleNicPerfData singleNicInfo = 1;
  int singlenicinfo_size() const;
  void clear_singlenicinfo();
  static const int kSingleNicInfoFieldNumber = 1;
  const ::proto::SingleNicPerfData& singlenicinfo(int index) const;
  ::proto::SingleNicPerfData* mutable_singlenicinfo(int index);
  ::proto::SingleNicPerfData* add_singlenicinfo();
  ::google::protobuf::RepeatedPtrField< ::proto::SingleNicPerfData >*
      mutable_singlenicinfo();
  const ::google::protobuf::RepeatedPtrField< ::proto::SingleNicPerfData >&
      singlenicinfo() const;

  // @@protoc_insertion_point(class_scope:proto.RealNicStatusInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::SingleNicPerfData > singlenicinfo_;
  mutable int _cached_size_;
  friend struct protobuf_RealQueryHostStatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealProcessStatusInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RealProcessStatusInfo) */ {
 public:
  RealProcessStatusInfo();
  virtual ~RealProcessStatusInfo();

  RealProcessStatusInfo(const RealProcessStatusInfo& from);

  inline RealProcessStatusInfo& operator=(const RealProcessStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealProcessStatusInfo(RealProcessStatusInfo&& from) noexcept
    : RealProcessStatusInfo() {
    *this = ::std::move(from);
  }

  inline RealProcessStatusInfo& operator=(RealProcessStatusInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealProcessStatusInfo& default_instance();

  static inline const RealProcessStatusInfo* internal_default_instance() {
    return reinterpret_cast<const RealProcessStatusInfo*>(
               &_RealProcessStatusInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(RealProcessStatusInfo* other);
  friend void swap(RealProcessStatusInfo& a, RealProcessStatusInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealProcessStatusInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RealProcessStatusInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RealProcessStatusInfo& from);
  void MergeFrom(const RealProcessStatusInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RealProcessStatusInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.RealSingleProcessStatusInfo singleProcessInfo = 1;
  int singleprocessinfo_size() const;
  void clear_singleprocessinfo();
  static const int kSingleProcessInfoFieldNumber = 1;
  const ::proto::RealSingleProcessStatusInfo& singleprocessinfo(int index) const;
  ::proto::RealSingleProcessStatusInfo* mutable_singleprocessinfo(int index);
  ::proto::RealSingleProcessStatusInfo* add_singleprocessinfo();
  ::google::protobuf::RepeatedPtrField< ::proto::RealSingleProcessStatusInfo >*
      mutable_singleprocessinfo();
  const ::google::protobuf::RepeatedPtrField< ::proto::RealSingleProcessStatusInfo >&
      singleprocessinfo() const;

  // @@protoc_insertion_point(class_scope:proto.RealProcessStatusInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::RealSingleProcessStatusInfo > singleprocessinfo_;
  mutable int _cached_size_;
  friend struct protobuf_RealQueryHostStatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RealSingleProcessStatusInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.RealSingleProcessStatusInfo) */ {
 public:
  RealSingleProcessStatusInfo();
  virtual ~RealSingleProcessStatusInfo();

  RealSingleProcessStatusInfo(const RealSingleProcessStatusInfo& from);

  inline RealSingleProcessStatusInfo& operator=(const RealSingleProcessStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RealSingleProcessStatusInfo(RealSingleProcessStatusInfo&& from) noexcept
    : RealSingleProcessStatusInfo() {
    *this = ::std::move(from);
  }

  inline RealSingleProcessStatusInfo& operator=(RealSingleProcessStatusInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RealSingleProcessStatusInfo& default_instance();

  static inline const RealSingleProcessStatusInfo* internal_default_instance() {
    return reinterpret_cast<const RealSingleProcessStatusInfo*>(
               &_RealSingleProcessStatusInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(RealSingleProcessStatusInfo* other);
  friend void swap(RealSingleProcessStatusInfo& a, RealSingleProcessStatusInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RealSingleProcessStatusInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RealSingleProcessStatusInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RealSingleProcessStatusInfo& from);
  void MergeFrom(const RealSingleProcessStatusInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RealSingleProcessStatusInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string processAppName = 2;
  void clear_processappname();
  static const int kProcessAppNameFieldNumber = 2;
  const ::std::string& processappname() const;
  void set_processappname(const ::std::string& value);
  #if LANG_CXX11
  void set_processappname(::std::string&& value);
  #endif
  void set_processappname(const char* value);
  void set_processappname(const char* value, size_t size);
  ::std::string* mutable_processappname();
  ::std::string* release_processappname();
  void set_allocated_processappname(::std::string* processappname);

  // string processState = 4;
  void clear_processstate();
  static const int kProcessStateFieldNumber = 4;
  const ::std::string& processstate() const;
  void set_processstate(const ::std::string& value);
  #if LANG_CXX11
  void set_processstate(::std::string&& value);
  #endif
  void set_processstate(const char* value);
  void set_processstate(const char* value, size_t size);
  ::std::string* mutable_processstate();
  ::std::string* release_processstate();
  void set_allocated_processstate(::std::string* processstate);

  // string processCpuUsage = 5;
  void clear_processcpuusage();
  static const int kProcessCpuUsageFieldNumber = 5;
  const ::std::string& processcpuusage() const;
  void set_processcpuusage(const ::std::string& value);
  #if LANG_CXX11
  void set_processcpuusage(::std::string&& value);
  #endif
  void set_processcpuusage(const char* value);
  void set_processcpuusage(const char* value, size_t size);
  ::std::string* mutable_processcpuusage();
  ::std::string* release_processcpuusage();
  void set_allocated_processcpuusage(::std::string* processcpuusage);

  // string processMemory = 6;
  void clear_processmemory();
  static const int kProcessMemoryFieldNumber = 6;
  const ::std::string& processmemory() const;
  void set_processmemory(const ::std::string& value);
  #if LANG_CXX11
  void set_processmemory(::std::string&& value);
  #endif
  void set_processmemory(const char* value);
  void set_processmemory(const char* value, size_t size);
  ::std::string* mutable_processmemory();
  ::std::string* release_processmemory();
  void set_allocated_processmemory(::std::string* processmemory);

  // int64 processPid = 3;
  void clear_processpid();
  static const int kProcessPidFieldNumber = 3;
  ::google::protobuf::int64 processpid() const;
  void set_processpid(::google::protobuf::int64 value);

  // int32 processId = 1;
  void clear_processid();
  static const int kProcessIdFieldNumber = 1;
  ::google::protobuf::int32 processid() const;
  void set_processid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.RealSingleProcessStatusInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr processappname_;
  ::google::protobuf::internal::ArenaStringPtr processstate_;
  ::google::protobuf::internal::ArenaStringPtr processcpuusage_;
  ::google::protobuf::internal::ArenaStringPtr processmemory_;
  ::google::protobuf::int64 processpid_;
  ::google::protobuf::int32 processid_;
  mutable int _cached_size_;
  friend struct protobuf_RealQueryHostStatus_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RealQueryHostStatusData

// int64 uniqueId = 1;
inline void RealQueryHostStatusData::clear_uniqueid() {
  uniqueid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RealQueryHostStatusData::uniqueid() const {
  // @@protoc_insertion_point(field_get:proto.RealQueryHostStatusData.uniqueId)
  return uniqueid_;
}
inline void RealQueryHostStatusData::set_uniqueid(::google::protobuf::int64 value) {
  
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:proto.RealQueryHostStatusData.uniqueId)
}

// .proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 2;
inline void RealQueryHostStatusData::clear_querycfgtype() {
  querycfgtype_ = 0;
}
inline ::proto::RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusData::querycfgtype() const {
  // @@protoc_insertion_point(field_get:proto.RealQueryHostStatusData.queryCfgType)
  return static_cast< ::proto::RealQueryHostStatusData_HostCfgTypeEnum >(querycfgtype_);
}
inline void RealQueryHostStatusData::set_querycfgtype(::proto::RealQueryHostStatusData_HostCfgTypeEnum value) {
  
  querycfgtype_ = value;
  // @@protoc_insertion_point(field_set:proto.RealQueryHostStatusData.queryCfgType)
}

// -------------------------------------------------------------------

// RealQueryHostStatusResponse

// .proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 1;
inline void RealQueryHostStatusResponse::clear_querycfgtype() {
  querycfgtype_ = 0;
}
inline ::proto::RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusResponse::querycfgtype() const {
  // @@protoc_insertion_point(field_get:proto.RealQueryHostStatusResponse.queryCfgType)
  return static_cast< ::proto::RealQueryHostStatusData_HostCfgTypeEnum >(querycfgtype_);
}
inline void RealQueryHostStatusResponse::set_querycfgtype(::proto::RealQueryHostStatusData_HostCfgTypeEnum value) {
  
  querycfgtype_ = value;
  // @@protoc_insertion_point(field_set:proto.RealQueryHostStatusResponse.queryCfgType)
}

// string data = 2;
inline void RealQueryHostStatusResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealQueryHostStatusResponse::data() const {
  // @@protoc_insertion_point(field_get:proto.RealQueryHostStatusResponse.data)
  return data_.GetNoArena();
}
inline void RealQueryHostStatusResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealQueryHostStatusResponse.data)
}
#if LANG_CXX11
inline void RealQueryHostStatusResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealQueryHostStatusResponse.data)
}
#endif
inline void RealQueryHostStatusResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealQueryHostStatusResponse.data)
}
inline void RealQueryHostStatusResponse::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealQueryHostStatusResponse.data)
}
inline ::std::string* RealQueryHostStatusResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealQueryHostStatusResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealQueryHostStatusResponse::release_data() {
  // @@protoc_insertion_point(field_release:proto.RealQueryHostStatusResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealQueryHostStatusResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.RealQueryHostStatusResponse.data)
}

// -------------------------------------------------------------------

// RealSystemInfo

// string sysDescr = 1;
inline void RealSystemInfo::clear_sysdescr() {
  sysdescr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSystemInfo::sysdescr() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.sysDescr)
  return sysdescr_.GetNoArena();
}
inline void RealSystemInfo::set_sysdescr(const ::std::string& value) {
  
  sysdescr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.sysDescr)
}
#if LANG_CXX11
inline void RealSystemInfo::set_sysdescr(::std::string&& value) {
  
  sysdescr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSystemInfo.sysDescr)
}
#endif
inline void RealSystemInfo::set_sysdescr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sysdescr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSystemInfo.sysDescr)
}
inline void RealSystemInfo::set_sysdescr(const char* value, size_t size) {
  
  sysdescr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSystemInfo.sysDescr)
}
inline ::std::string* RealSystemInfo::mutable_sysdescr() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSystemInfo.sysDescr)
  return sysdescr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSystemInfo::release_sysdescr() {
  // @@protoc_insertion_point(field_release:proto.RealSystemInfo.sysDescr)
  
  return sysdescr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSystemInfo::set_allocated_sysdescr(::std::string* sysdescr) {
  if (sysdescr != NULL) {
    
  } else {
    
  }
  sysdescr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sysdescr);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSystemInfo.sysDescr)
}

// double sysUptime = 2;
inline void RealSystemInfo::clear_sysuptime() {
  sysuptime_ = 0;
}
inline double RealSystemInfo::sysuptime() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.sysUptime)
  return sysuptime_;
}
inline void RealSystemInfo::set_sysuptime(double value) {
  
  sysuptime_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.sysUptime)
}

// int32 cpuFrequency = 3;
inline void RealSystemInfo::clear_cpufrequency() {
  cpufrequency_ = 0;
}
inline ::google::protobuf::int32 RealSystemInfo::cpufrequency() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.cpuFrequency)
  return cpufrequency_;
}
inline void RealSystemInfo::set_cpufrequency(::google::protobuf::int32 value) {
  
  cpufrequency_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.cpuFrequency)
}

// int32 cpuNumbers = 4;
inline void RealSystemInfo::clear_cpunumbers() {
  cpunumbers_ = 0;
}
inline ::google::protobuf::int32 RealSystemInfo::cpunumbers() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.cpuNumbers)
  return cpunumbers_;
}
inline void RealSystemInfo::set_cpunumbers(::google::protobuf::int32 value) {
  
  cpunumbers_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.cpuNumbers)
}

// string loadAverage = 5;
inline void RealSystemInfo::clear_loadaverage() {
  loadaverage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSystemInfo::loadaverage() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.loadAverage)
  return loadaverage_.GetNoArena();
}
inline void RealSystemInfo::set_loadaverage(const ::std::string& value) {
  
  loadaverage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.loadAverage)
}
#if LANG_CXX11
inline void RealSystemInfo::set_loadaverage(::std::string&& value) {
  
  loadaverage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSystemInfo.loadAverage)
}
#endif
inline void RealSystemInfo::set_loadaverage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loadaverage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSystemInfo.loadAverage)
}
inline void RealSystemInfo::set_loadaverage(const char* value, size_t size) {
  
  loadaverage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSystemInfo.loadAverage)
}
inline ::std::string* RealSystemInfo::mutable_loadaverage() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSystemInfo.loadAverage)
  return loadaverage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSystemInfo::release_loadaverage() {
  // @@protoc_insertion_point(field_release:proto.RealSystemInfo.loadAverage)
  
  return loadaverage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSystemInfo::set_allocated_loadaverage(::std::string* loadaverage) {
  if (loadaverage != NULL) {
    
  } else {
    
  }
  loadaverage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loadaverage);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSystemInfo.loadAverage)
}

// double cpuUsage = 6;
inline void RealSystemInfo::clear_cpuusage() {
  cpuusage_ = 0;
}
inline double RealSystemInfo::cpuusage() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.cpuUsage)
  return cpuusage_;
}
inline void RealSystemInfo::set_cpuusage(double value) {
  
  cpuusage_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.cpuUsage)
}

// int32 memorySize = 7;
inline void RealSystemInfo::clear_memorysize() {
  memorysize_ = 0;
}
inline ::google::protobuf::int32 RealSystemInfo::memorysize() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.memorySize)
  return memorysize_;
}
inline void RealSystemInfo::set_memorysize(::google::protobuf::int32 value) {
  
  memorysize_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.memorySize)
}

// double memoryUsage = 8;
inline void RealSystemInfo::clear_memoryusage() {
  memoryusage_ = 0;
}
inline double RealSystemInfo::memoryusage() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.memoryUsage)
  return memoryusage_;
}
inline void RealSystemInfo::set_memoryusage(double value) {
  
  memoryusage_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.memoryUsage)
}

// int32 diskTotalSize = 9;
inline void RealSystemInfo::clear_disktotalsize() {
  disktotalsize_ = 0;
}
inline ::google::protobuf::int32 RealSystemInfo::disktotalsize() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.diskTotalSize)
  return disktotalsize_;
}
inline void RealSystemInfo::set_disktotalsize(::google::protobuf::int32 value) {
  
  disktotalsize_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.diskTotalSize)
}

// int32 mainFSDiskSize = 10;
inline void RealSystemInfo::clear_mainfsdisksize() {
  mainfsdisksize_ = 0;
}
inline ::google::protobuf::int32 RealSystemInfo::mainfsdisksize() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.mainFSDiskSize)
  return mainfsdisksize_;
}
inline void RealSystemInfo::set_mainfsdisksize(::google::protobuf::int32 value) {
  
  mainfsdisksize_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.mainFSDiskSize)
}

// int32 mainFSAvailableSize = 11;
inline void RealSystemInfo::clear_mainfsavailablesize() {
  mainfsavailablesize_ = 0;
}
inline ::google::protobuf::int32 RealSystemInfo::mainfsavailablesize() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.mainFSAvailableSize)
  return mainfsavailablesize_;
}
inline void RealSystemInfo::set_mainfsavailablesize(::google::protobuf::int32 value) {
  
  mainfsavailablesize_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.mainFSAvailableSize)
}

// int32 mainFSDiskUseRatio = 12;
inline void RealSystemInfo::clear_mainfsdiskuseratio() {
  mainfsdiskuseratio_ = 0;
}
inline ::google::protobuf::int32 RealSystemInfo::mainfsdiskuseratio() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.mainFSDiskUseRatio)
  return mainfsdiskuseratio_;
}
inline void RealSystemInfo::set_mainfsdiskuseratio(::google::protobuf::int32 value) {
  
  mainfsdiskuseratio_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.mainFSDiskUseRatio)
}

// string osName = 13;
inline void RealSystemInfo::clear_osname() {
  osname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSystemInfo::osname() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.osName)
  return osname_.GetNoArena();
}
inline void RealSystemInfo::set_osname(const ::std::string& value) {
  
  osname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.osName)
}
#if LANG_CXX11
inline void RealSystemInfo::set_osname(::std::string&& value) {
  
  osname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSystemInfo.osName)
}
#endif
inline void RealSystemInfo::set_osname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  osname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSystemInfo.osName)
}
inline void RealSystemInfo::set_osname(const char* value, size_t size) {
  
  osname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSystemInfo.osName)
}
inline ::std::string* RealSystemInfo::mutable_osname() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSystemInfo.osName)
  return osname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSystemInfo::release_osname() {
  // @@protoc_insertion_point(field_release:proto.RealSystemInfo.osName)
  
  return osname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSystemInfo::set_allocated_osname(::std::string* osname) {
  if (osname != NULL) {
    
  } else {
    
  }
  osname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osname);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSystemInfo.osName)
}

// string osVersion = 14;
inline void RealSystemInfo::clear_osversion() {
  osversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSystemInfo::osversion() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.osVersion)
  return osversion_.GetNoArena();
}
inline void RealSystemInfo::set_osversion(const ::std::string& value) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.osVersion)
}
#if LANG_CXX11
inline void RealSystemInfo::set_osversion(::std::string&& value) {
  
  osversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSystemInfo.osVersion)
}
#endif
inline void RealSystemInfo::set_osversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSystemInfo.osVersion)
}
inline void RealSystemInfo::set_osversion(const char* value, size_t size) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSystemInfo.osVersion)
}
inline ::std::string* RealSystemInfo::mutable_osversion() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSystemInfo.osVersion)
  return osversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSystemInfo::release_osversion() {
  // @@protoc_insertion_point(field_release:proto.RealSystemInfo.osVersion)
  
  return osversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSystemInfo::set_allocated_osversion(::std::string* osversion) {
  if (osversion != NULL) {
    
  } else {
    
  }
  osversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osversion);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSystemInfo.osVersion)
}

// string osVender = 15;
inline void RealSystemInfo::clear_osvender() {
  osvender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSystemInfo::osvender() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.osVender)
  return osvender_.GetNoArena();
}
inline void RealSystemInfo::set_osvender(const ::std::string& value) {
  
  osvender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.osVender)
}
#if LANG_CXX11
inline void RealSystemInfo::set_osvender(::std::string&& value) {
  
  osvender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSystemInfo.osVender)
}
#endif
inline void RealSystemInfo::set_osvender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  osvender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSystemInfo.osVender)
}
inline void RealSystemInfo::set_osvender(const char* value, size_t size) {
  
  osvender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSystemInfo.osVender)
}
inline ::std::string* RealSystemInfo::mutable_osvender() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSystemInfo.osVender)
  return osvender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSystemInfo::release_osvender() {
  // @@protoc_insertion_point(field_release:proto.RealSystemInfo.osVender)
  
  return osvender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSystemInfo::set_allocated_osvender(::std::string* osvender) {
  if (osvender != NULL) {
    
  } else {
    
  }
  osvender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osvender);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSystemInfo.osVender)
}

// int32 tcpNum = 16;
inline void RealSystemInfo::clear_tcpnum() {
  tcpnum_ = 0;
}
inline ::google::protobuf::int32 RealSystemInfo::tcpnum() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.tcpNum)
  return tcpnum_;
}
inline void RealSystemInfo::set_tcpnum(::google::protobuf::int32 value) {
  
  tcpnum_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.tcpNum)
}

// int32 tcpTotalInbound = 17;
inline void RealSystemInfo::clear_tcptotalinbound() {
  tcptotalinbound_ = 0;
}
inline ::google::protobuf::int32 RealSystemInfo::tcptotalinbound() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.tcpTotalInbound)
  return tcptotalinbound_;
}
inline void RealSystemInfo::set_tcptotalinbound(::google::protobuf::int32 value) {
  
  tcptotalinbound_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.tcpTotalInbound)
}

// int32 tcpTotalOutbound = 18;
inline void RealSystemInfo::clear_tcptotaloutbound() {
  tcptotaloutbound_ = 0;
}
inline ::google::protobuf::int32 RealSystemInfo::tcptotaloutbound() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.tcpTotalOutbound)
  return tcptotaloutbound_;
}
inline void RealSystemInfo::set_tcptotaloutbound(::google::protobuf::int32 value) {
  
  tcptotaloutbound_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.tcpTotalOutbound)
}

// string cpuMonokaryonUsage = 19;
inline void RealSystemInfo::clear_cpumonokaryonusage() {
  cpumonokaryonusage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSystemInfo::cpumonokaryonusage() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.cpuMonokaryonUsage)
  return cpumonokaryonusage_.GetNoArena();
}
inline void RealSystemInfo::set_cpumonokaryonusage(const ::std::string& value) {
  
  cpumonokaryonusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.cpuMonokaryonUsage)
}
#if LANG_CXX11
inline void RealSystemInfo::set_cpumonokaryonusage(::std::string&& value) {
  
  cpumonokaryonusage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSystemInfo.cpuMonokaryonUsage)
}
#endif
inline void RealSystemInfo::set_cpumonokaryonusage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpumonokaryonusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSystemInfo.cpuMonokaryonUsage)
}
inline void RealSystemInfo::set_cpumonokaryonusage(const char* value, size_t size) {
  
  cpumonokaryonusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSystemInfo.cpuMonokaryonUsage)
}
inline ::std::string* RealSystemInfo::mutable_cpumonokaryonusage() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSystemInfo.cpuMonokaryonUsage)
  return cpumonokaryonusage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSystemInfo::release_cpumonokaryonusage() {
  // @@protoc_insertion_point(field_release:proto.RealSystemInfo.cpuMonokaryonUsage)
  
  return cpumonokaryonusage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSystemInfo::set_allocated_cpumonokaryonusage(::std::string* cpumonokaryonusage) {
  if (cpumonokaryonusage != NULL) {
    
  } else {
    
  }
  cpumonokaryonusage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpumonokaryonusage);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSystemInfo.cpuMonokaryonUsage)
}

// double swapUsage = 20;
inline void RealSystemInfo::clear_swapusage() {
  swapusage_ = 0;
}
inline double RealSystemInfo::swapusage() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.swapUsage)
  return swapusage_;
}
inline void RealSystemInfo::set_swapusage(double value) {
  
  swapusage_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.swapUsage)
}

// string agentVersion = 21;
inline void RealSystemInfo::clear_agentversion() {
  agentversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSystemInfo::agentversion() const {
  // @@protoc_insertion_point(field_get:proto.RealSystemInfo.agentVersion)
  return agentversion_.GetNoArena();
}
inline void RealSystemInfo::set_agentversion(const ::std::string& value) {
  
  agentversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSystemInfo.agentVersion)
}
#if LANG_CXX11
inline void RealSystemInfo::set_agentversion(::std::string&& value) {
  
  agentversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSystemInfo.agentVersion)
}
#endif
inline void RealSystemInfo::set_agentversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agentversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSystemInfo.agentVersion)
}
inline void RealSystemInfo::set_agentversion(const char* value, size_t size) {
  
  agentversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSystemInfo.agentVersion)
}
inline ::std::string* RealSystemInfo::mutable_agentversion() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSystemInfo.agentVersion)
  return agentversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSystemInfo::release_agentversion() {
  // @@protoc_insertion_point(field_release:proto.RealSystemInfo.agentVersion)
  
  return agentversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSystemInfo::set_allocated_agentversion(::std::string* agentversion) {
  if (agentversion != NULL) {
    
  } else {
    
  }
  agentversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agentversion);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSystemInfo.agentVersion)
}

// -------------------------------------------------------------------

// RealDiskStatusInfo

// repeated .proto.RealSingleDiskStatusInfo singleDiskStatus = 1;
inline int RealDiskStatusInfo::singlediskstatus_size() const {
  return singlediskstatus_.size();
}
inline void RealDiskStatusInfo::clear_singlediskstatus() {
  singlediskstatus_.Clear();
}
inline const ::proto::RealSingleDiskStatusInfo& RealDiskStatusInfo::singlediskstatus(int index) const {
  // @@protoc_insertion_point(field_get:proto.RealDiskStatusInfo.singleDiskStatus)
  return singlediskstatus_.Get(index);
}
inline ::proto::RealSingleDiskStatusInfo* RealDiskStatusInfo::mutable_singlediskstatus(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RealDiskStatusInfo.singleDiskStatus)
  return singlediskstatus_.Mutable(index);
}
inline ::proto::RealSingleDiskStatusInfo* RealDiskStatusInfo::add_singlediskstatus() {
  // @@protoc_insertion_point(field_add:proto.RealDiskStatusInfo.singleDiskStatus)
  return singlediskstatus_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskStatusInfo >*
RealDiskStatusInfo::mutable_singlediskstatus() {
  // @@protoc_insertion_point(field_mutable_list:proto.RealDiskStatusInfo.singleDiskStatus)
  return &singlediskstatus_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskStatusInfo >&
RealDiskStatusInfo::singlediskstatus() const {
  // @@protoc_insertion_point(field_list:proto.RealDiskStatusInfo.singleDiskStatus)
  return singlediskstatus_;
}

// -------------------------------------------------------------------

// RealSingleDiskStatusInfo

// string diskName = 1;
inline void RealSingleDiskStatusInfo::clear_diskname() {
  diskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskStatusInfo::diskname() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskStatusInfo.diskName)
  return diskname_.GetNoArena();
}
inline void RealSingleDiskStatusInfo::set_diskname(const ::std::string& value) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskStatusInfo.diskName)
}
#if LANG_CXX11
inline void RealSingleDiskStatusInfo::set_diskname(::std::string&& value) {
  
  diskname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskStatusInfo.diskName)
}
#endif
inline void RealSingleDiskStatusInfo::set_diskname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskStatusInfo.diskName)
}
inline void RealSingleDiskStatusInfo::set_diskname(const char* value, size_t size) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskStatusInfo.diskName)
}
inline ::std::string* RealSingleDiskStatusInfo::mutable_diskname() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskStatusInfo.diskName)
  return diskname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskStatusInfo::release_diskname() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskStatusInfo.diskName)
  
  return diskname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskStatusInfo::set_allocated_diskname(::std::string* diskname) {
  if (diskname != NULL) {
    
  } else {
    
  }
  diskname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskname);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskStatusInfo.diskName)
}

// string diskServiceTime = 2;
inline void RealSingleDiskStatusInfo::clear_diskservicetime() {
  diskservicetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskStatusInfo::diskservicetime() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskStatusInfo.diskServiceTime)
  return diskservicetime_.GetNoArena();
}
inline void RealSingleDiskStatusInfo::set_diskservicetime(const ::std::string& value) {
  
  diskservicetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskStatusInfo.diskServiceTime)
}
#if LANG_CXX11
inline void RealSingleDiskStatusInfo::set_diskservicetime(::std::string&& value) {
  
  diskservicetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskStatusInfo.diskServiceTime)
}
#endif
inline void RealSingleDiskStatusInfo::set_diskservicetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskservicetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskStatusInfo.diskServiceTime)
}
inline void RealSingleDiskStatusInfo::set_diskservicetime(const char* value, size_t size) {
  
  diskservicetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskStatusInfo.diskServiceTime)
}
inline ::std::string* RealSingleDiskStatusInfo::mutable_diskservicetime() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskStatusInfo.diskServiceTime)
  return diskservicetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskStatusInfo::release_diskservicetime() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskStatusInfo.diskServiceTime)
  
  return diskservicetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskStatusInfo::set_allocated_diskservicetime(::std::string* diskservicetime) {
  if (diskservicetime != NULL) {
    
  } else {
    
  }
  diskservicetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskservicetime);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskStatusInfo.diskServiceTime)
}

// string diskQueue = 3;
inline void RealSingleDiskStatusInfo::clear_diskqueue() {
  diskqueue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskStatusInfo::diskqueue() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskStatusInfo.diskQueue)
  return diskqueue_.GetNoArena();
}
inline void RealSingleDiskStatusInfo::set_diskqueue(const ::std::string& value) {
  
  diskqueue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskStatusInfo.diskQueue)
}
#if LANG_CXX11
inline void RealSingleDiskStatusInfo::set_diskqueue(::std::string&& value) {
  
  diskqueue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskStatusInfo.diskQueue)
}
#endif
inline void RealSingleDiskStatusInfo::set_diskqueue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskqueue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskStatusInfo.diskQueue)
}
inline void RealSingleDiskStatusInfo::set_diskqueue(const char* value, size_t size) {
  
  diskqueue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskStatusInfo.diskQueue)
}
inline ::std::string* RealSingleDiskStatusInfo::mutable_diskqueue() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskStatusInfo.diskQueue)
  return diskqueue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskStatusInfo::release_diskqueue() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskStatusInfo.diskQueue)
  
  return diskqueue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskStatusInfo::set_allocated_diskqueue(::std::string* diskqueue) {
  if (diskqueue != NULL) {
    
  } else {
    
  }
  diskqueue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskqueue);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskStatusInfo.diskQueue)
}

// string diskReadBytes = 4;
inline void RealSingleDiskStatusInfo::clear_diskreadbytes() {
  diskreadbytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskStatusInfo::diskreadbytes() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskStatusInfo.diskReadBytes)
  return diskreadbytes_.GetNoArena();
}
inline void RealSingleDiskStatusInfo::set_diskreadbytes(const ::std::string& value) {
  
  diskreadbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskStatusInfo.diskReadBytes)
}
#if LANG_CXX11
inline void RealSingleDiskStatusInfo::set_diskreadbytes(::std::string&& value) {
  
  diskreadbytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskStatusInfo.diskReadBytes)
}
#endif
inline void RealSingleDiskStatusInfo::set_diskreadbytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskreadbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskStatusInfo.diskReadBytes)
}
inline void RealSingleDiskStatusInfo::set_diskreadbytes(const char* value, size_t size) {
  
  diskreadbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskStatusInfo.diskReadBytes)
}
inline ::std::string* RealSingleDiskStatusInfo::mutable_diskreadbytes() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskStatusInfo.diskReadBytes)
  return diskreadbytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskStatusInfo::release_diskreadbytes() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskStatusInfo.diskReadBytes)
  
  return diskreadbytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskStatusInfo::set_allocated_diskreadbytes(::std::string* diskreadbytes) {
  if (diskreadbytes != NULL) {
    
  } else {
    
  }
  diskreadbytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskreadbytes);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskStatusInfo.diskReadBytes)
}

// string diskReads = 5;
inline void RealSingleDiskStatusInfo::clear_diskreads() {
  diskreads_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskStatusInfo::diskreads() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskStatusInfo.diskReads)
  return diskreads_.GetNoArena();
}
inline void RealSingleDiskStatusInfo::set_diskreads(const ::std::string& value) {
  
  diskreads_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskStatusInfo.diskReads)
}
#if LANG_CXX11
inline void RealSingleDiskStatusInfo::set_diskreads(::std::string&& value) {
  
  diskreads_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskStatusInfo.diskReads)
}
#endif
inline void RealSingleDiskStatusInfo::set_diskreads(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskreads_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskStatusInfo.diskReads)
}
inline void RealSingleDiskStatusInfo::set_diskreads(const char* value, size_t size) {
  
  diskreads_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskStatusInfo.diskReads)
}
inline ::std::string* RealSingleDiskStatusInfo::mutable_diskreads() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskStatusInfo.diskReads)
  return diskreads_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskStatusInfo::release_diskreads() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskStatusInfo.diskReads)
  
  return diskreads_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskStatusInfo::set_allocated_diskreads(::std::string* diskreads) {
  if (diskreads != NULL) {
    
  } else {
    
  }
  diskreads_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskreads);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskStatusInfo.diskReads)
}

// string diskWriteBytes = 6;
inline void RealSingleDiskStatusInfo::clear_diskwritebytes() {
  diskwritebytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskStatusInfo::diskwritebytes() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskStatusInfo.diskWriteBytes)
  return diskwritebytes_.GetNoArena();
}
inline void RealSingleDiskStatusInfo::set_diskwritebytes(const ::std::string& value) {
  
  diskwritebytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskStatusInfo.diskWriteBytes)
}
#if LANG_CXX11
inline void RealSingleDiskStatusInfo::set_diskwritebytes(::std::string&& value) {
  
  diskwritebytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskStatusInfo.diskWriteBytes)
}
#endif
inline void RealSingleDiskStatusInfo::set_diskwritebytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskwritebytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskStatusInfo.diskWriteBytes)
}
inline void RealSingleDiskStatusInfo::set_diskwritebytes(const char* value, size_t size) {
  
  diskwritebytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskStatusInfo.diskWriteBytes)
}
inline ::std::string* RealSingleDiskStatusInfo::mutable_diskwritebytes() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskStatusInfo.diskWriteBytes)
  return diskwritebytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskStatusInfo::release_diskwritebytes() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskStatusInfo.diskWriteBytes)
  
  return diskwritebytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskStatusInfo::set_allocated_diskwritebytes(::std::string* diskwritebytes) {
  if (diskwritebytes != NULL) {
    
  } else {
    
  }
  diskwritebytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskwritebytes);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskStatusInfo.diskWriteBytes)
}

// string diskWrites = 7;
inline void RealSingleDiskStatusInfo::clear_diskwrites() {
  diskwrites_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskStatusInfo::diskwrites() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskStatusInfo.diskWrites)
  return diskwrites_.GetNoArena();
}
inline void RealSingleDiskStatusInfo::set_diskwrites(const ::std::string& value) {
  
  diskwrites_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskStatusInfo.diskWrites)
}
#if LANG_CXX11
inline void RealSingleDiskStatusInfo::set_diskwrites(::std::string&& value) {
  
  diskwrites_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskStatusInfo.diskWrites)
}
#endif
inline void RealSingleDiskStatusInfo::set_diskwrites(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskwrites_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskStatusInfo.diskWrites)
}
inline void RealSingleDiskStatusInfo::set_diskwrites(const char* value, size_t size) {
  
  diskwrites_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskStatusInfo.diskWrites)
}
inline ::std::string* RealSingleDiskStatusInfo::mutable_diskwrites() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskStatusInfo.diskWrites)
  return diskwrites_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskStatusInfo::release_diskwrites() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskStatusInfo.diskWrites)
  
  return diskwrites_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskStatusInfo::set_allocated_diskwrites(::std::string* diskwrites) {
  if (diskwrites != NULL) {
    
  } else {
    
  }
  diskwrites_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskwrites);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskStatusInfo.diskWrites)
}

// string diskTotal = 8;
inline void RealSingleDiskStatusInfo::clear_disktotal() {
  disktotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskStatusInfo::disktotal() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskStatusInfo.diskTotal)
  return disktotal_.GetNoArena();
}
inline void RealSingleDiskStatusInfo::set_disktotal(const ::std::string& value) {
  
  disktotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskStatusInfo.diskTotal)
}
#if LANG_CXX11
inline void RealSingleDiskStatusInfo::set_disktotal(::std::string&& value) {
  
  disktotal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskStatusInfo.diskTotal)
}
#endif
inline void RealSingleDiskStatusInfo::set_disktotal(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  disktotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskStatusInfo.diskTotal)
}
inline void RealSingleDiskStatusInfo::set_disktotal(const char* value, size_t size) {
  
  disktotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskStatusInfo.diskTotal)
}
inline ::std::string* RealSingleDiskStatusInfo::mutable_disktotal() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskStatusInfo.diskTotal)
  return disktotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskStatusInfo::release_disktotal() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskStatusInfo.diskTotal)
  
  return disktotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskStatusInfo::set_allocated_disktotal(::std::string* disktotal) {
  if (disktotal != NULL) {
    
  } else {
    
  }
  disktotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disktotal);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskStatusInfo.diskTotal)
}

// string diskAvail = 9;
inline void RealSingleDiskStatusInfo::clear_diskavail() {
  diskavail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskStatusInfo::diskavail() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskStatusInfo.diskAvail)
  return diskavail_.GetNoArena();
}
inline void RealSingleDiskStatusInfo::set_diskavail(const ::std::string& value) {
  
  diskavail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskStatusInfo.diskAvail)
}
#if LANG_CXX11
inline void RealSingleDiskStatusInfo::set_diskavail(::std::string&& value) {
  
  diskavail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskStatusInfo.diskAvail)
}
#endif
inline void RealSingleDiskStatusInfo::set_diskavail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskavail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskStatusInfo.diskAvail)
}
inline void RealSingleDiskStatusInfo::set_diskavail(const char* value, size_t size) {
  
  diskavail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskStatusInfo.diskAvail)
}
inline ::std::string* RealSingleDiskStatusInfo::mutable_diskavail() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskStatusInfo.diskAvail)
  return diskavail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskStatusInfo::release_diskavail() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskStatusInfo.diskAvail)
  
  return diskavail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskStatusInfo::set_allocated_diskavail(::std::string* diskavail) {
  if (diskavail != NULL) {
    
  } else {
    
  }
  diskavail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskavail);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskStatusInfo.diskAvail)
}

// string diskUsage = 10;
inline void RealSingleDiskStatusInfo::clear_diskusage() {
  diskusage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskStatusInfo::diskusage() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskStatusInfo.diskUsage)
  return diskusage_.GetNoArena();
}
inline void RealSingleDiskStatusInfo::set_diskusage(const ::std::string& value) {
  
  diskusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskStatusInfo.diskUsage)
}
#if LANG_CXX11
inline void RealSingleDiskStatusInfo::set_diskusage(::std::string&& value) {
  
  diskusage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskStatusInfo.diskUsage)
}
#endif
inline void RealSingleDiskStatusInfo::set_diskusage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskStatusInfo.diskUsage)
}
inline void RealSingleDiskStatusInfo::set_diskusage(const char* value, size_t size) {
  
  diskusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskStatusInfo.diskUsage)
}
inline ::std::string* RealSingleDiskStatusInfo::mutable_diskusage() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskStatusInfo.diskUsage)
  return diskusage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskStatusInfo::release_diskusage() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskStatusInfo.diskUsage)
  
  return diskusage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskStatusInfo::set_allocated_diskusage(::std::string* diskusage) {
  if (diskusage != NULL) {
    
  } else {
    
  }
  diskusage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskusage);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskStatusInfo.diskUsage)
}

// -------------------------------------------------------------------

// RealDiskCfgInfo

// repeated .proto.RealSingleDiskCfgInfo singleDiskInfo = 1;
inline int RealDiskCfgInfo::singlediskinfo_size() const {
  return singlediskinfo_.size();
}
inline void RealDiskCfgInfo::clear_singlediskinfo() {
  singlediskinfo_.Clear();
}
inline const ::proto::RealSingleDiskCfgInfo& RealDiskCfgInfo::singlediskinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.RealDiskCfgInfo.singleDiskInfo)
  return singlediskinfo_.Get(index);
}
inline ::proto::RealSingleDiskCfgInfo* RealDiskCfgInfo::mutable_singlediskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RealDiskCfgInfo.singleDiskInfo)
  return singlediskinfo_.Mutable(index);
}
inline ::proto::RealSingleDiskCfgInfo* RealDiskCfgInfo::add_singlediskinfo() {
  // @@protoc_insertion_point(field_add:proto.RealDiskCfgInfo.singleDiskInfo)
  return singlediskinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskCfgInfo >*
RealDiskCfgInfo::mutable_singlediskinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.RealDiskCfgInfo.singleDiskInfo)
  return &singlediskinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskCfgInfo >&
RealDiskCfgInfo::singlediskinfo() const {
  // @@protoc_insertion_point(field_list:proto.RealDiskCfgInfo.singleDiskInfo)
  return singlediskinfo_;
}

// -------------------------------------------------------------------

// RealSingleDiskCfgInfo

// int32 diskIndex = 1;
inline void RealSingleDiskCfgInfo::clear_diskindex() {
  diskindex_ = 0;
}
inline ::google::protobuf::int32 RealSingleDiskCfgInfo::diskindex() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskCfgInfo.diskIndex)
  return diskindex_;
}
inline void RealSingleDiskCfgInfo::set_diskindex(::google::protobuf::int32 value) {
  
  diskindex_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskCfgInfo.diskIndex)
}

// string diskName = 2;
inline void RealSingleDiskCfgInfo::clear_diskname() {
  diskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskCfgInfo::diskname() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskCfgInfo.diskName)
  return diskname_.GetNoArena();
}
inline void RealSingleDiskCfgInfo::set_diskname(const ::std::string& value) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskCfgInfo.diskName)
}
#if LANG_CXX11
inline void RealSingleDiskCfgInfo::set_diskname(::std::string&& value) {
  
  diskname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskCfgInfo.diskName)
}
#endif
inline void RealSingleDiskCfgInfo::set_diskname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskCfgInfo.diskName)
}
inline void RealSingleDiskCfgInfo::set_diskname(const char* value, size_t size) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskCfgInfo.diskName)
}
inline ::std::string* RealSingleDiskCfgInfo::mutable_diskname() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskCfgInfo.diskName)
  return diskname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskCfgInfo::release_diskname() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskCfgInfo.diskName)
  
  return diskname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskCfgInfo::set_allocated_diskname(::std::string* diskname) {
  if (diskname != NULL) {
    
  } else {
    
  }
  diskname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskname);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskCfgInfo.diskName)
}

// string diskSize = 3;
inline void RealSingleDiskCfgInfo::clear_disksize() {
  disksize_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskCfgInfo::disksize() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskCfgInfo.diskSize)
  return disksize_.GetNoArena();
}
inline void RealSingleDiskCfgInfo::set_disksize(const ::std::string& value) {
  
  disksize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskCfgInfo.diskSize)
}
#if LANG_CXX11
inline void RealSingleDiskCfgInfo::set_disksize(::std::string&& value) {
  
  disksize_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskCfgInfo.diskSize)
}
#endif
inline void RealSingleDiskCfgInfo::set_disksize(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  disksize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskCfgInfo.diskSize)
}
inline void RealSingleDiskCfgInfo::set_disksize(const char* value, size_t size) {
  
  disksize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskCfgInfo.diskSize)
}
inline ::std::string* RealSingleDiskCfgInfo::mutable_disksize() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskCfgInfo.diskSize)
  return disksize_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskCfgInfo::release_disksize() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskCfgInfo.diskSize)
  
  return disksize_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskCfgInfo::set_allocated_disksize(::std::string* disksize) {
  if (disksize != NULL) {
    
  } else {
    
  }
  disksize_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disksize);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskCfgInfo.diskSize)
}

// string diskSeqNo = 4;
inline void RealSingleDiskCfgInfo::clear_diskseqno() {
  diskseqno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskCfgInfo::diskseqno() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskCfgInfo.diskSeqNo)
  return diskseqno_.GetNoArena();
}
inline void RealSingleDiskCfgInfo::set_diskseqno(const ::std::string& value) {
  
  diskseqno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskCfgInfo.diskSeqNo)
}
#if LANG_CXX11
inline void RealSingleDiskCfgInfo::set_diskseqno(::std::string&& value) {
  
  diskseqno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskCfgInfo.diskSeqNo)
}
#endif
inline void RealSingleDiskCfgInfo::set_diskseqno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskseqno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskCfgInfo.diskSeqNo)
}
inline void RealSingleDiskCfgInfo::set_diskseqno(const char* value, size_t size) {
  
  diskseqno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskCfgInfo.diskSeqNo)
}
inline ::std::string* RealSingleDiskCfgInfo::mutable_diskseqno() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskCfgInfo.diskSeqNo)
  return diskseqno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskCfgInfo::release_diskseqno() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskCfgInfo.diskSeqNo)
  
  return diskseqno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskCfgInfo::set_allocated_diskseqno(::std::string* diskseqno) {
  if (diskseqno != NULL) {
    
  } else {
    
  }
  diskseqno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskseqno);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskCfgInfo.diskSeqNo)
}

// -------------------------------------------------------------------

// RealDiskRaidCfgInfo

// string personalities = 1;
inline void RealDiskRaidCfgInfo::clear_personalities() {
  personalities_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealDiskRaidCfgInfo::personalities() const {
  // @@protoc_insertion_point(field_get:proto.RealDiskRaidCfgInfo.personalities)
  return personalities_.GetNoArena();
}
inline void RealDiskRaidCfgInfo::set_personalities(const ::std::string& value) {
  
  personalities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealDiskRaidCfgInfo.personalities)
}
#if LANG_CXX11
inline void RealDiskRaidCfgInfo::set_personalities(::std::string&& value) {
  
  personalities_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealDiskRaidCfgInfo.personalities)
}
#endif
inline void RealDiskRaidCfgInfo::set_personalities(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  personalities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealDiskRaidCfgInfo.personalities)
}
inline void RealDiskRaidCfgInfo::set_personalities(const char* value, size_t size) {
  
  personalities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealDiskRaidCfgInfo.personalities)
}
inline ::std::string* RealDiskRaidCfgInfo::mutable_personalities() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealDiskRaidCfgInfo.personalities)
  return personalities_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealDiskRaidCfgInfo::release_personalities() {
  // @@protoc_insertion_point(field_release:proto.RealDiskRaidCfgInfo.personalities)
  
  return personalities_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealDiskRaidCfgInfo::set_allocated_personalities(::std::string* personalities) {
  if (personalities != NULL) {
    
  } else {
    
  }
  personalities_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), personalities);
  // @@protoc_insertion_point(field_set_allocated:proto.RealDiskRaidCfgInfo.personalities)
}

// string unusedDevices = 2;
inline void RealDiskRaidCfgInfo::clear_unuseddevices() {
  unuseddevices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealDiskRaidCfgInfo::unuseddevices() const {
  // @@protoc_insertion_point(field_get:proto.RealDiskRaidCfgInfo.unusedDevices)
  return unuseddevices_.GetNoArena();
}
inline void RealDiskRaidCfgInfo::set_unuseddevices(const ::std::string& value) {
  
  unuseddevices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealDiskRaidCfgInfo.unusedDevices)
}
#if LANG_CXX11
inline void RealDiskRaidCfgInfo::set_unuseddevices(::std::string&& value) {
  
  unuseddevices_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealDiskRaidCfgInfo.unusedDevices)
}
#endif
inline void RealDiskRaidCfgInfo::set_unuseddevices(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unuseddevices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealDiskRaidCfgInfo.unusedDevices)
}
inline void RealDiskRaidCfgInfo::set_unuseddevices(const char* value, size_t size) {
  
  unuseddevices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealDiskRaidCfgInfo.unusedDevices)
}
inline ::std::string* RealDiskRaidCfgInfo::mutable_unuseddevices() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealDiskRaidCfgInfo.unusedDevices)
  return unuseddevices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealDiskRaidCfgInfo::release_unuseddevices() {
  // @@protoc_insertion_point(field_release:proto.RealDiskRaidCfgInfo.unusedDevices)
  
  return unuseddevices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealDiskRaidCfgInfo::set_allocated_unuseddevices(::std::string* unuseddevices) {
  if (unuseddevices != NULL) {
    
  } else {
    
  }
  unuseddevices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unuseddevices);
  // @@protoc_insertion_point(field_set_allocated:proto.RealDiskRaidCfgInfo.unusedDevices)
}

// -------------------------------------------------------------------

// RealDiskHealthInfo

// repeated .proto.RealSingleDiskHealthInfo singleDiskHealth = 1;
inline int RealDiskHealthInfo::singlediskhealth_size() const {
  return singlediskhealth_.size();
}
inline void RealDiskHealthInfo::clear_singlediskhealth() {
  singlediskhealth_.Clear();
}
inline const ::proto::RealSingleDiskHealthInfo& RealDiskHealthInfo::singlediskhealth(int index) const {
  // @@protoc_insertion_point(field_get:proto.RealDiskHealthInfo.singleDiskHealth)
  return singlediskhealth_.Get(index);
}
inline ::proto::RealSingleDiskHealthInfo* RealDiskHealthInfo::mutable_singlediskhealth(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RealDiskHealthInfo.singleDiskHealth)
  return singlediskhealth_.Mutable(index);
}
inline ::proto::RealSingleDiskHealthInfo* RealDiskHealthInfo::add_singlediskhealth() {
  // @@protoc_insertion_point(field_add:proto.RealDiskHealthInfo.singleDiskHealth)
  return singlediskhealth_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskHealthInfo >*
RealDiskHealthInfo::mutable_singlediskhealth() {
  // @@protoc_insertion_point(field_mutable_list:proto.RealDiskHealthInfo.singleDiskHealth)
  return &singlediskhealth_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::RealSingleDiskHealthInfo >&
RealDiskHealthInfo::singlediskhealth() const {
  // @@protoc_insertion_point(field_list:proto.RealDiskHealthInfo.singleDiskHealth)
  return singlediskhealth_;
}

// -------------------------------------------------------------------

// RealSingleDiskHealthInfo

// string diskName = 1;
inline void RealSingleDiskHealthInfo::clear_diskname() {
  diskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskHealthInfo::diskname() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskHealthInfo.diskName)
  return diskname_.GetNoArena();
}
inline void RealSingleDiskHealthInfo::set_diskname(const ::std::string& value) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskHealthInfo.diskName)
}
#if LANG_CXX11
inline void RealSingleDiskHealthInfo::set_diskname(::std::string&& value) {
  
  diskname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskHealthInfo.diskName)
}
#endif
inline void RealSingleDiskHealthInfo::set_diskname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskHealthInfo.diskName)
}
inline void RealSingleDiskHealthInfo::set_diskname(const char* value, size_t size) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskHealthInfo.diskName)
}
inline ::std::string* RealSingleDiskHealthInfo::mutable_diskname() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskHealthInfo.diskName)
  return diskname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskHealthInfo::release_diskname() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskHealthInfo.diskName)
  
  return diskname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskHealthInfo::set_allocated_diskname(::std::string* diskname) {
  if (diskname != NULL) {
    
  } else {
    
  }
  diskname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskname);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskHealthInfo.diskName)
}

// string smartCtlInfo = 2;
inline void RealSingleDiskHealthInfo::clear_smartctlinfo() {
  smartctlinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleDiskHealthInfo::smartctlinfo() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleDiskHealthInfo.smartCtlInfo)
  return smartctlinfo_.GetNoArena();
}
inline void RealSingleDiskHealthInfo::set_smartctlinfo(const ::std::string& value) {
  
  smartctlinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleDiskHealthInfo.smartCtlInfo)
}
#if LANG_CXX11
inline void RealSingleDiskHealthInfo::set_smartctlinfo(::std::string&& value) {
  
  smartctlinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleDiskHealthInfo.smartCtlInfo)
}
#endif
inline void RealSingleDiskHealthInfo::set_smartctlinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smartctlinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleDiskHealthInfo.smartCtlInfo)
}
inline void RealSingleDiskHealthInfo::set_smartctlinfo(const char* value, size_t size) {
  
  smartctlinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleDiskHealthInfo.smartCtlInfo)
}
inline ::std::string* RealSingleDiskHealthInfo::mutable_smartctlinfo() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleDiskHealthInfo.smartCtlInfo)
  return smartctlinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleDiskHealthInfo::release_smartctlinfo() {
  // @@protoc_insertion_point(field_release:proto.RealSingleDiskHealthInfo.smartCtlInfo)
  
  return smartctlinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleDiskHealthInfo::set_allocated_smartctlinfo(::std::string* smartctlinfo) {
  if (smartctlinfo != NULL) {
    
  } else {
    
  }
  smartctlinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smartctlinfo);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleDiskHealthInfo.smartCtlInfo)
}

// -------------------------------------------------------------------

// RealNicStatusInfo

// repeated .proto.SingleNicPerfData singleNicInfo = 1;
inline int RealNicStatusInfo::singlenicinfo_size() const {
  return singlenicinfo_.size();
}
inline void RealNicStatusInfo::clear_singlenicinfo() {
  singlenicinfo_.Clear();
}
inline const ::proto::SingleNicPerfData& RealNicStatusInfo::singlenicinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.RealNicStatusInfo.singleNicInfo)
  return singlenicinfo_.Get(index);
}
inline ::proto::SingleNicPerfData* RealNicStatusInfo::mutable_singlenicinfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RealNicStatusInfo.singleNicInfo)
  return singlenicinfo_.Mutable(index);
}
inline ::proto::SingleNicPerfData* RealNicStatusInfo::add_singlenicinfo() {
  // @@protoc_insertion_point(field_add:proto.RealNicStatusInfo.singleNicInfo)
  return singlenicinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::SingleNicPerfData >*
RealNicStatusInfo::mutable_singlenicinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.RealNicStatusInfo.singleNicInfo)
  return &singlenicinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::SingleNicPerfData >&
RealNicStatusInfo::singlenicinfo() const {
  // @@protoc_insertion_point(field_list:proto.RealNicStatusInfo.singleNicInfo)
  return singlenicinfo_;
}

// -------------------------------------------------------------------

// RealProcessStatusInfo

// repeated .proto.RealSingleProcessStatusInfo singleProcessInfo = 1;
inline int RealProcessStatusInfo::singleprocessinfo_size() const {
  return singleprocessinfo_.size();
}
inline void RealProcessStatusInfo::clear_singleprocessinfo() {
  singleprocessinfo_.Clear();
}
inline const ::proto::RealSingleProcessStatusInfo& RealProcessStatusInfo::singleprocessinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.RealProcessStatusInfo.singleProcessInfo)
  return singleprocessinfo_.Get(index);
}
inline ::proto::RealSingleProcessStatusInfo* RealProcessStatusInfo::mutable_singleprocessinfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RealProcessStatusInfo.singleProcessInfo)
  return singleprocessinfo_.Mutable(index);
}
inline ::proto::RealSingleProcessStatusInfo* RealProcessStatusInfo::add_singleprocessinfo() {
  // @@protoc_insertion_point(field_add:proto.RealProcessStatusInfo.singleProcessInfo)
  return singleprocessinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::RealSingleProcessStatusInfo >*
RealProcessStatusInfo::mutable_singleprocessinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.RealProcessStatusInfo.singleProcessInfo)
  return &singleprocessinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::RealSingleProcessStatusInfo >&
RealProcessStatusInfo::singleprocessinfo() const {
  // @@protoc_insertion_point(field_list:proto.RealProcessStatusInfo.singleProcessInfo)
  return singleprocessinfo_;
}

// -------------------------------------------------------------------

// RealSingleProcessStatusInfo

// int32 processId = 1;
inline void RealSingleProcessStatusInfo::clear_processid() {
  processid_ = 0;
}
inline ::google::protobuf::int32 RealSingleProcessStatusInfo::processid() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleProcessStatusInfo.processId)
  return processid_;
}
inline void RealSingleProcessStatusInfo::set_processid(::google::protobuf::int32 value) {
  
  processid_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSingleProcessStatusInfo.processId)
}

// string processAppName = 2;
inline void RealSingleProcessStatusInfo::clear_processappname() {
  processappname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleProcessStatusInfo::processappname() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleProcessStatusInfo.processAppName)
  return processappname_.GetNoArena();
}
inline void RealSingleProcessStatusInfo::set_processappname(const ::std::string& value) {
  
  processappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleProcessStatusInfo.processAppName)
}
#if LANG_CXX11
inline void RealSingleProcessStatusInfo::set_processappname(::std::string&& value) {
  
  processappname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleProcessStatusInfo.processAppName)
}
#endif
inline void RealSingleProcessStatusInfo::set_processappname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  processappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleProcessStatusInfo.processAppName)
}
inline void RealSingleProcessStatusInfo::set_processappname(const char* value, size_t size) {
  
  processappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleProcessStatusInfo.processAppName)
}
inline ::std::string* RealSingleProcessStatusInfo::mutable_processappname() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleProcessStatusInfo.processAppName)
  return processappname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleProcessStatusInfo::release_processappname() {
  // @@protoc_insertion_point(field_release:proto.RealSingleProcessStatusInfo.processAppName)
  
  return processappname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleProcessStatusInfo::set_allocated_processappname(::std::string* processappname) {
  if (processappname != NULL) {
    
  } else {
    
  }
  processappname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processappname);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleProcessStatusInfo.processAppName)
}

// int64 processPid = 3;
inline void RealSingleProcessStatusInfo::clear_processpid() {
  processpid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RealSingleProcessStatusInfo::processpid() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleProcessStatusInfo.processPid)
  return processpid_;
}
inline void RealSingleProcessStatusInfo::set_processpid(::google::protobuf::int64 value) {
  
  processpid_ = value;
  // @@protoc_insertion_point(field_set:proto.RealSingleProcessStatusInfo.processPid)
}

// string processState = 4;
inline void RealSingleProcessStatusInfo::clear_processstate() {
  processstate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleProcessStatusInfo::processstate() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleProcessStatusInfo.processState)
  return processstate_.GetNoArena();
}
inline void RealSingleProcessStatusInfo::set_processstate(const ::std::string& value) {
  
  processstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleProcessStatusInfo.processState)
}
#if LANG_CXX11
inline void RealSingleProcessStatusInfo::set_processstate(::std::string&& value) {
  
  processstate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleProcessStatusInfo.processState)
}
#endif
inline void RealSingleProcessStatusInfo::set_processstate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  processstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleProcessStatusInfo.processState)
}
inline void RealSingleProcessStatusInfo::set_processstate(const char* value, size_t size) {
  
  processstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleProcessStatusInfo.processState)
}
inline ::std::string* RealSingleProcessStatusInfo::mutable_processstate() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleProcessStatusInfo.processState)
  return processstate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleProcessStatusInfo::release_processstate() {
  // @@protoc_insertion_point(field_release:proto.RealSingleProcessStatusInfo.processState)
  
  return processstate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleProcessStatusInfo::set_allocated_processstate(::std::string* processstate) {
  if (processstate != NULL) {
    
  } else {
    
  }
  processstate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processstate);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleProcessStatusInfo.processState)
}

// string processCpuUsage = 5;
inline void RealSingleProcessStatusInfo::clear_processcpuusage() {
  processcpuusage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleProcessStatusInfo::processcpuusage() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleProcessStatusInfo.processCpuUsage)
  return processcpuusage_.GetNoArena();
}
inline void RealSingleProcessStatusInfo::set_processcpuusage(const ::std::string& value) {
  
  processcpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleProcessStatusInfo.processCpuUsage)
}
#if LANG_CXX11
inline void RealSingleProcessStatusInfo::set_processcpuusage(::std::string&& value) {
  
  processcpuusage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleProcessStatusInfo.processCpuUsage)
}
#endif
inline void RealSingleProcessStatusInfo::set_processcpuusage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  processcpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleProcessStatusInfo.processCpuUsage)
}
inline void RealSingleProcessStatusInfo::set_processcpuusage(const char* value, size_t size) {
  
  processcpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleProcessStatusInfo.processCpuUsage)
}
inline ::std::string* RealSingleProcessStatusInfo::mutable_processcpuusage() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleProcessStatusInfo.processCpuUsage)
  return processcpuusage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleProcessStatusInfo::release_processcpuusage() {
  // @@protoc_insertion_point(field_release:proto.RealSingleProcessStatusInfo.processCpuUsage)
  
  return processcpuusage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleProcessStatusInfo::set_allocated_processcpuusage(::std::string* processcpuusage) {
  if (processcpuusage != NULL) {
    
  } else {
    
  }
  processcpuusage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processcpuusage);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleProcessStatusInfo.processCpuUsage)
}

// string processMemory = 6;
inline void RealSingleProcessStatusInfo::clear_processmemory() {
  processmemory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RealSingleProcessStatusInfo::processmemory() const {
  // @@protoc_insertion_point(field_get:proto.RealSingleProcessStatusInfo.processMemory)
  return processmemory_.GetNoArena();
}
inline void RealSingleProcessStatusInfo::set_processmemory(const ::std::string& value) {
  
  processmemory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RealSingleProcessStatusInfo.processMemory)
}
#if LANG_CXX11
inline void RealSingleProcessStatusInfo::set_processmemory(::std::string&& value) {
  
  processmemory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RealSingleProcessStatusInfo.processMemory)
}
#endif
inline void RealSingleProcessStatusInfo::set_processmemory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  processmemory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RealSingleProcessStatusInfo.processMemory)
}
inline void RealSingleProcessStatusInfo::set_processmemory(const char* value, size_t size) {
  
  processmemory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RealSingleProcessStatusInfo.processMemory)
}
inline ::std::string* RealSingleProcessStatusInfo::mutable_processmemory() {
  
  // @@protoc_insertion_point(field_mutable:proto.RealSingleProcessStatusInfo.processMemory)
  return processmemory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RealSingleProcessStatusInfo::release_processmemory() {
  // @@protoc_insertion_point(field_release:proto.RealSingleProcessStatusInfo.processMemory)
  
  return processmemory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RealSingleProcessStatusInfo::set_allocated_processmemory(::std::string* processmemory) {
  if (processmemory != NULL) {
    
  } else {
    
  }
  processmemory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processmemory);
  // @@protoc_insertion_point(field_set_allocated:proto.RealSingleProcessStatusInfo.processMemory)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::RealQueryHostStatusData_HostCfgTypeEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::RealQueryHostStatusData_HostCfgTypeEnum>() {
  return ::proto::RealQueryHostStatusData_HostCfgTypeEnum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RealQueryHostStatus_2eproto__INCLUDED

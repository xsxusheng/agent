// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Config.proto

#ifndef PROTOBUF_Config_2eproto__INCLUDED
#define PROTOBUF_Config_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonDefine.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class ConfigData;
class ConfigDataDefaultTypeInternal;
extern ConfigDataDefaultTypeInternal _ConfigData_default_instance_;
class ConfigUpdateResponse;
class ConfigUpdateResponseDefaultTypeInternal;
extern ConfigUpdateResponseDefaultTypeInternal _ConfigUpdateResponse_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_Config_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Config_2eproto

enum ConfigData_ConfigFileTypeEnum {
  ConfigData_ConfigFileTypeEnum_AGETN = 0,
  ConfigData_ConfigFileTypeEnum_APPS = 1,
  ConfigData_ConfigFileTypeEnum_NTP = 2,
  ConfigData_ConfigFileTypeEnum_FTP = 3,
  ConfigData_ConfigFileTypeEnum_STS = 4,
  ConfigData_ConfigFileTypeEnum_FTP_STSC = 5,
  ConfigData_ConfigFileTypeEnum_EPG = 6,
  ConfigData_ConfigFileTypeEnum_COMMON = 7,
  ConfigData_ConfigFileTypeEnum_DOWNLOAD = 8,
  ConfigData_ConfigFileTypeEnum_ConfigData_ConfigFileTypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConfigData_ConfigFileTypeEnum_ConfigData_ConfigFileTypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConfigData_ConfigFileTypeEnum_IsValid(int value);
const ConfigData_ConfigFileTypeEnum ConfigData_ConfigFileTypeEnum_ConfigFileTypeEnum_MIN = ConfigData_ConfigFileTypeEnum_AGETN;
const ConfigData_ConfigFileTypeEnum ConfigData_ConfigFileTypeEnum_ConfigFileTypeEnum_MAX = ConfigData_ConfigFileTypeEnum_DOWNLOAD;
const int ConfigData_ConfigFileTypeEnum_ConfigFileTypeEnum_ARRAYSIZE = ConfigData_ConfigFileTypeEnum_ConfigFileTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConfigData_ConfigFileTypeEnum_descriptor();
inline const ::std::string& ConfigData_ConfigFileTypeEnum_Name(ConfigData_ConfigFileTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConfigData_ConfigFileTypeEnum_descriptor(), value);
}
inline bool ConfigData_ConfigFileTypeEnum_Parse(
    const ::std::string& name, ConfigData_ConfigFileTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConfigData_ConfigFileTypeEnum>(
    ConfigData_ConfigFileTypeEnum_descriptor(), name, value);
}
// ===================================================================

class ConfigData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ConfigData) */ {
 public:
  ConfigData();
  virtual ~ConfigData();

  ConfigData(const ConfigData& from);

  inline ConfigData& operator=(const ConfigData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigData(ConfigData&& from) noexcept
    : ConfigData() {
    *this = ::std::move(from);
  }

  inline ConfigData& operator=(ConfigData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigData& default_instance();

  static inline const ConfigData* internal_default_instance() {
    return reinterpret_cast<const ConfigData*>(
               &_ConfigData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ConfigData* other);
  friend void swap(ConfigData& a, ConfigData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigData* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigData& from);
  void MergeFrom(const ConfigData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ConfigData_ConfigFileTypeEnum ConfigFileTypeEnum;
  static const ConfigFileTypeEnum AGETN =
    ConfigData_ConfigFileTypeEnum_AGETN;
  static const ConfigFileTypeEnum APPS =
    ConfigData_ConfigFileTypeEnum_APPS;
  static const ConfigFileTypeEnum NTP =
    ConfigData_ConfigFileTypeEnum_NTP;
  static const ConfigFileTypeEnum FTP =
    ConfigData_ConfigFileTypeEnum_FTP;
  static const ConfigFileTypeEnum STS =
    ConfigData_ConfigFileTypeEnum_STS;
  static const ConfigFileTypeEnum FTP_STSC =
    ConfigData_ConfigFileTypeEnum_FTP_STSC;
  static const ConfigFileTypeEnum EPG =
    ConfigData_ConfigFileTypeEnum_EPG;
  static const ConfigFileTypeEnum COMMON =
    ConfigData_ConfigFileTypeEnum_COMMON;
  static const ConfigFileTypeEnum DOWNLOAD =
    ConfigData_ConfigFileTypeEnum_DOWNLOAD;
  static inline bool ConfigFileTypeEnum_IsValid(int value) {
    return ConfigData_ConfigFileTypeEnum_IsValid(value);
  }
  static const ConfigFileTypeEnum ConfigFileTypeEnum_MIN =
    ConfigData_ConfigFileTypeEnum_ConfigFileTypeEnum_MIN;
  static const ConfigFileTypeEnum ConfigFileTypeEnum_MAX =
    ConfigData_ConfigFileTypeEnum_ConfigFileTypeEnum_MAX;
  static const int ConfigFileTypeEnum_ARRAYSIZE =
    ConfigData_ConfigFileTypeEnum_ConfigFileTypeEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConfigFileTypeEnum_descriptor() {
    return ConfigData_ConfigFileTypeEnum_descriptor();
  }
  static inline const ::std::string& ConfigFileTypeEnum_Name(ConfigFileTypeEnum value) {
    return ConfigData_ConfigFileTypeEnum_Name(value);
  }
  static inline bool ConfigFileTypeEnum_Parse(const ::std::string& name,
      ConfigFileTypeEnum* value) {
    return ConfigData_ConfigFileTypeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string configFileName = 4;
  void clear_configfilename();
  static const int kConfigFileNameFieldNumber = 4;
  const ::std::string& configfilename() const;
  void set_configfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_configfilename(::std::string&& value);
  #endif
  void set_configfilename(const char* value);
  void set_configfilename(const char* value, size_t size);
  ::std::string* mutable_configfilename();
  ::std::string* release_configfilename();
  void set_allocated_configfilename(::std::string* configfilename);

  // string configFileContent = 5;
  void clear_configfilecontent();
  static const int kConfigFileContentFieldNumber = 5;
  const ::std::string& configfilecontent() const;
  void set_configfilecontent(const ::std::string& value);
  #if LANG_CXX11
  void set_configfilecontent(::std::string&& value);
  #endif
  void set_configfilecontent(const char* value);
  void set_configfilecontent(const char* value, size_t size);
  ::std::string* mutable_configfilecontent();
  ::std::string* release_configfilecontent();
  void set_allocated_configfilecontent(::std::string* configfilecontent);

  // string updateNotifyScript = 6;
  void clear_updatenotifyscript();
  static const int kUpdateNotifyScriptFieldNumber = 6;
  const ::std::string& updatenotifyscript() const;
  void set_updatenotifyscript(const ::std::string& value);
  #if LANG_CXX11
  void set_updatenotifyscript(::std::string&& value);
  #endif
  void set_updatenotifyscript(const char* value);
  void set_updatenotifyscript(const char* value, size_t size);
  ::std::string* mutable_updatenotifyscript();
  ::std::string* release_updatenotifyscript();
  void set_allocated_updatenotifyscript(::std::string* updatenotifyscript);

  // string fileSavePath = 7;
  void clear_filesavepath();
  static const int kFileSavePathFieldNumber = 7;
  const ::std::string& filesavepath() const;
  void set_filesavepath(const ::std::string& value);
  #if LANG_CXX11
  void set_filesavepath(::std::string&& value);
  #endif
  void set_filesavepath(const char* value);
  void set_filesavepath(const char* value, size_t size);
  ::std::string* mutable_filesavepath();
  ::std::string* release_filesavepath();
  void set_allocated_filesavepath(::std::string* filesavepath);

  // string viewConfScript = 8;
  void clear_viewconfscript();
  static const int kViewConfScriptFieldNumber = 8;
  const ::std::string& viewconfscript() const;
  void set_viewconfscript(const ::std::string& value);
  #if LANG_CXX11
  void set_viewconfscript(::std::string&& value);
  #endif
  void set_viewconfscript(const char* value);
  void set_viewconfscript(const char* value, size_t size);
  ::std::string* mutable_viewconfscript();
  ::std::string* release_viewconfscript();
  void set_allocated_viewconfscript(::std::string* viewconfscript);

  // string serverPath = 9;
  void clear_serverpath();
  static const int kServerPathFieldNumber = 9;
  const ::std::string& serverpath() const;
  void set_serverpath(const ::std::string& value);
  #if LANG_CXX11
  void set_serverpath(::std::string&& value);
  #endif
  void set_serverpath(const char* value);
  void set_serverpath(const char* value, size_t size);
  ::std::string* mutable_serverpath();
  ::std::string* release_serverpath();
  void set_allocated_serverpath(::std::string* serverpath);

  // int64 uniqueId = 1;
  void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 1;
  ::google::protobuf::int64 uniqueid() const;
  void set_uniqueid(::google::protobuf::int64 value);

  // int32 configFileNo = 2;
  void clear_configfileno();
  static const int kConfigFileNoFieldNumber = 2;
  ::google::protobuf::int32 configfileno() const;
  void set_configfileno(::google::protobuf::int32 value);

  // .proto.ConfigData.ConfigFileTypeEnum configFileType = 3;
  void clear_configfiletype();
  static const int kConfigFileTypeFieldNumber = 3;
  ::proto::ConfigData_ConfigFileTypeEnum configfiletype() const;
  void set_configfiletype(::proto::ConfigData_ConfigFileTypeEnum value);

  // @@protoc_insertion_point(class_scope:proto.ConfigData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr configfilename_;
  ::google::protobuf::internal::ArenaStringPtr configfilecontent_;
  ::google::protobuf::internal::ArenaStringPtr updatenotifyscript_;
  ::google::protobuf::internal::ArenaStringPtr filesavepath_;
  ::google::protobuf::internal::ArenaStringPtr viewconfscript_;
  ::google::protobuf::internal::ArenaStringPtr serverpath_;
  ::google::protobuf::int64 uniqueid_;
  ::google::protobuf::int32 configfileno_;
  int configfiletype_;
  mutable int _cached_size_;
  friend struct protobuf_Config_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigUpdateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ConfigUpdateResponse) */ {
 public:
  ConfigUpdateResponse();
  virtual ~ConfigUpdateResponse();

  ConfigUpdateResponse(const ConfigUpdateResponse& from);

  inline ConfigUpdateResponse& operator=(const ConfigUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigUpdateResponse(ConfigUpdateResponse&& from) noexcept
    : ConfigUpdateResponse() {
    *this = ::std::move(from);
  }

  inline ConfigUpdateResponse& operator=(ConfigUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigUpdateResponse& default_instance();

  static inline const ConfigUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const ConfigUpdateResponse*>(
               &_ConfigUpdateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ConfigUpdateResponse* other);
  friend void swap(ConfigUpdateResponse& a, ConfigUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigUpdateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigUpdateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigUpdateResponse& from);
  void MergeFrom(const ConfigUpdateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string fileName = 2;
  void clear_filename();
  static const int kFileNameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // string reason = 4;
  void clear_reason();
  static const int kReasonFieldNumber = 4;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // int64 uniqueId = 1;
  void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 1;
  ::google::protobuf::int64 uniqueid() const;
  void set_uniqueid(::google::protobuf::int64 value);

  // .proto.CommonResponse.ResStatusEnum status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::proto::CommonResponse_ResStatusEnum status() const;
  void set_status(::proto::CommonResponse_ResStatusEnum value);

  // .proto.ConfigData.ConfigFileTypeEnum neType = 5;
  void clear_netype();
  static const int kNeTypeFieldNumber = 5;
  ::proto::ConfigData_ConfigFileTypeEnum netype() const;
  void set_netype(::proto::ConfigData_ConfigFileTypeEnum value);

  // @@protoc_insertion_point(class_scope:proto.ConfigUpdateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int64 uniqueid_;
  int status_;
  int netype_;
  mutable int _cached_size_;
  friend struct protobuf_Config_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigData

// int64 uniqueId = 1;
inline void ConfigData::clear_uniqueid() {
  uniqueid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigData::uniqueid() const {
  // @@protoc_insertion_point(field_get:proto.ConfigData.uniqueId)
  return uniqueid_;
}
inline void ConfigData::set_uniqueid(::google::protobuf::int64 value) {
  
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:proto.ConfigData.uniqueId)
}

// int32 configFileNo = 2;
inline void ConfigData::clear_configfileno() {
  configfileno_ = 0;
}
inline ::google::protobuf::int32 ConfigData::configfileno() const {
  // @@protoc_insertion_point(field_get:proto.ConfigData.configFileNo)
  return configfileno_;
}
inline void ConfigData::set_configfileno(::google::protobuf::int32 value) {
  
  configfileno_ = value;
  // @@protoc_insertion_point(field_set:proto.ConfigData.configFileNo)
}

// .proto.ConfigData.ConfigFileTypeEnum configFileType = 3;
inline void ConfigData::clear_configfiletype() {
  configfiletype_ = 0;
}
inline ::proto::ConfigData_ConfigFileTypeEnum ConfigData::configfiletype() const {
  // @@protoc_insertion_point(field_get:proto.ConfigData.configFileType)
  return static_cast< ::proto::ConfigData_ConfigFileTypeEnum >(configfiletype_);
}
inline void ConfigData::set_configfiletype(::proto::ConfigData_ConfigFileTypeEnum value) {
  
  configfiletype_ = value;
  // @@protoc_insertion_point(field_set:proto.ConfigData.configFileType)
}

// string configFileName = 4;
inline void ConfigData::clear_configfilename() {
  configfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigData::configfilename() const {
  // @@protoc_insertion_point(field_get:proto.ConfigData.configFileName)
  return configfilename_.GetNoArena();
}
inline void ConfigData::set_configfilename(const ::std::string& value) {
  
  configfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ConfigData.configFileName)
}
#if LANG_CXX11
inline void ConfigData::set_configfilename(::std::string&& value) {
  
  configfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ConfigData.configFileName)
}
#endif
inline void ConfigData::set_configfilename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  configfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ConfigData.configFileName)
}
inline void ConfigData::set_configfilename(const char* value, size_t size) {
  
  configfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ConfigData.configFileName)
}
inline ::std::string* ConfigData::mutable_configfilename() {
  
  // @@protoc_insertion_point(field_mutable:proto.ConfigData.configFileName)
  return configfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigData::release_configfilename() {
  // @@protoc_insertion_point(field_release:proto.ConfigData.configFileName)
  
  return configfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigData::set_allocated_configfilename(::std::string* configfilename) {
  if (configfilename != NULL) {
    
  } else {
    
  }
  configfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), configfilename);
  // @@protoc_insertion_point(field_set_allocated:proto.ConfigData.configFileName)
}

// string configFileContent = 5;
inline void ConfigData::clear_configfilecontent() {
  configfilecontent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigData::configfilecontent() const {
  // @@protoc_insertion_point(field_get:proto.ConfigData.configFileContent)
  return configfilecontent_.GetNoArena();
}
inline void ConfigData::set_configfilecontent(const ::std::string& value) {
  
  configfilecontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ConfigData.configFileContent)
}
#if LANG_CXX11
inline void ConfigData::set_configfilecontent(::std::string&& value) {
  
  configfilecontent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ConfigData.configFileContent)
}
#endif
inline void ConfigData::set_configfilecontent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  configfilecontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ConfigData.configFileContent)
}
inline void ConfigData::set_configfilecontent(const char* value, size_t size) {
  
  configfilecontent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ConfigData.configFileContent)
}
inline ::std::string* ConfigData::mutable_configfilecontent() {
  
  // @@protoc_insertion_point(field_mutable:proto.ConfigData.configFileContent)
  return configfilecontent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigData::release_configfilecontent() {
  // @@protoc_insertion_point(field_release:proto.ConfigData.configFileContent)
  
  return configfilecontent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigData::set_allocated_configfilecontent(::std::string* configfilecontent) {
  if (configfilecontent != NULL) {
    
  } else {
    
  }
  configfilecontent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), configfilecontent);
  // @@protoc_insertion_point(field_set_allocated:proto.ConfigData.configFileContent)
}

// string updateNotifyScript = 6;
inline void ConfigData::clear_updatenotifyscript() {
  updatenotifyscript_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigData::updatenotifyscript() const {
  // @@protoc_insertion_point(field_get:proto.ConfigData.updateNotifyScript)
  return updatenotifyscript_.GetNoArena();
}
inline void ConfigData::set_updatenotifyscript(const ::std::string& value) {
  
  updatenotifyscript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ConfigData.updateNotifyScript)
}
#if LANG_CXX11
inline void ConfigData::set_updatenotifyscript(::std::string&& value) {
  
  updatenotifyscript_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ConfigData.updateNotifyScript)
}
#endif
inline void ConfigData::set_updatenotifyscript(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  updatenotifyscript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ConfigData.updateNotifyScript)
}
inline void ConfigData::set_updatenotifyscript(const char* value, size_t size) {
  
  updatenotifyscript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ConfigData.updateNotifyScript)
}
inline ::std::string* ConfigData::mutable_updatenotifyscript() {
  
  // @@protoc_insertion_point(field_mutable:proto.ConfigData.updateNotifyScript)
  return updatenotifyscript_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigData::release_updatenotifyscript() {
  // @@protoc_insertion_point(field_release:proto.ConfigData.updateNotifyScript)
  
  return updatenotifyscript_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigData::set_allocated_updatenotifyscript(::std::string* updatenotifyscript) {
  if (updatenotifyscript != NULL) {
    
  } else {
    
  }
  updatenotifyscript_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatenotifyscript);
  // @@protoc_insertion_point(field_set_allocated:proto.ConfigData.updateNotifyScript)
}

// string fileSavePath = 7;
inline void ConfigData::clear_filesavepath() {
  filesavepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigData::filesavepath() const {
  // @@protoc_insertion_point(field_get:proto.ConfigData.fileSavePath)
  return filesavepath_.GetNoArena();
}
inline void ConfigData::set_filesavepath(const ::std::string& value) {
  
  filesavepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ConfigData.fileSavePath)
}
#if LANG_CXX11
inline void ConfigData::set_filesavepath(::std::string&& value) {
  
  filesavepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ConfigData.fileSavePath)
}
#endif
inline void ConfigData::set_filesavepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filesavepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ConfigData.fileSavePath)
}
inline void ConfigData::set_filesavepath(const char* value, size_t size) {
  
  filesavepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ConfigData.fileSavePath)
}
inline ::std::string* ConfigData::mutable_filesavepath() {
  
  // @@protoc_insertion_point(field_mutable:proto.ConfigData.fileSavePath)
  return filesavepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigData::release_filesavepath() {
  // @@protoc_insertion_point(field_release:proto.ConfigData.fileSavePath)
  
  return filesavepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigData::set_allocated_filesavepath(::std::string* filesavepath) {
  if (filesavepath != NULL) {
    
  } else {
    
  }
  filesavepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filesavepath);
  // @@protoc_insertion_point(field_set_allocated:proto.ConfigData.fileSavePath)
}

// string viewConfScript = 8;
inline void ConfigData::clear_viewconfscript() {
  viewconfscript_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigData::viewconfscript() const {
  // @@protoc_insertion_point(field_get:proto.ConfigData.viewConfScript)
  return viewconfscript_.GetNoArena();
}
inline void ConfigData::set_viewconfscript(const ::std::string& value) {
  
  viewconfscript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ConfigData.viewConfScript)
}
#if LANG_CXX11
inline void ConfigData::set_viewconfscript(::std::string&& value) {
  
  viewconfscript_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ConfigData.viewConfScript)
}
#endif
inline void ConfigData::set_viewconfscript(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  viewconfscript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ConfigData.viewConfScript)
}
inline void ConfigData::set_viewconfscript(const char* value, size_t size) {
  
  viewconfscript_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ConfigData.viewConfScript)
}
inline ::std::string* ConfigData::mutable_viewconfscript() {
  
  // @@protoc_insertion_point(field_mutable:proto.ConfigData.viewConfScript)
  return viewconfscript_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigData::release_viewconfscript() {
  // @@protoc_insertion_point(field_release:proto.ConfigData.viewConfScript)
  
  return viewconfscript_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigData::set_allocated_viewconfscript(::std::string* viewconfscript) {
  if (viewconfscript != NULL) {
    
  } else {
    
  }
  viewconfscript_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), viewconfscript);
  // @@protoc_insertion_point(field_set_allocated:proto.ConfigData.viewConfScript)
}

// string serverPath = 9;
inline void ConfigData::clear_serverpath() {
  serverpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigData::serverpath() const {
  // @@protoc_insertion_point(field_get:proto.ConfigData.serverPath)
  return serverpath_.GetNoArena();
}
inline void ConfigData::set_serverpath(const ::std::string& value) {
  
  serverpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ConfigData.serverPath)
}
#if LANG_CXX11
inline void ConfigData::set_serverpath(::std::string&& value) {
  
  serverpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ConfigData.serverPath)
}
#endif
inline void ConfigData::set_serverpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ConfigData.serverPath)
}
inline void ConfigData::set_serverpath(const char* value, size_t size) {
  
  serverpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ConfigData.serverPath)
}
inline ::std::string* ConfigData::mutable_serverpath() {
  
  // @@protoc_insertion_point(field_mutable:proto.ConfigData.serverPath)
  return serverpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigData::release_serverpath() {
  // @@protoc_insertion_point(field_release:proto.ConfigData.serverPath)
  
  return serverpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigData::set_allocated_serverpath(::std::string* serverpath) {
  if (serverpath != NULL) {
    
  } else {
    
  }
  serverpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverpath);
  // @@protoc_insertion_point(field_set_allocated:proto.ConfigData.serverPath)
}

// -------------------------------------------------------------------

// ConfigUpdateResponse

// int64 uniqueId = 1;
inline void ConfigUpdateResponse::clear_uniqueid() {
  uniqueid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConfigUpdateResponse::uniqueid() const {
  // @@protoc_insertion_point(field_get:proto.ConfigUpdateResponse.uniqueId)
  return uniqueid_;
}
inline void ConfigUpdateResponse::set_uniqueid(::google::protobuf::int64 value) {
  
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:proto.ConfigUpdateResponse.uniqueId)
}

// string fileName = 2;
inline void ConfigUpdateResponse::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigUpdateResponse::filename() const {
  // @@protoc_insertion_point(field_get:proto.ConfigUpdateResponse.fileName)
  return filename_.GetNoArena();
}
inline void ConfigUpdateResponse::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ConfigUpdateResponse.fileName)
}
#if LANG_CXX11
inline void ConfigUpdateResponse::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ConfigUpdateResponse.fileName)
}
#endif
inline void ConfigUpdateResponse::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ConfigUpdateResponse.fileName)
}
inline void ConfigUpdateResponse::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ConfigUpdateResponse.fileName)
}
inline ::std::string* ConfigUpdateResponse::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:proto.ConfigUpdateResponse.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigUpdateResponse::release_filename() {
  // @@protoc_insertion_point(field_release:proto.ConfigUpdateResponse.fileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigUpdateResponse::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.ConfigUpdateResponse.fileName)
}

// .proto.CommonResponse.ResStatusEnum status = 3;
inline void ConfigUpdateResponse::clear_status() {
  status_ = 0;
}
inline ::proto::CommonResponse_ResStatusEnum ConfigUpdateResponse::status() const {
  // @@protoc_insertion_point(field_get:proto.ConfigUpdateResponse.status)
  return static_cast< ::proto::CommonResponse_ResStatusEnum >(status_);
}
inline void ConfigUpdateResponse::set_status(::proto::CommonResponse_ResStatusEnum value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.ConfigUpdateResponse.status)
}

// string reason = 4;
inline void ConfigUpdateResponse::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigUpdateResponse::reason() const {
  // @@protoc_insertion_point(field_get:proto.ConfigUpdateResponse.reason)
  return reason_.GetNoArena();
}
inline void ConfigUpdateResponse::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ConfigUpdateResponse.reason)
}
#if LANG_CXX11
inline void ConfigUpdateResponse::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ConfigUpdateResponse.reason)
}
#endif
inline void ConfigUpdateResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ConfigUpdateResponse.reason)
}
inline void ConfigUpdateResponse::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ConfigUpdateResponse.reason)
}
inline ::std::string* ConfigUpdateResponse::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:proto.ConfigUpdateResponse.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigUpdateResponse::release_reason() {
  // @@protoc_insertion_point(field_release:proto.ConfigUpdateResponse.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigUpdateResponse::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:proto.ConfigUpdateResponse.reason)
}

// .proto.ConfigData.ConfigFileTypeEnum neType = 5;
inline void ConfigUpdateResponse::clear_netype() {
  netype_ = 0;
}
inline ::proto::ConfigData_ConfigFileTypeEnum ConfigUpdateResponse::netype() const {
  // @@protoc_insertion_point(field_get:proto.ConfigUpdateResponse.neType)
  return static_cast< ::proto::ConfigData_ConfigFileTypeEnum >(netype_);
}
inline void ConfigUpdateResponse::set_netype(::proto::ConfigData_ConfigFileTypeEnum value) {
  
  netype_ = value;
  // @@protoc_insertion_point(field_set:proto.ConfigUpdateResponse.neType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::ConfigData_ConfigFileTypeEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ConfigData_ConfigFileTypeEnum>() {
  return ::proto::ConfigData_ConfigFileTypeEnum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Config_2eproto__INCLUDED

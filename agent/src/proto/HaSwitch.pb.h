// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HaSwitch.proto

#ifndef PROTOBUF_HaSwitch_2eproto__INCLUDED
#define PROTOBUF_HaSwitch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonDefine.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace fiberhome {
namespace fums {
namespace proto {
class HaSwitchData;
class HaSwitchDataDefaultTypeInternal;
extern HaSwitchDataDefaultTypeInternal _HaSwitchData_default_instance_;
class HaSwitchResponse;
class HaSwitchResponseDefaultTypeInternal;
extern HaSwitchResponseDefaultTypeInternal _HaSwitchResponse_default_instance_;
}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

namespace com {
namespace fiberhome {
namespace fums {
namespace proto {

namespace protobuf_HaSwitch_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_HaSwitch_2eproto

enum HaSwitchData_HaSwitchTypeEnum {
  HaSwitchData_HaSwitchTypeEnum_SWITCH_HA = 0,
  HaSwitchData_HaSwitchTypeEnum_QUERY_HA = 1,
  HaSwitchData_HaSwitchTypeEnum_HaSwitchData_HaSwitchTypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HaSwitchData_HaSwitchTypeEnum_HaSwitchData_HaSwitchTypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HaSwitchData_HaSwitchTypeEnum_IsValid(int value);
const HaSwitchData_HaSwitchTypeEnum HaSwitchData_HaSwitchTypeEnum_HaSwitchTypeEnum_MIN = HaSwitchData_HaSwitchTypeEnum_SWITCH_HA;
const HaSwitchData_HaSwitchTypeEnum HaSwitchData_HaSwitchTypeEnum_HaSwitchTypeEnum_MAX = HaSwitchData_HaSwitchTypeEnum_QUERY_HA;
const int HaSwitchData_HaSwitchTypeEnum_HaSwitchTypeEnum_ARRAYSIZE = HaSwitchData_HaSwitchTypeEnum_HaSwitchTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* HaSwitchData_HaSwitchTypeEnum_descriptor();
inline const ::std::string& HaSwitchData_HaSwitchTypeEnum_Name(HaSwitchData_HaSwitchTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    HaSwitchData_HaSwitchTypeEnum_descriptor(), value);
}
inline bool HaSwitchData_HaSwitchTypeEnum_Parse(
    const ::std::string& name, HaSwitchData_HaSwitchTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HaSwitchData_HaSwitchTypeEnum>(
    HaSwitchData_HaSwitchTypeEnum_descriptor(), name, value);
}
// ===================================================================

class HaSwitchData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.HaSwitchData) */ {
 public:
  HaSwitchData();
  virtual ~HaSwitchData();

  HaSwitchData(const HaSwitchData& from);

  inline HaSwitchData& operator=(const HaSwitchData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HaSwitchData(HaSwitchData&& from) noexcept
    : HaSwitchData() {
    *this = ::std::move(from);
  }

  inline HaSwitchData& operator=(HaSwitchData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HaSwitchData& default_instance();

  static inline const HaSwitchData* internal_default_instance() {
    return reinterpret_cast<const HaSwitchData*>(
               &_HaSwitchData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HaSwitchData* other);
  friend void swap(HaSwitchData& a, HaSwitchData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HaSwitchData* New() const PROTOBUF_FINAL { return New(NULL); }

  HaSwitchData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HaSwitchData& from);
  void MergeFrom(const HaSwitchData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HaSwitchData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HaSwitchData_HaSwitchTypeEnum HaSwitchTypeEnum;
  static const HaSwitchTypeEnum SWITCH_HA =
    HaSwitchData_HaSwitchTypeEnum_SWITCH_HA;
  static const HaSwitchTypeEnum QUERY_HA =
    HaSwitchData_HaSwitchTypeEnum_QUERY_HA;
  static inline bool HaSwitchTypeEnum_IsValid(int value) {
    return HaSwitchData_HaSwitchTypeEnum_IsValid(value);
  }
  static const HaSwitchTypeEnum HaSwitchTypeEnum_MIN =
    HaSwitchData_HaSwitchTypeEnum_HaSwitchTypeEnum_MIN;
  static const HaSwitchTypeEnum HaSwitchTypeEnum_MAX =
    HaSwitchData_HaSwitchTypeEnum_HaSwitchTypeEnum_MAX;
  static const int HaSwitchTypeEnum_ARRAYSIZE =
    HaSwitchData_HaSwitchTypeEnum_HaSwitchTypeEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  HaSwitchTypeEnum_descriptor() {
    return HaSwitchData_HaSwitchTypeEnum_descriptor();
  }
  static inline const ::std::string& HaSwitchTypeEnum_Name(HaSwitchTypeEnum value) {
    return HaSwitchData_HaSwitchTypeEnum_Name(value);
  }
  static inline bool HaSwitchTypeEnum_Parse(const ::std::string& name,
      HaSwitchTypeEnum* value) {
    return HaSwitchData_HaSwitchTypeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string appType = 3;
  void clear_apptype();
  static const int kAppTypeFieldNumber = 3;
  const ::std::string& apptype() const;
  void set_apptype(const ::std::string& value);
  #if LANG_CXX11
  void set_apptype(::std::string&& value);
  #endif
  void set_apptype(const char* value);
  void set_apptype(const char* value, size_t size);
  ::std::string* mutable_apptype();
  ::std::string* release_apptype();
  void set_allocated_apptype(::std::string* apptype);

  // int64 uniqueId = 1;
  void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 1;
  ::google::protobuf::int64 uniqueid() const;
  void set_uniqueid(::google::protobuf::int64 value);

  // .com.fiberhome.fums.proto.HaSwitchData.HaSwitchTypeEnum haSwitchType = 2;
  void clear_haswitchtype();
  static const int kHaSwitchTypeFieldNumber = 2;
  ::com::fiberhome::fums::proto::HaSwitchData_HaSwitchTypeEnum haswitchtype() const;
  void set_haswitchtype(::com::fiberhome::fums::proto::HaSwitchData_HaSwitchTypeEnum value);

  // .com.fiberhome.fums.proto.EnumDefineData.AppTypeEnum appTypeCode = 4;
  void clear_apptypecode();
  static const int kAppTypeCodeFieldNumber = 4;
  ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum apptypecode() const;
  void set_apptypecode(::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum value);

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.HaSwitchData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::int64 uniqueid_;
  int haswitchtype_;
  int apptypecode_;
  mutable int _cached_size_;
  friend struct protobuf_HaSwitch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HaSwitchResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.HaSwitchResponse) */ {
 public:
  HaSwitchResponse();
  virtual ~HaSwitchResponse();

  HaSwitchResponse(const HaSwitchResponse& from);

  inline HaSwitchResponse& operator=(const HaSwitchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HaSwitchResponse(HaSwitchResponse&& from) noexcept
    : HaSwitchResponse() {
    *this = ::std::move(from);
  }

  inline HaSwitchResponse& operator=(HaSwitchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HaSwitchResponse& default_instance();

  static inline const HaSwitchResponse* internal_default_instance() {
    return reinterpret_cast<const HaSwitchResponse*>(
               &_HaSwitchResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HaSwitchResponse* other);
  friend void swap(HaSwitchResponse& a, HaSwitchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HaSwitchResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  HaSwitchResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HaSwitchResponse& from);
  void MergeFrom(const HaSwitchResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HaSwitchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 uniqueId = 1;
  void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 1;
  ::google::protobuf::int64 uniqueid() const;
  void set_uniqueid(::google::protobuf::int64 value);

  // .com.fiberhome.fums.proto.HaSwitchData.HaSwitchTypeEnum haSwitchType = 2;
  void clear_haswitchtype();
  static const int kHaSwitchTypeFieldNumber = 2;
  ::com::fiberhome::fums::proto::HaSwitchData_HaSwitchTypeEnum haswitchtype() const;
  void set_haswitchtype(::com::fiberhome::fums::proto::HaSwitchData_HaSwitchTypeEnum value);

  // int32 haStatus = 3;
  void clear_hastatus();
  static const int kHaStatusFieldNumber = 3;
  ::google::protobuf::int32 hastatus() const;
  void set_hastatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.HaSwitchResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 uniqueid_;
  int haswitchtype_;
  ::google::protobuf::int32 hastatus_;
  mutable int _cached_size_;
  friend struct protobuf_HaSwitch_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HaSwitchData

// int64 uniqueId = 1;
inline void HaSwitchData::clear_uniqueid() {
  uniqueid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HaSwitchData::uniqueid() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.HaSwitchData.uniqueId)
  return uniqueid_;
}
inline void HaSwitchData::set_uniqueid(::google::protobuf::int64 value) {
  
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.HaSwitchData.uniqueId)
}

// .com.fiberhome.fums.proto.HaSwitchData.HaSwitchTypeEnum haSwitchType = 2;
inline void HaSwitchData::clear_haswitchtype() {
  haswitchtype_ = 0;
}
inline ::com::fiberhome::fums::proto::HaSwitchData_HaSwitchTypeEnum HaSwitchData::haswitchtype() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.HaSwitchData.haSwitchType)
  return static_cast< ::com::fiberhome::fums::proto::HaSwitchData_HaSwitchTypeEnum >(haswitchtype_);
}
inline void HaSwitchData::set_haswitchtype(::com::fiberhome::fums::proto::HaSwitchData_HaSwitchTypeEnum value) {
  
  haswitchtype_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.HaSwitchData.haSwitchType)
}

// string appType = 3;
inline void HaSwitchData::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HaSwitchData::apptype() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.HaSwitchData.appType)
  return apptype_.GetNoArena();
}
inline void HaSwitchData::set_apptype(const ::std::string& value) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.HaSwitchData.appType)
}
#if LANG_CXX11
inline void HaSwitchData::set_apptype(::std::string&& value) {
  
  apptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.HaSwitchData.appType)
}
#endif
inline void HaSwitchData::set_apptype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.HaSwitchData.appType)
}
inline void HaSwitchData::set_apptype(const char* value, size_t size) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.HaSwitchData.appType)
}
inline ::std::string* HaSwitchData::mutable_apptype() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.HaSwitchData.appType)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HaSwitchData::release_apptype() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.HaSwitchData.appType)
  
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HaSwitchData::set_allocated_apptype(::std::string* apptype) {
  if (apptype != NULL) {
    
  } else {
    
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.HaSwitchData.appType)
}

// .com.fiberhome.fums.proto.EnumDefineData.AppTypeEnum appTypeCode = 4;
inline void HaSwitchData::clear_apptypecode() {
  apptypecode_ = 0;
}
inline ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum HaSwitchData::apptypecode() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.HaSwitchData.appTypeCode)
  return static_cast< ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum >(apptypecode_);
}
inline void HaSwitchData::set_apptypecode(::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum value) {
  
  apptypecode_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.HaSwitchData.appTypeCode)
}

// -------------------------------------------------------------------

// HaSwitchResponse

// int64 uniqueId = 1;
inline void HaSwitchResponse::clear_uniqueid() {
  uniqueid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HaSwitchResponse::uniqueid() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.HaSwitchResponse.uniqueId)
  return uniqueid_;
}
inline void HaSwitchResponse::set_uniqueid(::google::protobuf::int64 value) {
  
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.HaSwitchResponse.uniqueId)
}

// .com.fiberhome.fums.proto.HaSwitchData.HaSwitchTypeEnum haSwitchType = 2;
inline void HaSwitchResponse::clear_haswitchtype() {
  haswitchtype_ = 0;
}
inline ::com::fiberhome::fums::proto::HaSwitchData_HaSwitchTypeEnum HaSwitchResponse::haswitchtype() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.HaSwitchResponse.haSwitchType)
  return static_cast< ::com::fiberhome::fums::proto::HaSwitchData_HaSwitchTypeEnum >(haswitchtype_);
}
inline void HaSwitchResponse::set_haswitchtype(::com::fiberhome::fums::proto::HaSwitchData_HaSwitchTypeEnum value) {
  
  haswitchtype_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.HaSwitchResponse.haSwitchType)
}

// int32 haStatus = 3;
inline void HaSwitchResponse::clear_hastatus() {
  hastatus_ = 0;
}
inline ::google::protobuf::int32 HaSwitchResponse::hastatus() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.HaSwitchResponse.haStatus)
  return hastatus_;
}
inline void HaSwitchResponse::set_hastatus(::google::protobuf::int32 value) {
  
  hastatus_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.HaSwitchResponse.haStatus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fiberhome::fums::proto::HaSwitchData_HaSwitchTypeEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fiberhome::fums::proto::HaSwitchData_HaSwitchTypeEnum>() {
  return ::com::fiberhome::fums::proto::HaSwitchData_HaSwitchTypeEnum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HaSwitch_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AcsEvent.proto

#ifndef PROTOBUF_AcsEvent_2eproto__INCLUDED
#define PROTOBUF_AcsEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonDefine.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class AcsEventData;
class AcsEventDataDefaultTypeInternal;
extern AcsEventDataDefaultTypeInternal _AcsEventData_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_AcsEvent_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_AcsEvent_2eproto

enum AcsEventData_TmCtrlTypeEnum {
  AcsEventData_TmCtrlTypeEnum_STB_HEARTBIT = 0,
  AcsEventData_TmCtrlTypeEnum_CTRL_TM_RST = 1,
  AcsEventData_TmCtrlTypeEnum_AcsEventData_TmCtrlTypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AcsEventData_TmCtrlTypeEnum_AcsEventData_TmCtrlTypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AcsEventData_TmCtrlTypeEnum_IsValid(int value);
const AcsEventData_TmCtrlTypeEnum AcsEventData_TmCtrlTypeEnum_TmCtrlTypeEnum_MIN = AcsEventData_TmCtrlTypeEnum_STB_HEARTBIT;
const AcsEventData_TmCtrlTypeEnum AcsEventData_TmCtrlTypeEnum_TmCtrlTypeEnum_MAX = AcsEventData_TmCtrlTypeEnum_CTRL_TM_RST;
const int AcsEventData_TmCtrlTypeEnum_TmCtrlTypeEnum_ARRAYSIZE = AcsEventData_TmCtrlTypeEnum_TmCtrlTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* AcsEventData_TmCtrlTypeEnum_descriptor();
inline const ::std::string& AcsEventData_TmCtrlTypeEnum_Name(AcsEventData_TmCtrlTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    AcsEventData_TmCtrlTypeEnum_descriptor(), value);
}
inline bool AcsEventData_TmCtrlTypeEnum_Parse(
    const ::std::string& name, AcsEventData_TmCtrlTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AcsEventData_TmCtrlTypeEnum>(
    AcsEventData_TmCtrlTypeEnum_descriptor(), name, value);
}
// ===================================================================

class AcsEventData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.AcsEventData) */ {
 public:
  AcsEventData();
  virtual ~AcsEventData();

  AcsEventData(const AcsEventData& from);

  inline AcsEventData& operator=(const AcsEventData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcsEventData(AcsEventData&& from) noexcept
    : AcsEventData() {
    *this = ::std::move(from);
  }

  inline AcsEventData& operator=(AcsEventData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcsEventData& default_instance();

  static inline const AcsEventData* internal_default_instance() {
    return reinterpret_cast<const AcsEventData*>(
               &_AcsEventData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AcsEventData* other);
  friend void swap(AcsEventData& a, AcsEventData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcsEventData* New() const PROTOBUF_FINAL { return New(NULL); }

  AcsEventData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcsEventData& from);
  void MergeFrom(const AcsEventData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcsEventData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AcsEventData_TmCtrlTypeEnum TmCtrlTypeEnum;
  static const TmCtrlTypeEnum STB_HEARTBIT =
    AcsEventData_TmCtrlTypeEnum_STB_HEARTBIT;
  static const TmCtrlTypeEnum CTRL_TM_RST =
    AcsEventData_TmCtrlTypeEnum_CTRL_TM_RST;
  static inline bool TmCtrlTypeEnum_IsValid(int value) {
    return AcsEventData_TmCtrlTypeEnum_IsValid(value);
  }
  static const TmCtrlTypeEnum TmCtrlTypeEnum_MIN =
    AcsEventData_TmCtrlTypeEnum_TmCtrlTypeEnum_MIN;
  static const TmCtrlTypeEnum TmCtrlTypeEnum_MAX =
    AcsEventData_TmCtrlTypeEnum_TmCtrlTypeEnum_MAX;
  static const int TmCtrlTypeEnum_ARRAYSIZE =
    AcsEventData_TmCtrlTypeEnum_TmCtrlTypeEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TmCtrlTypeEnum_descriptor() {
    return AcsEventData_TmCtrlTypeEnum_descriptor();
  }
  static inline const ::std::string& TmCtrlTypeEnum_Name(TmCtrlTypeEnum value) {
    return AcsEventData_TmCtrlTypeEnum_Name(value);
  }
  static inline bool TmCtrlTypeEnum_Parse(const ::std::string& name,
      TmCtrlTypeEnum* value) {
    return AcsEventData_TmCtrlTypeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string messageType = 1;
  void clear_messagetype();
  static const int kMessageTypeFieldNumber = 1;
  const ::std::string& messagetype() const;
  void set_messagetype(const ::std::string& value);
  #if LANG_CXX11
  void set_messagetype(::std::string&& value);
  #endif
  void set_messagetype(const char* value);
  void set_messagetype(const char* value, size_t size);
  ::std::string* mutable_messagetype();
  ::std::string* release_messagetype();
  void set_allocated_messagetype(::std::string* messagetype);

  // string probableCause = 2;
  void clear_probablecause();
  static const int kProbableCauseFieldNumber = 2;
  const ::std::string& probablecause() const;
  void set_probablecause(const ::std::string& value);
  #if LANG_CXX11
  void set_probablecause(::std::string&& value);
  #endif
  void set_probablecause(const char* value);
  void set_probablecause(const char* value, size_t size);
  ::std::string* mutable_probablecause();
  ::std::string* release_probablecause();
  void set_allocated_probablecause(::std::string* probablecause);

  // string uniqueNo = 3;
  void clear_uniqueno();
  static const int kUniqueNoFieldNumber = 3;
  const ::std::string& uniqueno() const;
  void set_uniqueno(const ::std::string& value);
  #if LANG_CXX11
  void set_uniqueno(::std::string&& value);
  #endif
  void set_uniqueno(const char* value);
  void set_uniqueno(const char* value, size_t size);
  ::std::string* mutable_uniqueno();
  ::std::string* release_uniqueno();
  void set_allocated_uniqueno(::std::string* uniqueno);

  // string stb = 4;
  void clear_stb();
  static const int kStbFieldNumber = 4;
  const ::std::string& stb() const;
  void set_stb(const ::std::string& value);
  #if LANG_CXX11
  void set_stb(::std::string&& value);
  #endif
  void set_stb(const char* value);
  void set_stb(const char* value, size_t size);
  ::std::string* mutable_stb();
  ::std::string* release_stb();
  void set_allocated_stb(::std::string* stb);

  // string createTime = 5;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 5;
  const ::std::string& createtime() const;
  void set_createtime(const ::std::string& value);
  #if LANG_CXX11
  void set_createtime(::std::string&& value);
  #endif
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  ::std::string* mutable_createtime();
  ::std::string* release_createtime();
  void set_allocated_createtime(::std::string* createtime);

  // string entityInstance = 6;
  void clear_entityinstance();
  static const int kEntityInstanceFieldNumber = 6;
  const ::std::string& entityinstance() const;
  void set_entityinstance(const ::std::string& value);
  #if LANG_CXX11
  void set_entityinstance(::std::string&& value);
  #endif
  void set_entityinstance(const char* value);
  void set_entityinstance(const char* value, size_t size);
  ::std::string* mutable_entityinstance();
  ::std::string* release_entityinstance();
  void set_allocated_entityinstance(::std::string* entityinstance);

  // string messageFormat = 8;
  void clear_messageformat();
  static const int kMessageFormatFieldNumber = 8;
  const ::std::string& messageformat() const;
  void set_messageformat(const ::std::string& value);
  #if LANG_CXX11
  void set_messageformat(::std::string&& value);
  #endif
  void set_messageformat(const char* value);
  void set_messageformat(const char* value, size_t size);
  ::std::string* mutable_messageformat();
  ::std::string* release_messageformat();
  void set_allocated_messageformat(::std::string* messageformat);

  // string message = 9;
  void clear_message();
  static const int kMessageFieldNumber = 9;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string desp = 10;
  void clear_desp();
  static const int kDespFieldNumber = 10;
  const ::std::string& desp() const;
  void set_desp(const ::std::string& value);
  #if LANG_CXX11
  void set_desp(::std::string&& value);
  #endif
  void set_desp(const char* value);
  void set_desp(const char* value, size_t size);
  ::std::string* mutable_desp();
  ::std::string* release_desp();
  void set_allocated_desp(::std::string* desp);

  // .proto.EnumDefineData.AppTypeEnum appTypeCode = 7;
  void clear_apptypecode();
  static const int kAppTypeCodeFieldNumber = 7;
  ::proto::EnumDefineData_AppTypeEnum apptypecode() const;
  void set_apptypecode(::proto::EnumDefineData_AppTypeEnum value);

  // .proto.AcsEventData.TmCtrlTypeEnum ctrlType = 11;
  void clear_ctrltype();
  static const int kCtrlTypeFieldNumber = 11;
  ::proto::AcsEventData_TmCtrlTypeEnum ctrltype() const;
  void set_ctrltype(::proto::AcsEventData_TmCtrlTypeEnum value);

  // @@protoc_insertion_point(class_scope:proto.AcsEventData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr messagetype_;
  ::google::protobuf::internal::ArenaStringPtr probablecause_;
  ::google::protobuf::internal::ArenaStringPtr uniqueno_;
  ::google::protobuf::internal::ArenaStringPtr stb_;
  ::google::protobuf::internal::ArenaStringPtr createtime_;
  ::google::protobuf::internal::ArenaStringPtr entityinstance_;
  ::google::protobuf::internal::ArenaStringPtr messageformat_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr desp_;
  int apptypecode_;
  int ctrltype_;
  mutable int _cached_size_;
  friend struct protobuf_AcsEvent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AcsEventData

// string messageType = 1;
inline void AcsEventData::clear_messagetype() {
  messagetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcsEventData::messagetype() const {
  // @@protoc_insertion_point(field_get:proto.AcsEventData.messageType)
  return messagetype_.GetNoArena();
}
inline void AcsEventData::set_messagetype(const ::std::string& value) {
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AcsEventData.messageType)
}
#if LANG_CXX11
inline void AcsEventData::set_messagetype(::std::string&& value) {
  
  messagetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AcsEventData.messageType)
}
#endif
inline void AcsEventData::set_messagetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AcsEventData.messageType)
}
inline void AcsEventData::set_messagetype(const char* value, size_t size) {
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AcsEventData.messageType)
}
inline ::std::string* AcsEventData::mutable_messagetype() {
  
  // @@protoc_insertion_point(field_mutable:proto.AcsEventData.messageType)
  return messagetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcsEventData::release_messagetype() {
  // @@protoc_insertion_point(field_release:proto.AcsEventData.messageType)
  
  return messagetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcsEventData::set_allocated_messagetype(::std::string* messagetype) {
  if (messagetype != NULL) {
    
  } else {
    
  }
  messagetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagetype);
  // @@protoc_insertion_point(field_set_allocated:proto.AcsEventData.messageType)
}

// string probableCause = 2;
inline void AcsEventData::clear_probablecause() {
  probablecause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcsEventData::probablecause() const {
  // @@protoc_insertion_point(field_get:proto.AcsEventData.probableCause)
  return probablecause_.GetNoArena();
}
inline void AcsEventData::set_probablecause(const ::std::string& value) {
  
  probablecause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AcsEventData.probableCause)
}
#if LANG_CXX11
inline void AcsEventData::set_probablecause(::std::string&& value) {
  
  probablecause_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AcsEventData.probableCause)
}
#endif
inline void AcsEventData::set_probablecause(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  probablecause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AcsEventData.probableCause)
}
inline void AcsEventData::set_probablecause(const char* value, size_t size) {
  
  probablecause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AcsEventData.probableCause)
}
inline ::std::string* AcsEventData::mutable_probablecause() {
  
  // @@protoc_insertion_point(field_mutable:proto.AcsEventData.probableCause)
  return probablecause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcsEventData::release_probablecause() {
  // @@protoc_insertion_point(field_release:proto.AcsEventData.probableCause)
  
  return probablecause_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcsEventData::set_allocated_probablecause(::std::string* probablecause) {
  if (probablecause != NULL) {
    
  } else {
    
  }
  probablecause_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), probablecause);
  // @@protoc_insertion_point(field_set_allocated:proto.AcsEventData.probableCause)
}

// string uniqueNo = 3;
inline void AcsEventData::clear_uniqueno() {
  uniqueno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcsEventData::uniqueno() const {
  // @@protoc_insertion_point(field_get:proto.AcsEventData.uniqueNo)
  return uniqueno_.GetNoArena();
}
inline void AcsEventData::set_uniqueno(const ::std::string& value) {
  
  uniqueno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AcsEventData.uniqueNo)
}
#if LANG_CXX11
inline void AcsEventData::set_uniqueno(::std::string&& value) {
  
  uniqueno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AcsEventData.uniqueNo)
}
#endif
inline void AcsEventData::set_uniqueno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uniqueno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AcsEventData.uniqueNo)
}
inline void AcsEventData::set_uniqueno(const char* value, size_t size) {
  
  uniqueno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AcsEventData.uniqueNo)
}
inline ::std::string* AcsEventData::mutable_uniqueno() {
  
  // @@protoc_insertion_point(field_mutable:proto.AcsEventData.uniqueNo)
  return uniqueno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcsEventData::release_uniqueno() {
  // @@protoc_insertion_point(field_release:proto.AcsEventData.uniqueNo)
  
  return uniqueno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcsEventData::set_allocated_uniqueno(::std::string* uniqueno) {
  if (uniqueno != NULL) {
    
  } else {
    
  }
  uniqueno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uniqueno);
  // @@protoc_insertion_point(field_set_allocated:proto.AcsEventData.uniqueNo)
}

// string stb = 4;
inline void AcsEventData::clear_stb() {
  stb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcsEventData::stb() const {
  // @@protoc_insertion_point(field_get:proto.AcsEventData.stb)
  return stb_.GetNoArena();
}
inline void AcsEventData::set_stb(const ::std::string& value) {
  
  stb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AcsEventData.stb)
}
#if LANG_CXX11
inline void AcsEventData::set_stb(::std::string&& value) {
  
  stb_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AcsEventData.stb)
}
#endif
inline void AcsEventData::set_stb(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AcsEventData.stb)
}
inline void AcsEventData::set_stb(const char* value, size_t size) {
  
  stb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AcsEventData.stb)
}
inline ::std::string* AcsEventData::mutable_stb() {
  
  // @@protoc_insertion_point(field_mutable:proto.AcsEventData.stb)
  return stb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcsEventData::release_stb() {
  // @@protoc_insertion_point(field_release:proto.AcsEventData.stb)
  
  return stb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcsEventData::set_allocated_stb(::std::string* stb) {
  if (stb != NULL) {
    
  } else {
    
  }
  stb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stb);
  // @@protoc_insertion_point(field_set_allocated:proto.AcsEventData.stb)
}

// string createTime = 5;
inline void AcsEventData::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcsEventData::createtime() const {
  // @@protoc_insertion_point(field_get:proto.AcsEventData.createTime)
  return createtime_.GetNoArena();
}
inline void AcsEventData::set_createtime(const ::std::string& value) {
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AcsEventData.createTime)
}
#if LANG_CXX11
inline void AcsEventData::set_createtime(::std::string&& value) {
  
  createtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AcsEventData.createTime)
}
#endif
inline void AcsEventData::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AcsEventData.createTime)
}
inline void AcsEventData::set_createtime(const char* value, size_t size) {
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AcsEventData.createTime)
}
inline ::std::string* AcsEventData::mutable_createtime() {
  
  // @@protoc_insertion_point(field_mutable:proto.AcsEventData.createTime)
  return createtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcsEventData::release_createtime() {
  // @@protoc_insertion_point(field_release:proto.AcsEventData.createTime)
  
  return createtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcsEventData::set_allocated_createtime(::std::string* createtime) {
  if (createtime != NULL) {
    
  } else {
    
  }
  createtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:proto.AcsEventData.createTime)
}

// string entityInstance = 6;
inline void AcsEventData::clear_entityinstance() {
  entityinstance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcsEventData::entityinstance() const {
  // @@protoc_insertion_point(field_get:proto.AcsEventData.entityInstance)
  return entityinstance_.GetNoArena();
}
inline void AcsEventData::set_entityinstance(const ::std::string& value) {
  
  entityinstance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AcsEventData.entityInstance)
}
#if LANG_CXX11
inline void AcsEventData::set_entityinstance(::std::string&& value) {
  
  entityinstance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AcsEventData.entityInstance)
}
#endif
inline void AcsEventData::set_entityinstance(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  entityinstance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AcsEventData.entityInstance)
}
inline void AcsEventData::set_entityinstance(const char* value, size_t size) {
  
  entityinstance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AcsEventData.entityInstance)
}
inline ::std::string* AcsEventData::mutable_entityinstance() {
  
  // @@protoc_insertion_point(field_mutable:proto.AcsEventData.entityInstance)
  return entityinstance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcsEventData::release_entityinstance() {
  // @@protoc_insertion_point(field_release:proto.AcsEventData.entityInstance)
  
  return entityinstance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcsEventData::set_allocated_entityinstance(::std::string* entityinstance) {
  if (entityinstance != NULL) {
    
  } else {
    
  }
  entityinstance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityinstance);
  // @@protoc_insertion_point(field_set_allocated:proto.AcsEventData.entityInstance)
}

// .proto.EnumDefineData.AppTypeEnum appTypeCode = 7;
inline void AcsEventData::clear_apptypecode() {
  apptypecode_ = 0;
}
inline ::proto::EnumDefineData_AppTypeEnum AcsEventData::apptypecode() const {
  // @@protoc_insertion_point(field_get:proto.AcsEventData.appTypeCode)
  return static_cast< ::proto::EnumDefineData_AppTypeEnum >(apptypecode_);
}
inline void AcsEventData::set_apptypecode(::proto::EnumDefineData_AppTypeEnum value) {
  
  apptypecode_ = value;
  // @@protoc_insertion_point(field_set:proto.AcsEventData.appTypeCode)
}

// string messageFormat = 8;
inline void AcsEventData::clear_messageformat() {
  messageformat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcsEventData::messageformat() const {
  // @@protoc_insertion_point(field_get:proto.AcsEventData.messageFormat)
  return messageformat_.GetNoArena();
}
inline void AcsEventData::set_messageformat(const ::std::string& value) {
  
  messageformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AcsEventData.messageFormat)
}
#if LANG_CXX11
inline void AcsEventData::set_messageformat(::std::string&& value) {
  
  messageformat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AcsEventData.messageFormat)
}
#endif
inline void AcsEventData::set_messageformat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  messageformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AcsEventData.messageFormat)
}
inline void AcsEventData::set_messageformat(const char* value, size_t size) {
  
  messageformat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AcsEventData.messageFormat)
}
inline ::std::string* AcsEventData::mutable_messageformat() {
  
  // @@protoc_insertion_point(field_mutable:proto.AcsEventData.messageFormat)
  return messageformat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcsEventData::release_messageformat() {
  // @@protoc_insertion_point(field_release:proto.AcsEventData.messageFormat)
  
  return messageformat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcsEventData::set_allocated_messageformat(::std::string* messageformat) {
  if (messageformat != NULL) {
    
  } else {
    
  }
  messageformat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messageformat);
  // @@protoc_insertion_point(field_set_allocated:proto.AcsEventData.messageFormat)
}

// string message = 9;
inline void AcsEventData::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcsEventData::message() const {
  // @@protoc_insertion_point(field_get:proto.AcsEventData.message)
  return message_.GetNoArena();
}
inline void AcsEventData::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AcsEventData.message)
}
#if LANG_CXX11
inline void AcsEventData::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AcsEventData.message)
}
#endif
inline void AcsEventData::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AcsEventData.message)
}
inline void AcsEventData::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AcsEventData.message)
}
inline ::std::string* AcsEventData::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:proto.AcsEventData.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcsEventData::release_message() {
  // @@protoc_insertion_point(field_release:proto.AcsEventData.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcsEventData::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.AcsEventData.message)
}

// string desp = 10;
inline void AcsEventData::clear_desp() {
  desp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcsEventData::desp() const {
  // @@protoc_insertion_point(field_get:proto.AcsEventData.desp)
  return desp_.GetNoArena();
}
inline void AcsEventData::set_desp(const ::std::string& value) {
  
  desp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.AcsEventData.desp)
}
#if LANG_CXX11
inline void AcsEventData::set_desp(::std::string&& value) {
  
  desp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.AcsEventData.desp)
}
#endif
inline void AcsEventData::set_desp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.AcsEventData.desp)
}
inline void AcsEventData::set_desp(const char* value, size_t size) {
  
  desp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.AcsEventData.desp)
}
inline ::std::string* AcsEventData::mutable_desp() {
  
  // @@protoc_insertion_point(field_mutable:proto.AcsEventData.desp)
  return desp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcsEventData::release_desp() {
  // @@protoc_insertion_point(field_release:proto.AcsEventData.desp)
  
  return desp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcsEventData::set_allocated_desp(::std::string* desp) {
  if (desp != NULL) {
    
  } else {
    
  }
  desp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desp);
  // @@protoc_insertion_point(field_set_allocated:proto.AcsEventData.desp)
}

// .proto.AcsEventData.TmCtrlTypeEnum ctrlType = 11;
inline void AcsEventData::clear_ctrltype() {
  ctrltype_ = 0;
}
inline ::proto::AcsEventData_TmCtrlTypeEnum AcsEventData::ctrltype() const {
  // @@protoc_insertion_point(field_get:proto.AcsEventData.ctrlType)
  return static_cast< ::proto::AcsEventData_TmCtrlTypeEnum >(ctrltype_);
}
inline void AcsEventData::set_ctrltype(::proto::AcsEventData_TmCtrlTypeEnum value) {
  
  ctrltype_ = value;
  // @@protoc_insertion_point(field_set:proto.AcsEventData.ctrlType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::AcsEventData_TmCtrlTypeEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::AcsEventData_TmCtrlTypeEnum>() {
  return ::proto::AcsEventData_TmCtrlTypeEnum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AcsEvent_2eproto__INCLUDED

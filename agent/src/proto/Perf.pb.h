// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Perf.proto

#ifndef PROTOBUF_Perf_2eproto__INCLUDED
#define PROTOBUF_Perf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonDefine.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace fiberhome {
namespace fums {
namespace proto {
class AppPerfData;
class AppPerfDataDefaultTypeInternal;
extern AppPerfDataDefaultTypeInternal _AppPerfData_default_instance_;
class DiskData;
class DiskDataDefaultTypeInternal;
extern DiskDataDefaultTypeInternal _DiskData_default_instance_;
class Hostdata;
class HostdataDefaultTypeInternal;
extern HostdataDefaultTypeInternal _Hostdata_default_instance_;
class NicData;
class NicDataDefaultTypeInternal;
extern NicDataDefaultTypeInternal _NicData_default_instance_;
class PerfData;
class PerfDataDefaultTypeInternal;
extern PerfDataDefaultTypeInternal _PerfData_default_instance_;
class ProcessData;
class ProcessDataDefaultTypeInternal;
extern ProcessDataDefaultTypeInternal _ProcessData_default_instance_;
class SingleAppPerfData;
class SingleAppPerfDataDefaultTypeInternal;
extern SingleAppPerfDataDefaultTypeInternal _SingleAppPerfData_default_instance_;
class SingleDiskPerfData;
class SingleDiskPerfDataDefaultTypeInternal;
extern SingleDiskPerfDataDefaultTypeInternal _SingleDiskPerfData_default_instance_;
class SingleProcessPerfData;
class SingleProcessPerfDataDefaultTypeInternal;
extern SingleProcessPerfDataDefaultTypeInternal _SingleProcessPerfData_default_instance_;
}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

namespace com {
namespace fiberhome {
namespace fums {
namespace proto {

namespace protobuf_Perf_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Perf_2eproto

enum PerfData_PERFDATATYPE {
  PerfData_PERFDATATYPE_HOST_TYPE = 0,
  PerfData_PERFDATATYPE_PROCESS_TYPE = 1,
  PerfData_PERFDATATYPE_DISK_TYPE = 2,
  PerfData_PERFDATATYPE_NIC_TYPE = 3,
  PerfData_PERFDATATYPE_APP_PERF = 4,
  PerfData_PERFDATATYPE_PerfData_PERFDATATYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PerfData_PERFDATATYPE_PerfData_PERFDATATYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PerfData_PERFDATATYPE_IsValid(int value);
const PerfData_PERFDATATYPE PerfData_PERFDATATYPE_PERFDATATYPE_MIN = PerfData_PERFDATATYPE_HOST_TYPE;
const PerfData_PERFDATATYPE PerfData_PERFDATATYPE_PERFDATATYPE_MAX = PerfData_PERFDATATYPE_APP_PERF;
const int PerfData_PERFDATATYPE_PERFDATATYPE_ARRAYSIZE = PerfData_PERFDATATYPE_PERFDATATYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PerfData_PERFDATATYPE_descriptor();
inline const ::std::string& PerfData_PERFDATATYPE_Name(PerfData_PERFDATATYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PerfData_PERFDATATYPE_descriptor(), value);
}
inline bool PerfData_PERFDATATYPE_Parse(
    const ::std::string& name, PerfData_PERFDATATYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PerfData_PERFDATATYPE>(
    PerfData_PERFDATATYPE_descriptor(), name, value);
}
enum SingleAppPerfData_APP_TYPE_ENUM {
  SingleAppPerfData_APP_TYPE_ENUM_CSD = 0,
  SingleAppPerfData_APP_TYPE_ENUM_LRS = 1,
  SingleAppPerfData_APP_TYPE_ENUM_CSV = 2,
  SingleAppPerfData_APP_TYPE_ENUM_CSP = 3,
  SingleAppPerfData_APP_TYPE_ENUM_CSX = 4,
  SingleAppPerfData_APP_TYPE_ENUM_DRS = 5,
  SingleAppPerfData_APP_TYPE_ENUM_SingleAppPerfData_APP_TYPE_ENUM_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SingleAppPerfData_APP_TYPE_ENUM_SingleAppPerfData_APP_TYPE_ENUM_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SingleAppPerfData_APP_TYPE_ENUM_IsValid(int value);
const SingleAppPerfData_APP_TYPE_ENUM SingleAppPerfData_APP_TYPE_ENUM_APP_TYPE_ENUM_MIN = SingleAppPerfData_APP_TYPE_ENUM_CSD;
const SingleAppPerfData_APP_TYPE_ENUM SingleAppPerfData_APP_TYPE_ENUM_APP_TYPE_ENUM_MAX = SingleAppPerfData_APP_TYPE_ENUM_DRS;
const int SingleAppPerfData_APP_TYPE_ENUM_APP_TYPE_ENUM_ARRAYSIZE = SingleAppPerfData_APP_TYPE_ENUM_APP_TYPE_ENUM_MAX + 1;

const ::google::protobuf::EnumDescriptor* SingleAppPerfData_APP_TYPE_ENUM_descriptor();
inline const ::std::string& SingleAppPerfData_APP_TYPE_ENUM_Name(SingleAppPerfData_APP_TYPE_ENUM value) {
  return ::google::protobuf::internal::NameOfEnum(
    SingleAppPerfData_APP_TYPE_ENUM_descriptor(), value);
}
inline bool SingleAppPerfData_APP_TYPE_ENUM_Parse(
    const ::std::string& name, SingleAppPerfData_APP_TYPE_ENUM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SingleAppPerfData_APP_TYPE_ENUM>(
    SingleAppPerfData_APP_TYPE_ENUM_descriptor(), name, value);
}
// ===================================================================

class PerfData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.PerfData) */ {
 public:
  PerfData();
  virtual ~PerfData();

  PerfData(const PerfData& from);

  inline PerfData& operator=(const PerfData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerfData(PerfData&& from) noexcept
    : PerfData() {
    *this = ::std::move(from);
  }

  inline PerfData& operator=(PerfData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PerfData& default_instance();

  static inline const PerfData* internal_default_instance() {
    return reinterpret_cast<const PerfData*>(
               &_PerfData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PerfData* other);
  friend void swap(PerfData& a, PerfData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerfData* New() const PROTOBUF_FINAL { return New(NULL); }

  PerfData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PerfData& from);
  void MergeFrom(const PerfData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PerfData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PerfData_PERFDATATYPE PERFDATATYPE;
  static const PERFDATATYPE HOST_TYPE =
    PerfData_PERFDATATYPE_HOST_TYPE;
  static const PERFDATATYPE PROCESS_TYPE =
    PerfData_PERFDATATYPE_PROCESS_TYPE;
  static const PERFDATATYPE DISK_TYPE =
    PerfData_PERFDATATYPE_DISK_TYPE;
  static const PERFDATATYPE NIC_TYPE =
    PerfData_PERFDATATYPE_NIC_TYPE;
  static const PERFDATATYPE APP_PERF =
    PerfData_PERFDATATYPE_APP_PERF;
  static inline bool PERFDATATYPE_IsValid(int value) {
    return PerfData_PERFDATATYPE_IsValid(value);
  }
  static const PERFDATATYPE PERFDATATYPE_MIN =
    PerfData_PERFDATATYPE_PERFDATATYPE_MIN;
  static const PERFDATATYPE PERFDATATYPE_MAX =
    PerfData_PERFDATATYPE_PERFDATATYPE_MAX;
  static const int PERFDATATYPE_ARRAYSIZE =
    PerfData_PERFDATATYPE_PERFDATATYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PERFDATATYPE_descriptor() {
    return PerfData_PERFDATATYPE_descriptor();
  }
  static inline const ::std::string& PERFDATATYPE_Name(PERFDATATYPE value) {
    return PerfData_PERFDATATYPE_Name(value);
  }
  static inline bool PERFDATATYPE_Parse(const ::std::string& name,
      PERFDATATYPE* value) {
    return PerfData_PERFDATATYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .com.fiberhome.fums.proto.PerfData.PERFDATATYPE type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::com::fiberhome::fums::proto::PerfData_PERFDATATYPE type() const;
  void set_type(::com::fiberhome::fums::proto::PerfData_PERFDATATYPE value);

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.PerfData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_Perf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Hostdata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.Hostdata) */ {
 public:
  Hostdata();
  virtual ~Hostdata();

  Hostdata(const Hostdata& from);

  inline Hostdata& operator=(const Hostdata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hostdata(Hostdata&& from) noexcept
    : Hostdata() {
    *this = ::std::move(from);
  }

  inline Hostdata& operator=(Hostdata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Hostdata& default_instance();

  static inline const Hostdata* internal_default_instance() {
    return reinterpret_cast<const Hostdata*>(
               &_Hostdata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Hostdata* other);
  friend void swap(Hostdata& a, Hostdata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hostdata* New() const PROTOBUF_FINAL { return New(NULL); }

  Hostdata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Hostdata& from);
  void MergeFrom(const Hostdata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Hostdata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string queryTime = 1;
  void clear_querytime();
  static const int kQueryTimeFieldNumber = 1;
  const ::std::string& querytime() const;
  void set_querytime(const ::std::string& value);
  #if LANG_CXX11
  void set_querytime(::std::string&& value);
  #endif
  void set_querytime(const char* value);
  void set_querytime(const char* value, size_t size);
  ::std::string* mutable_querytime();
  ::std::string* release_querytime();
  void set_allocated_querytime(::std::string* querytime);

  // double cpuAveUsage = 2;
  void clear_cpuaveusage();
  static const int kCpuAveUsageFieldNumber = 2;
  double cpuaveusage() const;
  void set_cpuaveusage(double value);

  // double cpuMaxUsge = 3;
  void clear_cpumaxusge();
  static const int kCpuMaxUsgeFieldNumber = 3;
  double cpumaxusge() const;
  void set_cpumaxusge(double value);

  // double memUsageAve = 5;
  void clear_memusageave();
  static const int kMemUsageAveFieldNumber = 5;
  double memusageave() const;
  void set_memusageave(double value);

  // int64 rxFlowAve = 6;
  void clear_rxflowave();
  static const int kRxFlowAveFieldNumber = 6;
  ::google::protobuf::int64 rxflowave() const;
  void set_rxflowave(::google::protobuf::int64 value);

  // int32 maxContiueTime = 4;
  void clear_maxcontiuetime();
  static const int kMaxContiueTimeFieldNumber = 4;
  ::google::protobuf::int32 maxcontiuetime() const;
  void set_maxcontiuetime(::google::protobuf::int32 value);

  // int32 tcpLinkNum = 8;
  void clear_tcplinknum();
  static const int kTcpLinkNumFieldNumber = 8;
  ::google::protobuf::int32 tcplinknum() const;
  void set_tcplinknum(::google::protobuf::int32 value);

  // int64 txFlowAve = 7;
  void clear_txflowave();
  static const int kTxFlowAveFieldNumber = 7;
  ::google::protobuf::int64 txflowave() const;
  void set_txflowave(::google::protobuf::int64 value);

  // int32 tcpInboundTotal = 9;
  void clear_tcpinboundtotal();
  static const int kTcpInboundTotalFieldNumber = 9;
  ::google::protobuf::int32 tcpinboundtotal() const;
  void set_tcpinboundtotal(::google::protobuf::int32 value);

  // int32 tcpOutboundTotal = 10;
  void clear_tcpoutboundtotal();
  static const int kTcpOutboundTotalFieldNumber = 10;
  ::google::protobuf::int32 tcpoutboundtotal() const;
  void set_tcpoutboundtotal(::google::protobuf::int32 value);

  // int32 memTotal = 11;
  void clear_memtotal();
  static const int kMemTotalFieldNumber = 11;
  ::google::protobuf::int32 memtotal() const;
  void set_memtotal(::google::protobuf::int32 value);

  // int32 diskUsage = 12;
  void clear_diskusage();
  static const int kDiskUsageFieldNumber = 12;
  ::google::protobuf::int32 diskusage() const;
  void set_diskusage(::google::protobuf::int32 value);

  // double memMaxUsage = 13;
  void clear_memmaxusage();
  static const int kMemMaxUsageFieldNumber = 13;
  double memmaxusage() const;
  void set_memmaxusage(double value);

  // int32 diskTotal = 14;
  void clear_disktotal();
  static const int kDiskTotalFieldNumber = 14;
  ::google::protobuf::int32 disktotal() const;
  void set_disktotal(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.Hostdata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr querytime_;
  double cpuaveusage_;
  double cpumaxusge_;
  double memusageave_;
  ::google::protobuf::int64 rxflowave_;
  ::google::protobuf::int32 maxcontiuetime_;
  ::google::protobuf::int32 tcplinknum_;
  ::google::protobuf::int64 txflowave_;
  ::google::protobuf::int32 tcpinboundtotal_;
  ::google::protobuf::int32 tcpoutboundtotal_;
  ::google::protobuf::int32 memtotal_;
  ::google::protobuf::int32 diskusage_;
  double memmaxusage_;
  ::google::protobuf::int32 disktotal_;
  mutable int _cached_size_;
  friend struct protobuf_Perf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcessData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.ProcessData) */ {
 public:
  ProcessData();
  virtual ~ProcessData();

  ProcessData(const ProcessData& from);

  inline ProcessData& operator=(const ProcessData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcessData(ProcessData&& from) noexcept
    : ProcessData() {
    *this = ::std::move(from);
  }

  inline ProcessData& operator=(ProcessData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessData& default_instance();

  static inline const ProcessData* internal_default_instance() {
    return reinterpret_cast<const ProcessData*>(
               &_ProcessData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ProcessData* other);
  friend void swap(ProcessData& a, ProcessData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcessData* New() const PROTOBUF_FINAL { return New(NULL); }

  ProcessData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProcessData& from);
  void MergeFrom(const ProcessData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProcessData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.fiberhome.fums.proto.SingleProcessPerfData perfdata = 1;
  int perfdata_size() const;
  void clear_perfdata();
  static const int kPerfdataFieldNumber = 1;
  const ::com::fiberhome::fums::proto::SingleProcessPerfData& perfdata(int index) const;
  ::com::fiberhome::fums::proto::SingleProcessPerfData* mutable_perfdata(int index);
  ::com::fiberhome::fums::proto::SingleProcessPerfData* add_perfdata();
  ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleProcessPerfData >*
      mutable_perfdata();
  const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleProcessPerfData >&
      perfdata() const;

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.ProcessData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleProcessPerfData > perfdata_;
  mutable int _cached_size_;
  friend struct protobuf_Perf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleProcessPerfData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.SingleProcessPerfData) */ {
 public:
  SingleProcessPerfData();
  virtual ~SingleProcessPerfData();

  SingleProcessPerfData(const SingleProcessPerfData& from);

  inline SingleProcessPerfData& operator=(const SingleProcessPerfData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleProcessPerfData(SingleProcessPerfData&& from) noexcept
    : SingleProcessPerfData() {
    *this = ::std::move(from);
  }

  inline SingleProcessPerfData& operator=(SingleProcessPerfData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleProcessPerfData& default_instance();

  static inline const SingleProcessPerfData* internal_default_instance() {
    return reinterpret_cast<const SingleProcessPerfData*>(
               &_SingleProcessPerfData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SingleProcessPerfData* other);
  friend void swap(SingleProcessPerfData& a, SingleProcessPerfData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleProcessPerfData* New() const PROTOBUF_FINAL { return New(NULL); }

  SingleProcessPerfData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SingleProcessPerfData& from);
  void MergeFrom(const SingleProcessPerfData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SingleProcessPerfData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string COMMAND = 2;
  void clear_command();
  static const int kCOMMANDFieldNumber = 2;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  #if LANG_CXX11
  void set_command(::std::string&& value);
  #endif
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // string TIME = 9;
  void clear_time();
  static const int kTIMEFieldNumber = 9;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // string STATE = 10;
  void clear_state();
  static const int kSTATEFieldNumber = 10;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // int64 PID = 1;
  void clear_pid();
  static const int kPIDFieldNumber = 1;
  ::google::protobuf::int64 pid() const;
  void set_pid(::google::protobuf::int64 value);

  // float CPU = 3;
  void clear_cpu();
  static const int kCPUFieldNumber = 3;
  float cpu() const;
  void set_cpu(float value);

  // float MEM = 4;
  void clear_mem();
  static const int kMEMFieldNumber = 4;
  float mem() const;
  void set_mem(float value);

  // int64 SIZE = 5;
  void clear_size();
  static const int kSIZEFieldNumber = 5;
  ::google::protobuf::int64 size() const;
  void set_size(::google::protobuf::int64 value);

  // int64 VIRT = 6;
  void clear_virt();
  static const int kVIRTFieldNumber = 6;
  ::google::protobuf::int64 virt() const;
  void set_virt(::google::protobuf::int64 value);

  // int64 RES = 7;
  void clear_res();
  static const int kRESFieldNumber = 7;
  ::google::protobuf::int64 res() const;
  void set_res(::google::protobuf::int64 value);

  // int64 SHR = 8;
  void clear_shr();
  static const int kSHRFieldNumber = 8;
  ::google::protobuf::int64 shr() const;
  void set_shr(::google::protobuf::int64 value);

  // float CPUMAX = 11;
  void clear_cpumax();
  static const int kCPUMAXFieldNumber = 11;
  float cpumax() const;
  void set_cpumax(float value);

  // float MEMMAX = 12;
  void clear_memmax();
  static const int kMEMMAXFieldNumber = 12;
  float memmax() const;
  void set_memmax(float value);

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.SingleProcessPerfData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::int64 pid_;
  float cpu_;
  float mem_;
  ::google::protobuf::int64 size_;
  ::google::protobuf::int64 virt_;
  ::google::protobuf::int64 res_;
  ::google::protobuf::int64 shr_;
  float cpumax_;
  float memmax_;
  mutable int _cached_size_;
  friend struct protobuf_Perf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NicData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.NicData) */ {
 public:
  NicData();
  virtual ~NicData();

  NicData(const NicData& from);

  inline NicData& operator=(const NicData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NicData(NicData&& from) noexcept
    : NicData() {
    *this = ::std::move(from);
  }

  inline NicData& operator=(NicData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NicData& default_instance();

  static inline const NicData* internal_default_instance() {
    return reinterpret_cast<const NicData*>(
               &_NicData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(NicData* other);
  friend void swap(NicData& a, NicData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NicData* New() const PROTOBUF_FINAL { return New(NULL); }

  NicData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NicData& from);
  void MergeFrom(const NicData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NicData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.fiberhome.fums.proto.SingleNicPerfData perfdata = 1;
  int perfdata_size() const;
  void clear_perfdata();
  static const int kPerfdataFieldNumber = 1;
  const ::com::fiberhome::fums::proto::SingleNicPerfData& perfdata(int index) const;
  ::com::fiberhome::fums::proto::SingleNicPerfData* mutable_perfdata(int index);
  ::com::fiberhome::fums::proto::SingleNicPerfData* add_perfdata();
  ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleNicPerfData >*
      mutable_perfdata();
  const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleNicPerfData >&
      perfdata() const;

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.NicData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleNicPerfData > perfdata_;
  mutable int _cached_size_;
  friend struct protobuf_Perf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiskData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.DiskData) */ {
 public:
  DiskData();
  virtual ~DiskData();

  DiskData(const DiskData& from);

  inline DiskData& operator=(const DiskData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiskData(DiskData&& from) noexcept
    : DiskData() {
    *this = ::std::move(from);
  }

  inline DiskData& operator=(DiskData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiskData& default_instance();

  static inline const DiskData* internal_default_instance() {
    return reinterpret_cast<const DiskData*>(
               &_DiskData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DiskData* other);
  friend void swap(DiskData& a, DiskData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiskData* New() const PROTOBUF_FINAL { return New(NULL); }

  DiskData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DiskData& from);
  void MergeFrom(const DiskData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DiskData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.fiberhome.fums.proto.SingleDiskPerfData perfdata = 1;
  int perfdata_size() const;
  void clear_perfdata();
  static const int kPerfdataFieldNumber = 1;
  const ::com::fiberhome::fums::proto::SingleDiskPerfData& perfdata(int index) const;
  ::com::fiberhome::fums::proto::SingleDiskPerfData* mutable_perfdata(int index);
  ::com::fiberhome::fums::proto::SingleDiskPerfData* add_perfdata();
  ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleDiskPerfData >*
      mutable_perfdata();
  const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleDiskPerfData >&
      perfdata() const;

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.DiskData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleDiskPerfData > perfdata_;
  mutable int _cached_size_;
  friend struct protobuf_Perf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleDiskPerfData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.SingleDiskPerfData) */ {
 public:
  SingleDiskPerfData();
  virtual ~SingleDiskPerfData();

  SingleDiskPerfData(const SingleDiskPerfData& from);

  inline SingleDiskPerfData& operator=(const SingleDiskPerfData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleDiskPerfData(SingleDiskPerfData&& from) noexcept
    : SingleDiskPerfData() {
    *this = ::std::move(from);
  }

  inline SingleDiskPerfData& operator=(SingleDiskPerfData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleDiskPerfData& default_instance();

  static inline const SingleDiskPerfData* internal_default_instance() {
    return reinterpret_cast<const SingleDiskPerfData*>(
               &_SingleDiskPerfData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SingleDiskPerfData* other);
  friend void swap(SingleDiskPerfData& a, SingleDiskPerfData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleDiskPerfData* New() const PROTOBUF_FINAL { return New(NULL); }

  SingleDiskPerfData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SingleDiskPerfData& from);
  void MergeFrom(const SingleDiskPerfData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SingleDiskPerfData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dev = 1;
  void clear_dev();
  static const int kDevFieldNumber = 1;
  const ::std::string& dev() const;
  void set_dev(const ::std::string& value);
  #if LANG_CXX11
  void set_dev(::std::string&& value);
  #endif
  void set_dev(const char* value);
  void set_dev(const char* value, size_t size);
  ::std::string* mutable_dev();
  ::std::string* release_dev();
  void set_allocated_dev(::std::string* dev);

  // float tps = 2;
  void clear_tps();
  static const int kTpsFieldNumber = 2;
  float tps() const;
  void set_tps(float value);

  // float rd_sec = 3;
  void clear_rd_sec();
  static const int kRdSecFieldNumber = 3;
  float rd_sec() const;
  void set_rd_sec(float value);

  // float wr_sec = 4;
  void clear_wr_sec();
  static const int kWrSecFieldNumber = 4;
  float wr_sec() const;
  void set_wr_sec(float value);

  // float avgrq_sz = 5;
  void clear_avgrq_sz();
  static const int kAvgrqSzFieldNumber = 5;
  float avgrq_sz() const;
  void set_avgrq_sz(float value);

  // float avgqu_sz = 6;
  void clear_avgqu_sz();
  static const int kAvgquSzFieldNumber = 6;
  float avgqu_sz() const;
  void set_avgqu_sz(float value);

  // float await = 7;
  void clear_await();
  static const int kAwaitFieldNumber = 7;
  float await() const;
  void set_await(float value);

  // float svctm = 8;
  void clear_svctm();
  static const int kSvctmFieldNumber = 8;
  float svctm() const;
  void set_svctm(float value);

  // float util = 9;
  void clear_util();
  static const int kUtilFieldNumber = 9;
  float util() const;
  void set_util(float value);

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.SingleDiskPerfData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dev_;
  float tps_;
  float rd_sec_;
  float wr_sec_;
  float avgrq_sz_;
  float avgqu_sz_;
  float await_;
  float svctm_;
  float util_;
  mutable int _cached_size_;
  friend struct protobuf_Perf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppPerfData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.AppPerfData) */ {
 public:
  AppPerfData();
  virtual ~AppPerfData();

  AppPerfData(const AppPerfData& from);

  inline AppPerfData& operator=(const AppPerfData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppPerfData(AppPerfData&& from) noexcept
    : AppPerfData() {
    *this = ::std::move(from);
  }

  inline AppPerfData& operator=(AppPerfData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppPerfData& default_instance();

  static inline const AppPerfData* internal_default_instance() {
    return reinterpret_cast<const AppPerfData*>(
               &_AppPerfData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(AppPerfData* other);
  friend void swap(AppPerfData& a, AppPerfData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppPerfData* New() const PROTOBUF_FINAL { return New(NULL); }

  AppPerfData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppPerfData& from);
  void MergeFrom(const AppPerfData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppPerfData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.fiberhome.fums.proto.SingleAppPerfData perfdata = 1;
  int perfdata_size() const;
  void clear_perfdata();
  static const int kPerfdataFieldNumber = 1;
  const ::com::fiberhome::fums::proto::SingleAppPerfData& perfdata(int index) const;
  ::com::fiberhome::fums::proto::SingleAppPerfData* mutable_perfdata(int index);
  ::com::fiberhome::fums::proto::SingleAppPerfData* add_perfdata();
  ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleAppPerfData >*
      mutable_perfdata();
  const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleAppPerfData >&
      perfdata() const;

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.AppPerfData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleAppPerfData > perfdata_;
  mutable int _cached_size_;
  friend struct protobuf_Perf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleAppPerfData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.SingleAppPerfData) */ {
 public:
  SingleAppPerfData();
  virtual ~SingleAppPerfData();

  SingleAppPerfData(const SingleAppPerfData& from);

  inline SingleAppPerfData& operator=(const SingleAppPerfData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleAppPerfData(SingleAppPerfData&& from) noexcept
    : SingleAppPerfData() {
    *this = ::std::move(from);
  }

  inline SingleAppPerfData& operator=(SingleAppPerfData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleAppPerfData& default_instance();

  static inline const SingleAppPerfData* internal_default_instance() {
    return reinterpret_cast<const SingleAppPerfData*>(
               &_SingleAppPerfData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SingleAppPerfData* other);
  friend void swap(SingleAppPerfData& a, SingleAppPerfData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleAppPerfData* New() const PROTOBUF_FINAL { return New(NULL); }

  SingleAppPerfData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SingleAppPerfData& from);
  void MergeFrom(const SingleAppPerfData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SingleAppPerfData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SingleAppPerfData_APP_TYPE_ENUM APP_TYPE_ENUM;
  static const APP_TYPE_ENUM CSD =
    SingleAppPerfData_APP_TYPE_ENUM_CSD;
  static const APP_TYPE_ENUM LRS =
    SingleAppPerfData_APP_TYPE_ENUM_LRS;
  static const APP_TYPE_ENUM CSV =
    SingleAppPerfData_APP_TYPE_ENUM_CSV;
  static const APP_TYPE_ENUM CSP =
    SingleAppPerfData_APP_TYPE_ENUM_CSP;
  static const APP_TYPE_ENUM CSX =
    SingleAppPerfData_APP_TYPE_ENUM_CSX;
  static const APP_TYPE_ENUM DRS =
    SingleAppPerfData_APP_TYPE_ENUM_DRS;
  static inline bool APP_TYPE_ENUM_IsValid(int value) {
    return SingleAppPerfData_APP_TYPE_ENUM_IsValid(value);
  }
  static const APP_TYPE_ENUM APP_TYPE_ENUM_MIN =
    SingleAppPerfData_APP_TYPE_ENUM_APP_TYPE_ENUM_MIN;
  static const APP_TYPE_ENUM APP_TYPE_ENUM_MAX =
    SingleAppPerfData_APP_TYPE_ENUM_APP_TYPE_ENUM_MAX;
  static const int APP_TYPE_ENUM_ARRAYSIZE =
    SingleAppPerfData_APP_TYPE_ENUM_APP_TYPE_ENUM_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  APP_TYPE_ENUM_descriptor() {
    return SingleAppPerfData_APP_TYPE_ENUM_descriptor();
  }
  static inline const ::std::string& APP_TYPE_ENUM_Name(APP_TYPE_ENUM value) {
    return SingleAppPerfData_APP_TYPE_ENUM_Name(value);
  }
  static inline bool APP_TYPE_ENUM_Parse(const ::std::string& name,
      APP_TYPE_ENUM* value) {
    return SingleAppPerfData_APP_TYPE_ENUM_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string createTime = 4;
  void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  const ::std::string& createtime() const;
  void set_createtime(const ::std::string& value);
  #if LANG_CXX11
  void set_createtime(::std::string&& value);
  #endif
  void set_createtime(const char* value);
  void set_createtime(const char* value, size_t size);
  ::std::string* mutable_createtime();
  ::std::string* release_createtime();
  void set_allocated_createtime(::std::string* createtime);

  // int32 sequence = 1;
  void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  ::google::protobuf::int32 sequence() const;
  void set_sequence(::google::protobuf::int32 value);

  // .com.fiberhome.fums.proto.SingleAppPerfData.APP_TYPE_ENUM appType = 2;
  void clear_apptype();
  static const int kAppTypeFieldNumber = 2;
  ::com::fiberhome::fums::proto::SingleAppPerfData_APP_TYPE_ENUM apptype() const;
  void set_apptype(::com::fiberhome::fums::proto::SingleAppPerfData_APP_TYPE_ENUM value);

  // .com.fiberhome.fums.proto.EnumDefineData.AppTypeEnum appTypeCode = 3;
  void clear_apptypecode();
  static const int kAppTypeCodeFieldNumber = 3;
  ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum apptypecode() const;
  void set_apptypecode(::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum value);

  // int32 usedMemory = 6;
  void clear_usedmemory();
  static const int kUsedMemoryFieldNumber = 6;
  ::google::protobuf::int32 usedmemory() const;
  void set_usedmemory(::google::protobuf::int32 value);

  // double cpuRatio = 5;
  void clear_cpuratio();
  static const int kCpuRatioFieldNumber = 5;
  double cpuratio() const;
  void set_cpuratio(double value);

  // double usedSysDisk = 7;
  void clear_usedsysdisk();
  static const int kUsedSysDiskFieldNumber = 7;
  double usedsysdisk() const;
  void set_usedsysdisk(double value);

  // double usedDataDisk = 8;
  void clear_useddatadisk();
  static const int kUsedDataDiskFieldNumber = 8;
  double useddatadisk() const;
  void set_useddatadisk(double value);

  // double totalDataDisk = 9;
  void clear_totaldatadisk();
  static const int kTotalDataDiskFieldNumber = 9;
  double totaldatadisk() const;
  void set_totaldatadisk(double value);

  // double cacheIn = 10;
  void clear_cachein();
  static const int kCacheInFieldNumber = 10;
  double cachein() const;
  void set_cachein(double value);

  // double cacheOut = 11;
  void clear_cacheout();
  static const int kCacheOutFieldNumber = 11;
  double cacheout() const;
  void set_cacheout(double value);

  // double curconn = 12;
  void clear_curconn();
  static const int kCurconnFieldNumber = 12;
  double curconn() const;
  void set_curconn(double value);

  // double averagereq = 13;
  void clear_averagereq();
  static const int kAveragereqFieldNumber = 13;
  double averagereq() const;
  void set_averagereq(double value);

  // double DNSRequests = 14;
  void clear_dnsrequests();
  static const int kDNSRequestsFieldNumber = 14;
  double dnsrequests() const;
  void set_dnsrequests(double value);

  // double DNSResponse = 15;
  void clear_dnsresponse();
  static const int kDNSResponseFieldNumber = 15;
  double dnsresponse() const;
  void set_dnsresponse(double value);

  // double httpRequests = 16;
  void clear_httprequests();
  static const int kHttpRequestsFieldNumber = 16;
  double httprequests() const;
  void set_httprequests(double value);

  // double httpRedirects = 17;
  void clear_httpredirects();
  static const int kHttpRedirectsFieldNumber = 17;
  double httpredirects() const;
  void set_httpredirects(double value);

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.SingleAppPerfData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr createtime_;
  ::google::protobuf::int32 sequence_;
  int apptype_;
  int apptypecode_;
  ::google::protobuf::int32 usedmemory_;
  double cpuratio_;
  double usedsysdisk_;
  double useddatadisk_;
  double totaldatadisk_;
  double cachein_;
  double cacheout_;
  double curconn_;
  double averagereq_;
  double dnsrequests_;
  double dnsresponse_;
  double httprequests_;
  double httpredirects_;
  mutable int _cached_size_;
  friend struct protobuf_Perf_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerfData

// .com.fiberhome.fums.proto.PerfData.PERFDATATYPE type = 1;
inline void PerfData::clear_type() {
  type_ = 0;
}
inline ::com::fiberhome::fums::proto::PerfData_PERFDATATYPE PerfData::type() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.PerfData.type)
  return static_cast< ::com::fiberhome::fums::proto::PerfData_PERFDATATYPE >(type_);
}
inline void PerfData::set_type(::com::fiberhome::fums::proto::PerfData_PERFDATATYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.PerfData.type)
}

// string data = 2;
inline void PerfData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PerfData::data() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.PerfData.data)
  return data_.GetNoArena();
}
inline void PerfData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.PerfData.data)
}
#if LANG_CXX11
inline void PerfData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.PerfData.data)
}
#endif
inline void PerfData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.PerfData.data)
}
inline void PerfData::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.PerfData.data)
}
inline ::std::string* PerfData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.PerfData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PerfData::release_data() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.PerfData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PerfData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.PerfData.data)
}

// -------------------------------------------------------------------

// Hostdata

// string queryTime = 1;
inline void Hostdata::clear_querytime() {
  querytime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Hostdata::querytime() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.queryTime)
  return querytime_.GetNoArena();
}
inline void Hostdata::set_querytime(const ::std::string& value) {
  
  querytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.queryTime)
}
#if LANG_CXX11
inline void Hostdata::set_querytime(::std::string&& value) {
  
  querytime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.Hostdata.queryTime)
}
#endif
inline void Hostdata::set_querytime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  querytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.Hostdata.queryTime)
}
inline void Hostdata::set_querytime(const char* value, size_t size) {
  
  querytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.Hostdata.queryTime)
}
inline ::std::string* Hostdata::mutable_querytime() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.Hostdata.queryTime)
  return querytime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Hostdata::release_querytime() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.Hostdata.queryTime)
  
  return querytime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Hostdata::set_allocated_querytime(::std::string* querytime) {
  if (querytime != NULL) {
    
  } else {
    
  }
  querytime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), querytime);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.Hostdata.queryTime)
}

// double cpuAveUsage = 2;
inline void Hostdata::clear_cpuaveusage() {
  cpuaveusage_ = 0;
}
inline double Hostdata::cpuaveusage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.cpuAveUsage)
  return cpuaveusage_;
}
inline void Hostdata::set_cpuaveusage(double value) {
  
  cpuaveusage_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.cpuAveUsage)
}

// double cpuMaxUsge = 3;
inline void Hostdata::clear_cpumaxusge() {
  cpumaxusge_ = 0;
}
inline double Hostdata::cpumaxusge() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.cpuMaxUsge)
  return cpumaxusge_;
}
inline void Hostdata::set_cpumaxusge(double value) {
  
  cpumaxusge_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.cpuMaxUsge)
}

// int32 maxContiueTime = 4;
inline void Hostdata::clear_maxcontiuetime() {
  maxcontiuetime_ = 0;
}
inline ::google::protobuf::int32 Hostdata::maxcontiuetime() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.maxContiueTime)
  return maxcontiuetime_;
}
inline void Hostdata::set_maxcontiuetime(::google::protobuf::int32 value) {
  
  maxcontiuetime_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.maxContiueTime)
}

// double memUsageAve = 5;
inline void Hostdata::clear_memusageave() {
  memusageave_ = 0;
}
inline double Hostdata::memusageave() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.memUsageAve)
  return memusageave_;
}
inline void Hostdata::set_memusageave(double value) {
  
  memusageave_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.memUsageAve)
}

// int64 rxFlowAve = 6;
inline void Hostdata::clear_rxflowave() {
  rxflowave_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Hostdata::rxflowave() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.rxFlowAve)
  return rxflowave_;
}
inline void Hostdata::set_rxflowave(::google::protobuf::int64 value) {
  
  rxflowave_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.rxFlowAve)
}

// int64 txFlowAve = 7;
inline void Hostdata::clear_txflowave() {
  txflowave_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Hostdata::txflowave() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.txFlowAve)
  return txflowave_;
}
inline void Hostdata::set_txflowave(::google::protobuf::int64 value) {
  
  txflowave_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.txFlowAve)
}

// int32 tcpLinkNum = 8;
inline void Hostdata::clear_tcplinknum() {
  tcplinknum_ = 0;
}
inline ::google::protobuf::int32 Hostdata::tcplinknum() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.tcpLinkNum)
  return tcplinknum_;
}
inline void Hostdata::set_tcplinknum(::google::protobuf::int32 value) {
  
  tcplinknum_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.tcpLinkNum)
}

// int32 tcpInboundTotal = 9;
inline void Hostdata::clear_tcpinboundtotal() {
  tcpinboundtotal_ = 0;
}
inline ::google::protobuf::int32 Hostdata::tcpinboundtotal() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.tcpInboundTotal)
  return tcpinboundtotal_;
}
inline void Hostdata::set_tcpinboundtotal(::google::protobuf::int32 value) {
  
  tcpinboundtotal_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.tcpInboundTotal)
}

// int32 tcpOutboundTotal = 10;
inline void Hostdata::clear_tcpoutboundtotal() {
  tcpoutboundtotal_ = 0;
}
inline ::google::protobuf::int32 Hostdata::tcpoutboundtotal() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.tcpOutboundTotal)
  return tcpoutboundtotal_;
}
inline void Hostdata::set_tcpoutboundtotal(::google::protobuf::int32 value) {
  
  tcpoutboundtotal_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.tcpOutboundTotal)
}

// int32 memTotal = 11;
inline void Hostdata::clear_memtotal() {
  memtotal_ = 0;
}
inline ::google::protobuf::int32 Hostdata::memtotal() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.memTotal)
  return memtotal_;
}
inline void Hostdata::set_memtotal(::google::protobuf::int32 value) {
  
  memtotal_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.memTotal)
}

// int32 diskUsage = 12;
inline void Hostdata::clear_diskusage() {
  diskusage_ = 0;
}
inline ::google::protobuf::int32 Hostdata::diskusage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.diskUsage)
  return diskusage_;
}
inline void Hostdata::set_diskusage(::google::protobuf::int32 value) {
  
  diskusage_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.diskUsage)
}

// double memMaxUsage = 13;
inline void Hostdata::clear_memmaxusage() {
  memmaxusage_ = 0;
}
inline double Hostdata::memmaxusage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.memMaxUsage)
  return memmaxusage_;
}
inline void Hostdata::set_memmaxusage(double value) {
  
  memmaxusage_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.memMaxUsage)
}

// int32 diskTotal = 14;
inline void Hostdata::clear_disktotal() {
  disktotal_ = 0;
}
inline ::google::protobuf::int32 Hostdata::disktotal() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.diskTotal)
  return disktotal_;
}
inline void Hostdata::set_disktotal(::google::protobuf::int32 value) {
  
  disktotal_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.diskTotal)
}

// -------------------------------------------------------------------

// ProcessData

// repeated .com.fiberhome.fums.proto.SingleProcessPerfData perfdata = 1;
inline int ProcessData::perfdata_size() const {
  return perfdata_.size();
}
inline void ProcessData::clear_perfdata() {
  perfdata_.Clear();
}
inline const ::com::fiberhome::fums::proto::SingleProcessPerfData& ProcessData::perfdata(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.ProcessData.perfdata)
  return perfdata_.Get(index);
}
inline ::com::fiberhome::fums::proto::SingleProcessPerfData* ProcessData::mutable_perfdata(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.ProcessData.perfdata)
  return perfdata_.Mutable(index);
}
inline ::com::fiberhome::fums::proto::SingleProcessPerfData* ProcessData::add_perfdata() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.ProcessData.perfdata)
  return perfdata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleProcessPerfData >*
ProcessData::mutable_perfdata() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.ProcessData.perfdata)
  return &perfdata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleProcessPerfData >&
ProcessData::perfdata() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.ProcessData.perfdata)
  return perfdata_;
}

// -------------------------------------------------------------------

// SingleProcessPerfData

// int64 PID = 1;
inline void SingleProcessPerfData::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleProcessPerfData::pid() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.PID)
  return pid_;
}
inline void SingleProcessPerfData::set_pid(::google::protobuf::int64 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.PID)
}

// string COMMAND = 2;
inline void SingleProcessPerfData::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleProcessPerfData::command() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
  return command_.GetNoArena();
}
inline void SingleProcessPerfData::set_command(const ::std::string& value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
}
#if LANG_CXX11
inline void SingleProcessPerfData::set_command(::std::string&& value) {
  
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
}
#endif
inline void SingleProcessPerfData::set_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
}
inline void SingleProcessPerfData::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
}
inline ::std::string* SingleProcessPerfData::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleProcessPerfData::release_command() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
  
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleProcessPerfData::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
}

// float CPU = 3;
inline void SingleProcessPerfData::clear_cpu() {
  cpu_ = 0;
}
inline float SingleProcessPerfData::cpu() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.CPU)
  return cpu_;
}
inline void SingleProcessPerfData::set_cpu(float value) {
  
  cpu_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.CPU)
}

// float MEM = 4;
inline void SingleProcessPerfData::clear_mem() {
  mem_ = 0;
}
inline float SingleProcessPerfData::mem() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.MEM)
  return mem_;
}
inline void SingleProcessPerfData::set_mem(float value) {
  
  mem_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.MEM)
}

// int64 SIZE = 5;
inline void SingleProcessPerfData::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleProcessPerfData::size() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.SIZE)
  return size_;
}
inline void SingleProcessPerfData::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.SIZE)
}

// int64 VIRT = 6;
inline void SingleProcessPerfData::clear_virt() {
  virt_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleProcessPerfData::virt() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.VIRT)
  return virt_;
}
inline void SingleProcessPerfData::set_virt(::google::protobuf::int64 value) {
  
  virt_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.VIRT)
}

// int64 RES = 7;
inline void SingleProcessPerfData::clear_res() {
  res_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleProcessPerfData::res() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.RES)
  return res_;
}
inline void SingleProcessPerfData::set_res(::google::protobuf::int64 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.RES)
}

// int64 SHR = 8;
inline void SingleProcessPerfData::clear_shr() {
  shr_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleProcessPerfData::shr() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.SHR)
  return shr_;
}
inline void SingleProcessPerfData::set_shr(::google::protobuf::int64 value) {
  
  shr_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.SHR)
}

// string TIME = 9;
inline void SingleProcessPerfData::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleProcessPerfData::time() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
  return time_.GetNoArena();
}
inline void SingleProcessPerfData::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
}
#if LANG_CXX11
inline void SingleProcessPerfData::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
}
#endif
inline void SingleProcessPerfData::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
}
inline void SingleProcessPerfData::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
}
inline ::std::string* SingleProcessPerfData::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleProcessPerfData::release_time() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleProcessPerfData::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
}

// string STATE = 10;
inline void SingleProcessPerfData::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleProcessPerfData::state() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
  return state_.GetNoArena();
}
inline void SingleProcessPerfData::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
}
#if LANG_CXX11
inline void SingleProcessPerfData::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
}
#endif
inline void SingleProcessPerfData::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
}
inline void SingleProcessPerfData::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
}
inline ::std::string* SingleProcessPerfData::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleProcessPerfData::release_state() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleProcessPerfData::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
}

// float CPUMAX = 11;
inline void SingleProcessPerfData::clear_cpumax() {
  cpumax_ = 0;
}
inline float SingleProcessPerfData::cpumax() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.CPUMAX)
  return cpumax_;
}
inline void SingleProcessPerfData::set_cpumax(float value) {
  
  cpumax_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.CPUMAX)
}

// float MEMMAX = 12;
inline void SingleProcessPerfData::clear_memmax() {
  memmax_ = 0;
}
inline float SingleProcessPerfData::memmax() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.MEMMAX)
  return memmax_;
}
inline void SingleProcessPerfData::set_memmax(float value) {
  
  memmax_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.MEMMAX)
}

// -------------------------------------------------------------------

// NicData

// repeated .com.fiberhome.fums.proto.SingleNicPerfData perfdata = 1;
inline int NicData::perfdata_size() const {
  return perfdata_.size();
}
inline void NicData::clear_perfdata() {
  perfdata_.Clear();
}
inline const ::com::fiberhome::fums::proto::SingleNicPerfData& NicData::perfdata(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.NicData.perfdata)
  return perfdata_.Get(index);
}
inline ::com::fiberhome::fums::proto::SingleNicPerfData* NicData::mutable_perfdata(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.NicData.perfdata)
  return perfdata_.Mutable(index);
}
inline ::com::fiberhome::fums::proto::SingleNicPerfData* NicData::add_perfdata() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.NicData.perfdata)
  return perfdata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleNicPerfData >*
NicData::mutable_perfdata() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.NicData.perfdata)
  return &perfdata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleNicPerfData >&
NicData::perfdata() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.NicData.perfdata)
  return perfdata_;
}

// -------------------------------------------------------------------

// DiskData

// repeated .com.fiberhome.fums.proto.SingleDiskPerfData perfdata = 1;
inline int DiskData::perfdata_size() const {
  return perfdata_.size();
}
inline void DiskData::clear_perfdata() {
  perfdata_.Clear();
}
inline const ::com::fiberhome::fums::proto::SingleDiskPerfData& DiskData::perfdata(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.DiskData.perfdata)
  return perfdata_.Get(index);
}
inline ::com::fiberhome::fums::proto::SingleDiskPerfData* DiskData::mutable_perfdata(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.DiskData.perfdata)
  return perfdata_.Mutable(index);
}
inline ::com::fiberhome::fums::proto::SingleDiskPerfData* DiskData::add_perfdata() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.DiskData.perfdata)
  return perfdata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleDiskPerfData >*
DiskData::mutable_perfdata() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.DiskData.perfdata)
  return &perfdata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleDiskPerfData >&
DiskData::perfdata() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.DiskData.perfdata)
  return perfdata_;
}

// -------------------------------------------------------------------

// SingleDiskPerfData

// string dev = 1;
inline void SingleDiskPerfData::clear_dev() {
  dev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleDiskPerfData::dev() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
  return dev_.GetNoArena();
}
inline void SingleDiskPerfData::set_dev(const ::std::string& value) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
}
#if LANG_CXX11
inline void SingleDiskPerfData::set_dev(::std::string&& value) {
  
  dev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
}
#endif
inline void SingleDiskPerfData::set_dev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
}
inline void SingleDiskPerfData::set_dev(const char* value, size_t size) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
}
inline ::std::string* SingleDiskPerfData::mutable_dev() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
  return dev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleDiskPerfData::release_dev() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
  
  return dev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleDiskPerfData::set_allocated_dev(::std::string* dev) {
  if (dev != NULL) {
    
  } else {
    
  }
  dev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
}

// float tps = 2;
inline void SingleDiskPerfData::clear_tps() {
  tps_ = 0;
}
inline float SingleDiskPerfData::tps() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.tps)
  return tps_;
}
inline void SingleDiskPerfData::set_tps(float value) {
  
  tps_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.tps)
}

// float rd_sec = 3;
inline void SingleDiskPerfData::clear_rd_sec() {
  rd_sec_ = 0;
}
inline float SingleDiskPerfData::rd_sec() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.rd_sec)
  return rd_sec_;
}
inline void SingleDiskPerfData::set_rd_sec(float value) {
  
  rd_sec_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.rd_sec)
}

// float wr_sec = 4;
inline void SingleDiskPerfData::clear_wr_sec() {
  wr_sec_ = 0;
}
inline float SingleDiskPerfData::wr_sec() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.wr_sec)
  return wr_sec_;
}
inline void SingleDiskPerfData::set_wr_sec(float value) {
  
  wr_sec_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.wr_sec)
}

// float avgrq_sz = 5;
inline void SingleDiskPerfData::clear_avgrq_sz() {
  avgrq_sz_ = 0;
}
inline float SingleDiskPerfData::avgrq_sz() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.avgrq_sz)
  return avgrq_sz_;
}
inline void SingleDiskPerfData::set_avgrq_sz(float value) {
  
  avgrq_sz_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.avgrq_sz)
}

// float avgqu_sz = 6;
inline void SingleDiskPerfData::clear_avgqu_sz() {
  avgqu_sz_ = 0;
}
inline float SingleDiskPerfData::avgqu_sz() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.avgqu_sz)
  return avgqu_sz_;
}
inline void SingleDiskPerfData::set_avgqu_sz(float value) {
  
  avgqu_sz_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.avgqu_sz)
}

// float await = 7;
inline void SingleDiskPerfData::clear_await() {
  await_ = 0;
}
inline float SingleDiskPerfData::await() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.await)
  return await_;
}
inline void SingleDiskPerfData::set_await(float value) {
  
  await_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.await)
}

// float svctm = 8;
inline void SingleDiskPerfData::clear_svctm() {
  svctm_ = 0;
}
inline float SingleDiskPerfData::svctm() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.svctm)
  return svctm_;
}
inline void SingleDiskPerfData::set_svctm(float value) {
  
  svctm_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.svctm)
}

// float util = 9;
inline void SingleDiskPerfData::clear_util() {
  util_ = 0;
}
inline float SingleDiskPerfData::util() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.util)
  return util_;
}
inline void SingleDiskPerfData::set_util(float value) {
  
  util_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.util)
}

// -------------------------------------------------------------------

// AppPerfData

// repeated .com.fiberhome.fums.proto.SingleAppPerfData perfdata = 1;
inline int AppPerfData::perfdata_size() const {
  return perfdata_.size();
}
inline void AppPerfData::clear_perfdata() {
  perfdata_.Clear();
}
inline const ::com::fiberhome::fums::proto::SingleAppPerfData& AppPerfData::perfdata(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.AppPerfData.perfdata)
  return perfdata_.Get(index);
}
inline ::com::fiberhome::fums::proto::SingleAppPerfData* AppPerfData::mutable_perfdata(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.AppPerfData.perfdata)
  return perfdata_.Mutable(index);
}
inline ::com::fiberhome::fums::proto::SingleAppPerfData* AppPerfData::add_perfdata() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.AppPerfData.perfdata)
  return perfdata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleAppPerfData >*
AppPerfData::mutable_perfdata() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.AppPerfData.perfdata)
  return &perfdata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleAppPerfData >&
AppPerfData::perfdata() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.AppPerfData.perfdata)
  return perfdata_;
}

// -------------------------------------------------------------------

// SingleAppPerfData

// int32 sequence = 1;
inline void SingleAppPerfData::clear_sequence() {
  sequence_ = 0;
}
inline ::google::protobuf::int32 SingleAppPerfData::sequence() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.sequence)
  return sequence_;
}
inline void SingleAppPerfData::set_sequence(::google::protobuf::int32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.sequence)
}

// .com.fiberhome.fums.proto.SingleAppPerfData.APP_TYPE_ENUM appType = 2;
inline void SingleAppPerfData::clear_apptype() {
  apptype_ = 0;
}
inline ::com::fiberhome::fums::proto::SingleAppPerfData_APP_TYPE_ENUM SingleAppPerfData::apptype() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.appType)
  return static_cast< ::com::fiberhome::fums::proto::SingleAppPerfData_APP_TYPE_ENUM >(apptype_);
}
inline void SingleAppPerfData::set_apptype(::com::fiberhome::fums::proto::SingleAppPerfData_APP_TYPE_ENUM value) {
  
  apptype_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.appType)
}

// .com.fiberhome.fums.proto.EnumDefineData.AppTypeEnum appTypeCode = 3;
inline void SingleAppPerfData::clear_apptypecode() {
  apptypecode_ = 0;
}
inline ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum SingleAppPerfData::apptypecode() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.appTypeCode)
  return static_cast< ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum >(apptypecode_);
}
inline void SingleAppPerfData::set_apptypecode(::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum value) {
  
  apptypecode_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.appTypeCode)
}

// string createTime = 4;
inline void SingleAppPerfData::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleAppPerfData::createtime() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
  return createtime_.GetNoArena();
}
inline void SingleAppPerfData::set_createtime(const ::std::string& value) {
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
}
#if LANG_CXX11
inline void SingleAppPerfData::set_createtime(::std::string&& value) {
  
  createtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
}
#endif
inline void SingleAppPerfData::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
}
inline void SingleAppPerfData::set_createtime(const char* value, size_t size) {
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
}
inline ::std::string* SingleAppPerfData::mutable_createtime() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
  return createtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleAppPerfData::release_createtime() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
  
  return createtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleAppPerfData::set_allocated_createtime(::std::string* createtime) {
  if (createtime != NULL) {
    
  } else {
    
  }
  createtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
}

// double cpuRatio = 5;
inline void SingleAppPerfData::clear_cpuratio() {
  cpuratio_ = 0;
}
inline double SingleAppPerfData::cpuratio() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.cpuRatio)
  return cpuratio_;
}
inline void SingleAppPerfData::set_cpuratio(double value) {
  
  cpuratio_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.cpuRatio)
}

// int32 usedMemory = 6;
inline void SingleAppPerfData::clear_usedmemory() {
  usedmemory_ = 0;
}
inline ::google::protobuf::int32 SingleAppPerfData::usedmemory() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.usedMemory)
  return usedmemory_;
}
inline void SingleAppPerfData::set_usedmemory(::google::protobuf::int32 value) {
  
  usedmemory_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.usedMemory)
}

// double usedSysDisk = 7;
inline void SingleAppPerfData::clear_usedsysdisk() {
  usedsysdisk_ = 0;
}
inline double SingleAppPerfData::usedsysdisk() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.usedSysDisk)
  return usedsysdisk_;
}
inline void SingleAppPerfData::set_usedsysdisk(double value) {
  
  usedsysdisk_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.usedSysDisk)
}

// double usedDataDisk = 8;
inline void SingleAppPerfData::clear_useddatadisk() {
  useddatadisk_ = 0;
}
inline double SingleAppPerfData::useddatadisk() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.usedDataDisk)
  return useddatadisk_;
}
inline void SingleAppPerfData::set_useddatadisk(double value) {
  
  useddatadisk_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.usedDataDisk)
}

// double totalDataDisk = 9;
inline void SingleAppPerfData::clear_totaldatadisk() {
  totaldatadisk_ = 0;
}
inline double SingleAppPerfData::totaldatadisk() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.totalDataDisk)
  return totaldatadisk_;
}
inline void SingleAppPerfData::set_totaldatadisk(double value) {
  
  totaldatadisk_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.totalDataDisk)
}

// double cacheIn = 10;
inline void SingleAppPerfData::clear_cachein() {
  cachein_ = 0;
}
inline double SingleAppPerfData::cachein() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.cacheIn)
  return cachein_;
}
inline void SingleAppPerfData::set_cachein(double value) {
  
  cachein_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.cacheIn)
}

// double cacheOut = 11;
inline void SingleAppPerfData::clear_cacheout() {
  cacheout_ = 0;
}
inline double SingleAppPerfData::cacheout() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.cacheOut)
  return cacheout_;
}
inline void SingleAppPerfData::set_cacheout(double value) {
  
  cacheout_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.cacheOut)
}

// double curconn = 12;
inline void SingleAppPerfData::clear_curconn() {
  curconn_ = 0;
}
inline double SingleAppPerfData::curconn() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.curconn)
  return curconn_;
}
inline void SingleAppPerfData::set_curconn(double value) {
  
  curconn_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.curconn)
}

// double averagereq = 13;
inline void SingleAppPerfData::clear_averagereq() {
  averagereq_ = 0;
}
inline double SingleAppPerfData::averagereq() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.averagereq)
  return averagereq_;
}
inline void SingleAppPerfData::set_averagereq(double value) {
  
  averagereq_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.averagereq)
}

// double DNSRequests = 14;
inline void SingleAppPerfData::clear_dnsrequests() {
  dnsrequests_ = 0;
}
inline double SingleAppPerfData::dnsrequests() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.DNSRequests)
  return dnsrequests_;
}
inline void SingleAppPerfData::set_dnsrequests(double value) {
  
  dnsrequests_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.DNSRequests)
}

// double DNSResponse = 15;
inline void SingleAppPerfData::clear_dnsresponse() {
  dnsresponse_ = 0;
}
inline double SingleAppPerfData::dnsresponse() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.DNSResponse)
  return dnsresponse_;
}
inline void SingleAppPerfData::set_dnsresponse(double value) {
  
  dnsresponse_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.DNSResponse)
}

// double httpRequests = 16;
inline void SingleAppPerfData::clear_httprequests() {
  httprequests_ = 0;
}
inline double SingleAppPerfData::httprequests() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.httpRequests)
  return httprequests_;
}
inline void SingleAppPerfData::set_httprequests(double value) {
  
  httprequests_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.httpRequests)
}

// double httpRedirects = 17;
inline void SingleAppPerfData::clear_httpredirects() {
  httpredirects_ = 0;
}
inline double SingleAppPerfData::httpredirects() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.httpRedirects)
  return httpredirects_;
}
inline void SingleAppPerfData::set_httpredirects(double value) {
  
  httpredirects_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.httpRedirects)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fiberhome::fums::proto::PerfData_PERFDATATYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fiberhome::fums::proto::PerfData_PERFDATATYPE>() {
  return ::com::fiberhome::fums::proto::PerfData_PERFDATATYPE_descriptor();
}
template <> struct is_proto_enum< ::com::fiberhome::fums::proto::SingleAppPerfData_APP_TYPE_ENUM> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fiberhome::fums::proto::SingleAppPerfData_APP_TYPE_ENUM>() {
  return ::com::fiberhome::fums::proto::SingleAppPerfData_APP_TYPE_ENUM_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Perf_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Event.proto

#ifndef PROTOBUF_Event_2eproto__INCLUDED
#define PROTOBUF_Event_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonDefine.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace fiberhome {
namespace fums {
namespace proto {
class EventData;
class EventDataDefaultTypeInternal;
extern EventDataDefaultTypeInternal _EventData_default_instance_;
}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

namespace com {
namespace fiberhome {
namespace fums {
namespace proto {

namespace protobuf_Event_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Event_2eproto

enum EventData_EVENTTYPE {
  EventData_EVENTTYPE_AGENT_START = 0,
  EventData_EVENTTYPE_APP_START = 1,
  EventData_EVENTTYPE_APP_STOP = 2,
  EventData_EVENTTYPE_CTRLAPPRST = 3,
  EventData_EVENTTYPE_COMM_EVENT = 4,
  EventData_EVENTTYPE_EventData_EVENTTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventData_EVENTTYPE_EventData_EVENTTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventData_EVENTTYPE_IsValid(int value);
const EventData_EVENTTYPE EventData_EVENTTYPE_EVENTTYPE_MIN = EventData_EVENTTYPE_AGENT_START;
const EventData_EVENTTYPE EventData_EVENTTYPE_EVENTTYPE_MAX = EventData_EVENTTYPE_COMM_EVENT;
const int EventData_EVENTTYPE_EVENTTYPE_ARRAYSIZE = EventData_EVENTTYPE_EVENTTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventData_EVENTTYPE_descriptor();
inline const ::std::string& EventData_EVENTTYPE_Name(EventData_EVENTTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventData_EVENTTYPE_descriptor(), value);
}
inline bool EventData_EVENTTYPE_Parse(
    const ::std::string& name, EventData_EVENTTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventData_EVENTTYPE>(
    EventData_EVENTTYPE_descriptor(), name, value);
}
// ===================================================================

class EventData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.EventData) */ {
 public:
  EventData();
  virtual ~EventData();

  EventData(const EventData& from);

  inline EventData& operator=(const EventData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventData(EventData&& from) noexcept
    : EventData() {
    *this = ::std::move(from);
  }

  inline EventData& operator=(EventData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventData& default_instance();

  static inline const EventData* internal_default_instance() {
    return reinterpret_cast<const EventData*>(
               &_EventData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EventData* other);
  friend void swap(EventData& a, EventData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventData* New() const PROTOBUF_FINAL { return New(NULL); }

  EventData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EventData& from);
  void MergeFrom(const EventData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EventData_EVENTTYPE EVENTTYPE;
  static const EVENTTYPE AGENT_START =
    EventData_EVENTTYPE_AGENT_START;
  static const EVENTTYPE APP_START =
    EventData_EVENTTYPE_APP_START;
  static const EVENTTYPE APP_STOP =
    EventData_EVENTTYPE_APP_STOP;
  static const EVENTTYPE CTRLAPPRST =
    EventData_EVENTTYPE_CTRLAPPRST;
  static const EVENTTYPE COMM_EVENT =
    EventData_EVENTTYPE_COMM_EVENT;
  static inline bool EVENTTYPE_IsValid(int value) {
    return EventData_EVENTTYPE_IsValid(value);
  }
  static const EVENTTYPE EVENTTYPE_MIN =
    EventData_EVENTTYPE_EVENTTYPE_MIN;
  static const EVENTTYPE EVENTTYPE_MAX =
    EventData_EVENTTYPE_EVENTTYPE_MAX;
  static const int EVENTTYPE_ARRAYSIZE =
    EventData_EVENTTYPE_EVENTTYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EVENTTYPE_descriptor() {
    return EventData_EVENTTYPE_descriptor();
  }
  static inline const ::std::string& EVENTTYPE_Name(EVENTTYPE value) {
    return EventData_EVENTTYPE_Name(value);
  }
  static inline bool EVENTTYPE_Parse(const ::std::string& name,
      EVENTTYPE* value) {
    return EventData_EVENTTYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string eventProbableCause = 2;
  void clear_eventprobablecause();
  static const int kEventProbableCauseFieldNumber = 2;
  const ::std::string& eventprobablecause() const;
  void set_eventprobablecause(const ::std::string& value);
  #if LANG_CXX11
  void set_eventprobablecause(::std::string&& value);
  #endif
  void set_eventprobablecause(const char* value);
  void set_eventprobablecause(const char* value, size_t size);
  ::std::string* mutable_eventprobablecause();
  ::std::string* release_eventprobablecause();
  void set_allocated_eventprobablecause(::std::string* eventprobablecause);

  // string eventEntityInstance = 3;
  void clear_evententityinstance();
  static const int kEventEntityInstanceFieldNumber = 3;
  const ::std::string& evententityinstance() const;
  void set_evententityinstance(const ::std::string& value);
  #if LANG_CXX11
  void set_evententityinstance(::std::string&& value);
  #endif
  void set_evententityinstance(const char* value);
  void set_evententityinstance(const char* value, size_t size);
  ::std::string* mutable_evententityinstance();
  ::std::string* release_evententityinstance();
  void set_allocated_evententityinstance(::std::string* evententityinstance);

  // string eventOccurTime = 5;
  void clear_eventoccurtime();
  static const int kEventOccurTimeFieldNumber = 5;
  const ::std::string& eventoccurtime() const;
  void set_eventoccurtime(const ::std::string& value);
  #if LANG_CXX11
  void set_eventoccurtime(::std::string&& value);
  #endif
  void set_eventoccurtime(const char* value);
  void set_eventoccurtime(const char* value, size_t size);
  ::std::string* mutable_eventoccurtime();
  ::std::string* release_eventoccurtime();
  void set_allocated_eventoccurtime(::std::string* eventoccurtime);

  // string eventMessage = 6;
  void clear_eventmessage();
  static const int kEventMessageFieldNumber = 6;
  const ::std::string& eventmessage() const;
  void set_eventmessage(const ::std::string& value);
  #if LANG_CXX11
  void set_eventmessage(::std::string&& value);
  #endif
  void set_eventmessage(const char* value);
  void set_eventmessage(const char* value, size_t size);
  ::std::string* mutable_eventmessage();
  ::std::string* release_eventmessage();
  void set_allocated_eventmessage(::std::string* eventmessage);

  // .com.fiberhome.fums.proto.EventData.EVENTTYPE type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::com::fiberhome::fums::proto::EventData_EVENTTYPE type() const;
  void set_type(::com::fiberhome::fums::proto::EventData_EVENTTYPE value);

  // .com.fiberhome.fums.proto.EnumDefineData.AppTypeEnum appTypeCode = 4;
  void clear_apptypecode();
  static const int kAppTypeCodeFieldNumber = 4;
  ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum apptypecode() const;
  void set_apptypecode(::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum value);

  // int32 eventSeqNo = 7;
  void clear_eventseqno();
  static const int kEventSeqNoFieldNumber = 7;
  ::google::protobuf::int32 eventseqno() const;
  void set_eventseqno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.EventData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr eventprobablecause_;
  ::google::protobuf::internal::ArenaStringPtr evententityinstance_;
  ::google::protobuf::internal::ArenaStringPtr eventoccurtime_;
  ::google::protobuf::internal::ArenaStringPtr eventmessage_;
  int type_;
  int apptypecode_;
  ::google::protobuf::int32 eventseqno_;
  mutable int _cached_size_;
  friend struct protobuf_Event_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventData

// .com.fiberhome.fums.proto.EventData.EVENTTYPE type = 1;
inline void EventData::clear_type() {
  type_ = 0;
}
inline ::com::fiberhome::fums::proto::EventData_EVENTTYPE EventData::type() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.EventData.type)
  return static_cast< ::com::fiberhome::fums::proto::EventData_EVENTTYPE >(type_);
}
inline void EventData::set_type(::com::fiberhome::fums::proto::EventData_EVENTTYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.EventData.type)
}

// string eventProbableCause = 2;
inline void EventData::clear_eventprobablecause() {
  eventprobablecause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventData::eventprobablecause() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.EventData.eventProbableCause)
  return eventprobablecause_.GetNoArena();
}
inline void EventData::set_eventprobablecause(const ::std::string& value) {
  
  eventprobablecause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.EventData.eventProbableCause)
}
#if LANG_CXX11
inline void EventData::set_eventprobablecause(::std::string&& value) {
  
  eventprobablecause_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.EventData.eventProbableCause)
}
#endif
inline void EventData::set_eventprobablecause(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eventprobablecause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.EventData.eventProbableCause)
}
inline void EventData::set_eventprobablecause(const char* value, size_t size) {
  
  eventprobablecause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.EventData.eventProbableCause)
}
inline ::std::string* EventData::mutable_eventprobablecause() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.EventData.eventProbableCause)
  return eventprobablecause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventData::release_eventprobablecause() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.EventData.eventProbableCause)
  
  return eventprobablecause_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventData::set_allocated_eventprobablecause(::std::string* eventprobablecause) {
  if (eventprobablecause != NULL) {
    
  } else {
    
  }
  eventprobablecause_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eventprobablecause);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.EventData.eventProbableCause)
}

// string eventEntityInstance = 3;
inline void EventData::clear_evententityinstance() {
  evententityinstance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventData::evententityinstance() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.EventData.eventEntityInstance)
  return evententityinstance_.GetNoArena();
}
inline void EventData::set_evententityinstance(const ::std::string& value) {
  
  evententityinstance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.EventData.eventEntityInstance)
}
#if LANG_CXX11
inline void EventData::set_evententityinstance(::std::string&& value) {
  
  evententityinstance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.EventData.eventEntityInstance)
}
#endif
inline void EventData::set_evententityinstance(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  evententityinstance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.EventData.eventEntityInstance)
}
inline void EventData::set_evententityinstance(const char* value, size_t size) {
  
  evententityinstance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.EventData.eventEntityInstance)
}
inline ::std::string* EventData::mutable_evententityinstance() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.EventData.eventEntityInstance)
  return evententityinstance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventData::release_evententityinstance() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.EventData.eventEntityInstance)
  
  return evententityinstance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventData::set_allocated_evententityinstance(::std::string* evententityinstance) {
  if (evententityinstance != NULL) {
    
  } else {
    
  }
  evententityinstance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), evententityinstance);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.EventData.eventEntityInstance)
}

// .com.fiberhome.fums.proto.EnumDefineData.AppTypeEnum appTypeCode = 4;
inline void EventData::clear_apptypecode() {
  apptypecode_ = 0;
}
inline ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum EventData::apptypecode() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.EventData.appTypeCode)
  return static_cast< ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum >(apptypecode_);
}
inline void EventData::set_apptypecode(::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum value) {
  
  apptypecode_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.EventData.appTypeCode)
}

// string eventOccurTime = 5;
inline void EventData::clear_eventoccurtime() {
  eventoccurtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventData::eventoccurtime() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.EventData.eventOccurTime)
  return eventoccurtime_.GetNoArena();
}
inline void EventData::set_eventoccurtime(const ::std::string& value) {
  
  eventoccurtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.EventData.eventOccurTime)
}
#if LANG_CXX11
inline void EventData::set_eventoccurtime(::std::string&& value) {
  
  eventoccurtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.EventData.eventOccurTime)
}
#endif
inline void EventData::set_eventoccurtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eventoccurtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.EventData.eventOccurTime)
}
inline void EventData::set_eventoccurtime(const char* value, size_t size) {
  
  eventoccurtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.EventData.eventOccurTime)
}
inline ::std::string* EventData::mutable_eventoccurtime() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.EventData.eventOccurTime)
  return eventoccurtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventData::release_eventoccurtime() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.EventData.eventOccurTime)
  
  return eventoccurtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventData::set_allocated_eventoccurtime(::std::string* eventoccurtime) {
  if (eventoccurtime != NULL) {
    
  } else {
    
  }
  eventoccurtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eventoccurtime);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.EventData.eventOccurTime)
}

// string eventMessage = 6;
inline void EventData::clear_eventmessage() {
  eventmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventData::eventmessage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.EventData.eventMessage)
  return eventmessage_.GetNoArena();
}
inline void EventData::set_eventmessage(const ::std::string& value) {
  
  eventmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.EventData.eventMessage)
}
#if LANG_CXX11
inline void EventData::set_eventmessage(::std::string&& value) {
  
  eventmessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.EventData.eventMessage)
}
#endif
inline void EventData::set_eventmessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  eventmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.EventData.eventMessage)
}
inline void EventData::set_eventmessage(const char* value, size_t size) {
  
  eventmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.EventData.eventMessage)
}
inline ::std::string* EventData::mutable_eventmessage() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.EventData.eventMessage)
  return eventmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventData::release_eventmessage() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.EventData.eventMessage)
  
  return eventmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventData::set_allocated_eventmessage(::std::string* eventmessage) {
  if (eventmessage != NULL) {
    
  } else {
    
  }
  eventmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eventmessage);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.EventData.eventMessage)
}

// int32 eventSeqNo = 7;
inline void EventData::clear_eventseqno() {
  eventseqno_ = 0;
}
inline ::google::protobuf::int32 EventData::eventseqno() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.EventData.eventSeqNo)
  return eventseqno_;
}
inline void EventData::set_eventseqno(::google::protobuf::int32 value) {
  
  eventseqno_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.EventData.eventSeqNo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fiberhome::fums::proto::EventData_EVENTTYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fiberhome::fums::proto::EventData_EVENTTYPE>() {
  return ::com::fiberhome::fums::proto::EventData_EVENTTYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Event_2eproto__INCLUDED

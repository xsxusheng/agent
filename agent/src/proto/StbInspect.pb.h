// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StbInspect.proto

#ifndef PROTOBUF_StbInspect_2eproto__INCLUDED
#define PROTOBUF_StbInspect_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "CommonDefine.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace fiberhome {
namespace fums {
namespace proto {
class StbInspectData;
class StbInspectDataDefaultTypeInternal;
extern StbInspectDataDefaultTypeInternal _StbInspectData_default_instance_;
}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

namespace com {
namespace fiberhome {
namespace fums {
namespace proto {

namespace protobuf_StbInspect_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_StbInspect_2eproto

// ===================================================================

class StbInspectData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.StbInspectData) */ {
 public:
  StbInspectData();
  virtual ~StbInspectData();

  StbInspectData(const StbInspectData& from);

  inline StbInspectData& operator=(const StbInspectData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StbInspectData(StbInspectData&& from) noexcept
    : StbInspectData() {
    *this = ::std::move(from);
  }

  inline StbInspectData& operator=(StbInspectData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StbInspectData& default_instance();

  static inline const StbInspectData* internal_default_instance() {
    return reinterpret_cast<const StbInspectData*>(
               &_StbInspectData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StbInspectData* other);
  friend void swap(StbInspectData& a, StbInspectData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StbInspectData* New() const PROTOBUF_FINAL { return New(NULL); }

  StbInspectData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StbInspectData& from);
  void MergeFrom(const StbInspectData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StbInspectData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string messageType = 1;
  void clear_messagetype();
  static const int kMessageTypeFieldNumber = 1;
  const ::std::string& messagetype() const;
  void set_messagetype(const ::std::string& value);
  #if LANG_CXX11
  void set_messagetype(::std::string&& value);
  #endif
  void set_messagetype(const char* value);
  void set_messagetype(const char* value, size_t size);
  ::std::string* mutable_messagetype();
  ::std::string* release_messagetype();
  void set_allocated_messagetype(::std::string* messagetype);

  // string stbIp = 2;
  void clear_stbip();
  static const int kStbIpFieldNumber = 2;
  const ::std::string& stbip() const;
  void set_stbip(const ::std::string& value);
  #if LANG_CXX11
  void set_stbip(::std::string&& value);
  #endif
  void set_stbip(const char* value);
  void set_stbip(const char* value, size_t size);
  ::std::string* mutable_stbip();
  ::std::string* release_stbip();
  void set_allocated_stbip(::std::string* stbip);

  // string entityType = 3;
  void clear_entitytype();
  static const int kEntityTypeFieldNumber = 3;
  const ::std::string& entitytype() const;
  void set_entitytype(const ::std::string& value);
  #if LANG_CXX11
  void set_entitytype(::std::string&& value);
  #endif
  void set_entitytype(const char* value);
  void set_entitytype(const char* value, size_t size);
  ::std::string* mutable_entitytype();
  ::std::string* release_entitytype();
  void set_allocated_entitytype(::std::string* entitytype);

  // string entityInstance = 4;
  void clear_entityinstance();
  static const int kEntityInstanceFieldNumber = 4;
  const ::std::string& entityinstance() const;
  void set_entityinstance(const ::std::string& value);
  #if LANG_CXX11
  void set_entityinstance(::std::string&& value);
  #endif
  void set_entityinstance(const char* value);
  void set_entityinstance(const char* value, size_t size);
  ::std::string* mutable_entityinstance();
  ::std::string* release_entityinstance();
  void set_allocated_entityinstance(::std::string* entityinstance);

  // string operDirect = 6;
  void clear_operdirect();
  static const int kOperDirectFieldNumber = 6;
  const ::std::string& operdirect() const;
  void set_operdirect(const ::std::string& value);
  #if LANG_CXX11
  void set_operdirect(::std::string&& value);
  #endif
  void set_operdirect(const char* value);
  void set_operdirect(const char* value, size_t size);
  ::std::string* mutable_operdirect();
  ::std::string* release_operdirect();
  void set_allocated_operdirect(::std::string* operdirect);

  // string operName = 7;
  void clear_opername();
  static const int kOperNameFieldNumber = 7;
  const ::std::string& opername() const;
  void set_opername(const ::std::string& value);
  #if LANG_CXX11
  void set_opername(::std::string&& value);
  #endif
  void set_opername(const char* value);
  void set_opername(const char* value, size_t size);
  ::std::string* mutable_opername();
  ::std::string* release_opername();
  void set_allocated_opername(::std::string* opername);

  // string operArgList = 8;
  void clear_operarglist();
  static const int kOperArgListFieldNumber = 8;
  const ::std::string& operarglist() const;
  void set_operarglist(const ::std::string& value);
  #if LANG_CXX11
  void set_operarglist(::std::string&& value);
  #endif
  void set_operarglist(const char* value);
  void set_operarglist(const char* value, size_t size);
  ::std::string* mutable_operarglist();
  ::std::string* release_operarglist();
  void set_allocated_operarglist(::std::string* operarglist);

  // string operRst = 9;
  void clear_operrst();
  static const int kOperRstFieldNumber = 9;
  const ::std::string& operrst() const;
  void set_operrst(const ::std::string& value);
  #if LANG_CXX11
  void set_operrst(::std::string&& value);
  #endif
  void set_operrst(const char* value);
  void set_operrst(const char* value, size_t size);
  ::std::string* mutable_operrst();
  ::std::string* release_operrst();
  void set_allocated_operrst(::std::string* operrst);

  // string operOccurTime = 10;
  void clear_operoccurtime();
  static const int kOperOccurTimeFieldNumber = 10;
  const ::std::string& operoccurtime() const;
  void set_operoccurtime(const ::std::string& value);
  #if LANG_CXX11
  void set_operoccurtime(::std::string&& value);
  #endif
  void set_operoccurtime(const char* value);
  void set_operoccurtime(const char* value, size_t size);
  ::std::string* mutable_operoccurtime();
  ::std::string* release_operoccurtime();
  void set_allocated_operoccurtime(::std::string* operoccurtime);

  // string desp = 11;
  void clear_desp();
  static const int kDespFieldNumber = 11;
  const ::std::string& desp() const;
  void set_desp(const ::std::string& value);
  #if LANG_CXX11
  void set_desp(::std::string&& value);
  #endif
  void set_desp(const char* value);
  void set_desp(const char* value, size_t size);
  ::std::string* mutable_desp();
  ::std::string* release_desp();
  void set_allocated_desp(::std::string* desp);

  // .com.fiberhome.fums.proto.EnumDefineData.AppTypeEnum appTypeCode = 5;
  void clear_apptypecode();
  static const int kAppTypeCodeFieldNumber = 5;
  ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum apptypecode() const;
  void set_apptypecode(::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum value);

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.StbInspectData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr messagetype_;
  ::google::protobuf::internal::ArenaStringPtr stbip_;
  ::google::protobuf::internal::ArenaStringPtr entitytype_;
  ::google::protobuf::internal::ArenaStringPtr entityinstance_;
  ::google::protobuf::internal::ArenaStringPtr operdirect_;
  ::google::protobuf::internal::ArenaStringPtr opername_;
  ::google::protobuf::internal::ArenaStringPtr operarglist_;
  ::google::protobuf::internal::ArenaStringPtr operrst_;
  ::google::protobuf::internal::ArenaStringPtr operoccurtime_;
  ::google::protobuf::internal::ArenaStringPtr desp_;
  int apptypecode_;
  mutable int _cached_size_;
  friend struct protobuf_StbInspect_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StbInspectData

// string messageType = 1;
inline void StbInspectData::clear_messagetype() {
  messagetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StbInspectData::messagetype() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.StbInspectData.messageType)
  return messagetype_.GetNoArena();
}
inline void StbInspectData::set_messagetype(const ::std::string& value) {
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.StbInspectData.messageType)
}
#if LANG_CXX11
inline void StbInspectData::set_messagetype(::std::string&& value) {
  
  messagetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.StbInspectData.messageType)
}
#endif
inline void StbInspectData::set_messagetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.StbInspectData.messageType)
}
inline void StbInspectData::set_messagetype(const char* value, size_t size) {
  
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.StbInspectData.messageType)
}
inline ::std::string* StbInspectData::mutable_messagetype() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.StbInspectData.messageType)
  return messagetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StbInspectData::release_messagetype() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.StbInspectData.messageType)
  
  return messagetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StbInspectData::set_allocated_messagetype(::std::string* messagetype) {
  if (messagetype != NULL) {
    
  } else {
    
  }
  messagetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagetype);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.StbInspectData.messageType)
}

// string stbIp = 2;
inline void StbInspectData::clear_stbip() {
  stbip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StbInspectData::stbip() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.StbInspectData.stbIp)
  return stbip_.GetNoArena();
}
inline void StbInspectData::set_stbip(const ::std::string& value) {
  
  stbip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.StbInspectData.stbIp)
}
#if LANG_CXX11
inline void StbInspectData::set_stbip(::std::string&& value) {
  
  stbip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.StbInspectData.stbIp)
}
#endif
inline void StbInspectData::set_stbip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stbip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.StbInspectData.stbIp)
}
inline void StbInspectData::set_stbip(const char* value, size_t size) {
  
  stbip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.StbInspectData.stbIp)
}
inline ::std::string* StbInspectData::mutable_stbip() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.StbInspectData.stbIp)
  return stbip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StbInspectData::release_stbip() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.StbInspectData.stbIp)
  
  return stbip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StbInspectData::set_allocated_stbip(::std::string* stbip) {
  if (stbip != NULL) {
    
  } else {
    
  }
  stbip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stbip);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.StbInspectData.stbIp)
}

// string entityType = 3;
inline void StbInspectData::clear_entitytype() {
  entitytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StbInspectData::entitytype() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.StbInspectData.entityType)
  return entitytype_.GetNoArena();
}
inline void StbInspectData::set_entitytype(const ::std::string& value) {
  
  entitytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.StbInspectData.entityType)
}
#if LANG_CXX11
inline void StbInspectData::set_entitytype(::std::string&& value) {
  
  entitytype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.StbInspectData.entityType)
}
#endif
inline void StbInspectData::set_entitytype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  entitytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.StbInspectData.entityType)
}
inline void StbInspectData::set_entitytype(const char* value, size_t size) {
  
  entitytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.StbInspectData.entityType)
}
inline ::std::string* StbInspectData::mutable_entitytype() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.StbInspectData.entityType)
  return entitytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StbInspectData::release_entitytype() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.StbInspectData.entityType)
  
  return entitytype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StbInspectData::set_allocated_entitytype(::std::string* entitytype) {
  if (entitytype != NULL) {
    
  } else {
    
  }
  entitytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entitytype);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.StbInspectData.entityType)
}

// string entityInstance = 4;
inline void StbInspectData::clear_entityinstance() {
  entityinstance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StbInspectData::entityinstance() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.StbInspectData.entityInstance)
  return entityinstance_.GetNoArena();
}
inline void StbInspectData::set_entityinstance(const ::std::string& value) {
  
  entityinstance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.StbInspectData.entityInstance)
}
#if LANG_CXX11
inline void StbInspectData::set_entityinstance(::std::string&& value) {
  
  entityinstance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.StbInspectData.entityInstance)
}
#endif
inline void StbInspectData::set_entityinstance(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  entityinstance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.StbInspectData.entityInstance)
}
inline void StbInspectData::set_entityinstance(const char* value, size_t size) {
  
  entityinstance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.StbInspectData.entityInstance)
}
inline ::std::string* StbInspectData::mutable_entityinstance() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.StbInspectData.entityInstance)
  return entityinstance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StbInspectData::release_entityinstance() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.StbInspectData.entityInstance)
  
  return entityinstance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StbInspectData::set_allocated_entityinstance(::std::string* entityinstance) {
  if (entityinstance != NULL) {
    
  } else {
    
  }
  entityinstance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entityinstance);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.StbInspectData.entityInstance)
}

// .com.fiberhome.fums.proto.EnumDefineData.AppTypeEnum appTypeCode = 5;
inline void StbInspectData::clear_apptypecode() {
  apptypecode_ = 0;
}
inline ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum StbInspectData::apptypecode() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.StbInspectData.appTypeCode)
  return static_cast< ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum >(apptypecode_);
}
inline void StbInspectData::set_apptypecode(::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum value) {
  
  apptypecode_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.StbInspectData.appTypeCode)
}

// string operDirect = 6;
inline void StbInspectData::clear_operdirect() {
  operdirect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StbInspectData::operdirect() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.StbInspectData.operDirect)
  return operdirect_.GetNoArena();
}
inline void StbInspectData::set_operdirect(const ::std::string& value) {
  
  operdirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.StbInspectData.operDirect)
}
#if LANG_CXX11
inline void StbInspectData::set_operdirect(::std::string&& value) {
  
  operdirect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.StbInspectData.operDirect)
}
#endif
inline void StbInspectData::set_operdirect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operdirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.StbInspectData.operDirect)
}
inline void StbInspectData::set_operdirect(const char* value, size_t size) {
  
  operdirect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.StbInspectData.operDirect)
}
inline ::std::string* StbInspectData::mutable_operdirect() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.StbInspectData.operDirect)
  return operdirect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StbInspectData::release_operdirect() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.StbInspectData.operDirect)
  
  return operdirect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StbInspectData::set_allocated_operdirect(::std::string* operdirect) {
  if (operdirect != NULL) {
    
  } else {
    
  }
  operdirect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operdirect);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.StbInspectData.operDirect)
}

// string operName = 7;
inline void StbInspectData::clear_opername() {
  opername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StbInspectData::opername() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.StbInspectData.operName)
  return opername_.GetNoArena();
}
inline void StbInspectData::set_opername(const ::std::string& value) {
  
  opername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.StbInspectData.operName)
}
#if LANG_CXX11
inline void StbInspectData::set_opername(::std::string&& value) {
  
  opername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.StbInspectData.operName)
}
#endif
inline void StbInspectData::set_opername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  opername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.StbInspectData.operName)
}
inline void StbInspectData::set_opername(const char* value, size_t size) {
  
  opername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.StbInspectData.operName)
}
inline ::std::string* StbInspectData::mutable_opername() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.StbInspectData.operName)
  return opername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StbInspectData::release_opername() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.StbInspectData.operName)
  
  return opername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StbInspectData::set_allocated_opername(::std::string* opername) {
  if (opername != NULL) {
    
  } else {
    
  }
  opername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opername);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.StbInspectData.operName)
}

// string operArgList = 8;
inline void StbInspectData::clear_operarglist() {
  operarglist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StbInspectData::operarglist() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.StbInspectData.operArgList)
  return operarglist_.GetNoArena();
}
inline void StbInspectData::set_operarglist(const ::std::string& value) {
  
  operarglist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.StbInspectData.operArgList)
}
#if LANG_CXX11
inline void StbInspectData::set_operarglist(::std::string&& value) {
  
  operarglist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.StbInspectData.operArgList)
}
#endif
inline void StbInspectData::set_operarglist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operarglist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.StbInspectData.operArgList)
}
inline void StbInspectData::set_operarglist(const char* value, size_t size) {
  
  operarglist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.StbInspectData.operArgList)
}
inline ::std::string* StbInspectData::mutable_operarglist() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.StbInspectData.operArgList)
  return operarglist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StbInspectData::release_operarglist() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.StbInspectData.operArgList)
  
  return operarglist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StbInspectData::set_allocated_operarglist(::std::string* operarglist) {
  if (operarglist != NULL) {
    
  } else {
    
  }
  operarglist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operarglist);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.StbInspectData.operArgList)
}

// string operRst = 9;
inline void StbInspectData::clear_operrst() {
  operrst_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StbInspectData::operrst() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.StbInspectData.operRst)
  return operrst_.GetNoArena();
}
inline void StbInspectData::set_operrst(const ::std::string& value) {
  
  operrst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.StbInspectData.operRst)
}
#if LANG_CXX11
inline void StbInspectData::set_operrst(::std::string&& value) {
  
  operrst_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.StbInspectData.operRst)
}
#endif
inline void StbInspectData::set_operrst(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operrst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.StbInspectData.operRst)
}
inline void StbInspectData::set_operrst(const char* value, size_t size) {
  
  operrst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.StbInspectData.operRst)
}
inline ::std::string* StbInspectData::mutable_operrst() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.StbInspectData.operRst)
  return operrst_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StbInspectData::release_operrst() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.StbInspectData.operRst)
  
  return operrst_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StbInspectData::set_allocated_operrst(::std::string* operrst) {
  if (operrst != NULL) {
    
  } else {
    
  }
  operrst_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operrst);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.StbInspectData.operRst)
}

// string operOccurTime = 10;
inline void StbInspectData::clear_operoccurtime() {
  operoccurtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StbInspectData::operoccurtime() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.StbInspectData.operOccurTime)
  return operoccurtime_.GetNoArena();
}
inline void StbInspectData::set_operoccurtime(const ::std::string& value) {
  
  operoccurtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.StbInspectData.operOccurTime)
}
#if LANG_CXX11
inline void StbInspectData::set_operoccurtime(::std::string&& value) {
  
  operoccurtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.StbInspectData.operOccurTime)
}
#endif
inline void StbInspectData::set_operoccurtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operoccurtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.StbInspectData.operOccurTime)
}
inline void StbInspectData::set_operoccurtime(const char* value, size_t size) {
  
  operoccurtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.StbInspectData.operOccurTime)
}
inline ::std::string* StbInspectData::mutable_operoccurtime() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.StbInspectData.operOccurTime)
  return operoccurtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StbInspectData::release_operoccurtime() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.StbInspectData.operOccurTime)
  
  return operoccurtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StbInspectData::set_allocated_operoccurtime(::std::string* operoccurtime) {
  if (operoccurtime != NULL) {
    
  } else {
    
  }
  operoccurtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operoccurtime);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.StbInspectData.operOccurTime)
}

// string desp = 11;
inline void StbInspectData::clear_desp() {
  desp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StbInspectData::desp() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.StbInspectData.desp)
  return desp_.GetNoArena();
}
inline void StbInspectData::set_desp(const ::std::string& value) {
  
  desp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.StbInspectData.desp)
}
#if LANG_CXX11
inline void StbInspectData::set_desp(::std::string&& value) {
  
  desp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.StbInspectData.desp)
}
#endif
inline void StbInspectData::set_desp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.StbInspectData.desp)
}
inline void StbInspectData::set_desp(const char* value, size_t size) {
  
  desp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.StbInspectData.desp)
}
inline ::std::string* StbInspectData::mutable_desp() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.StbInspectData.desp)
  return desp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StbInspectData::release_desp() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.StbInspectData.desp)
  
  return desp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StbInspectData::set_allocated_desp(::std::string* desp) {
  if (desp != NULL) {
    
  } else {
    
  }
  desp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desp);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.StbInspectData.desp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StbInspect_2eproto__INCLUDED

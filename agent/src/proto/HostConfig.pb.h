// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HostConfig.proto

#ifndef PROTOBUF_HostConfig_2eproto__INCLUDED
#define PROTOBUF_HostConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "RealQueryHostStatus.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace fiberhome {
namespace fums {
namespace proto {
class HostCfgSingleItem;
class HostCfgSingleItemDefaultTypeInternal;
extern HostCfgSingleItemDefaultTypeInternal _HostCfgSingleItem_default_instance_;
class HostConfigData;
class HostConfigDataDefaultTypeInternal;
extern HostConfigDataDefaultTypeInternal _HostConfigData_default_instance_;
}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

namespace com {
namespace fiberhome {
namespace fums {
namespace proto {

namespace protobuf_HostConfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_HostConfig_2eproto

// ===================================================================

class HostConfigData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.HostConfigData) */ {
 public:
  HostConfigData();
  virtual ~HostConfigData();

  HostConfigData(const HostConfigData& from);

  inline HostConfigData& operator=(const HostConfigData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HostConfigData(HostConfigData&& from) noexcept
    : HostConfigData() {
    *this = ::std::move(from);
  }

  inline HostConfigData& operator=(HostConfigData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HostConfigData& default_instance();

  static inline const HostConfigData* internal_default_instance() {
    return reinterpret_cast<const HostConfigData*>(
               &_HostConfigData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HostConfigData* other);
  friend void swap(HostConfigData& a, HostConfigData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HostConfigData* New() const PROTOBUF_FINAL { return New(NULL); }

  HostConfigData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HostConfigData& from);
  void MergeFrom(const HostConfigData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HostConfigData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.fiberhome.fums.proto.HostCfgSingleItem cfgItem = 1;
  int cfgitem_size() const;
  void clear_cfgitem();
  static const int kCfgItemFieldNumber = 1;
  const ::com::fiberhome::fums::proto::HostCfgSingleItem& cfgitem(int index) const;
  ::com::fiberhome::fums::proto::HostCfgSingleItem* mutable_cfgitem(int index);
  ::com::fiberhome::fums::proto::HostCfgSingleItem* add_cfgitem();
  ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::HostCfgSingleItem >*
      mutable_cfgitem();
  const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::HostCfgSingleItem >&
      cfgitem() const;

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.HostConfigData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::HostCfgSingleItem > cfgitem_;
  mutable int _cached_size_;
  friend struct protobuf_HostConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HostCfgSingleItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.HostCfgSingleItem) */ {
 public:
  HostCfgSingleItem();
  virtual ~HostCfgSingleItem();

  HostCfgSingleItem(const HostCfgSingleItem& from);

  inline HostCfgSingleItem& operator=(const HostCfgSingleItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HostCfgSingleItem(HostCfgSingleItem&& from) noexcept
    : HostCfgSingleItem() {
    *this = ::std::move(from);
  }

  inline HostCfgSingleItem& operator=(HostCfgSingleItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HostCfgSingleItem& default_instance();

  static inline const HostCfgSingleItem* internal_default_instance() {
    return reinterpret_cast<const HostCfgSingleItem*>(
               &_HostCfgSingleItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HostCfgSingleItem* other);
  friend void swap(HostCfgSingleItem& a, HostCfgSingleItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HostCfgSingleItem* New() const PROTOBUF_FINAL { return New(NULL); }

  HostCfgSingleItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HostCfgSingleItem& from);
  void MergeFrom(const HostCfgSingleItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HostCfgSingleItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .com.fiberhome.fums.proto.RealQueryHostStatusData.HostCfgTypeEnum upCfgType = 1;
  void clear_upcfgtype();
  static const int kUpCfgTypeFieldNumber = 1;
  ::com::fiberhome::fums::proto::RealQueryHostStatusData_HostCfgTypeEnum upcfgtype() const;
  void set_upcfgtype(::com::fiberhome::fums::proto::RealQueryHostStatusData_HostCfgTypeEnum value);

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.HostCfgSingleItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int upcfgtype_;
  mutable int _cached_size_;
  friend struct protobuf_HostConfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HostConfigData

// repeated .com.fiberhome.fums.proto.HostCfgSingleItem cfgItem = 1;
inline int HostConfigData::cfgitem_size() const {
  return cfgitem_.size();
}
inline void HostConfigData::clear_cfgitem() {
  cfgitem_.Clear();
}
inline const ::com::fiberhome::fums::proto::HostCfgSingleItem& HostConfigData::cfgitem(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.HostConfigData.cfgItem)
  return cfgitem_.Get(index);
}
inline ::com::fiberhome::fums::proto::HostCfgSingleItem* HostConfigData::mutable_cfgitem(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.HostConfigData.cfgItem)
  return cfgitem_.Mutable(index);
}
inline ::com::fiberhome::fums::proto::HostCfgSingleItem* HostConfigData::add_cfgitem() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.HostConfigData.cfgItem)
  return cfgitem_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::HostCfgSingleItem >*
HostConfigData::mutable_cfgitem() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.HostConfigData.cfgItem)
  return &cfgitem_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::HostCfgSingleItem >&
HostConfigData::cfgitem() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.HostConfigData.cfgItem)
  return cfgitem_;
}

// -------------------------------------------------------------------

// HostCfgSingleItem

// .com.fiberhome.fums.proto.RealQueryHostStatusData.HostCfgTypeEnum upCfgType = 1;
inline void HostCfgSingleItem::clear_upcfgtype() {
  upcfgtype_ = 0;
}
inline ::com::fiberhome::fums::proto::RealQueryHostStatusData_HostCfgTypeEnum HostCfgSingleItem::upcfgtype() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.HostCfgSingleItem.upCfgType)
  return static_cast< ::com::fiberhome::fums::proto::RealQueryHostStatusData_HostCfgTypeEnum >(upcfgtype_);
}
inline void HostCfgSingleItem::set_upcfgtype(::com::fiberhome::fums::proto::RealQueryHostStatusData_HostCfgTypeEnum value) {
  
  upcfgtype_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.HostCfgSingleItem.upCfgType)
}

// string data = 2;
inline void HostCfgSingleItem::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HostCfgSingleItem::data() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.HostCfgSingleItem.data)
  return data_.GetNoArena();
}
inline void HostCfgSingleItem::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.HostCfgSingleItem.data)
}
#if LANG_CXX11
inline void HostCfgSingleItem::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.HostCfgSingleItem.data)
}
#endif
inline void HostCfgSingleItem::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.HostCfgSingleItem.data)
}
inline void HostCfgSingleItem::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.HostCfgSingleItem.data)
}
inline ::std::string* HostCfgSingleItem::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.HostCfgSingleItem.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HostCfgSingleItem::release_data() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.HostCfgSingleItem.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HostCfgSingleItem::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.HostCfgSingleItem.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HostConfig_2eproto__INCLUDED

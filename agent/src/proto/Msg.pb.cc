// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace fiberhome {
namespace fums {
namespace proto {
class MajorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Major>
     _instance;
} _Major_default_instance_;
class HeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Header>
     _instance;
} _Header_default_instance_;

namespace protobuf_Msg_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Major, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Major, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Major, body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, rabbitmqinfo_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Major)},
  { 7, -1, sizeof(Header)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Major_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Header_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Msg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Major_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Major_default_instance_);_Header_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Header_default_instance_);_Major_default_instance_._instance.get_mutable()->header_ = const_cast< ::com::fiberhome::fums::proto::Header*>(
      ::com::fiberhome::fums::proto::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tMsg.proto\022\030com.fiberhome.fums.proto\"G\n"
      "\005Major\0220\n\006header\030\001 \001(\0132 .com.fiberhome.f"
      "ums.proto.Header\022\014\n\004body\030\002 \001(\t\"\330\003\n\006Heade"
      "r\022\014\n\004host\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\013\n\003seq\030\003 \001(\005"
      "\022\021\n\ttimestamp\030\004 \001(\003\022=\n\tdirection\030\005 \001(\0162*"
      ".com.fiberhome.fums.proto.Header.DIRECTI"
      "ON\0227\n\004type\030\006 \001(\0162).com.fiberhome.fums.pr"
      "oto.Header.DataType\022\024\n\014rabbitmqInfo\030\007 \001("
      "\t\"6\n\tDIRECTION\022\016\n\nAGENTOFUMS\020\000\022\016\n\nFUMSTO"
      "AGEN\020\001\022\t\n\005OTHER\020\002\"\315\001\n\010DataType\022\010\n\004PERF\020\000"
      "\022\t\n\005EVENT\020\001\022\007\n\003APP\020\002\022\r\n\tACS_EVENT\020\003\022\017\n\013S"
      "TB_INSPECT\020\004\022\014\n\010RESPONSE\020\005\022\r\n\tUPHOSTCFG\020"
      "\006\022\t\n\005ALARM\020d\022\013\n\006CONFIG\020\310\001\022\r\n\010CTRL_APP\020\311\001"
      "\022\r\n\010SOFTWARE\020\312\001\022\025\n\020REALQUERYHOSTCFG\020\313\001\022\r"
      "\n\010HASWITCH\020\314\001\022\n\n\005HEART\020\254\002B\037\n\030com.fiberho"
      "me.fums.protoB\003Msgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 626);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Msg.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Msg_2eproto

const ::google::protobuf::EnumDescriptor* Header_DIRECTION_descriptor() {
  protobuf_Msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Msg_2eproto::file_level_enum_descriptors[0];
}
bool Header_DIRECTION_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_DIRECTION Header::AGENTOFUMS;
const Header_DIRECTION Header::FUMSTOAGEN;
const Header_DIRECTION Header::OTHER;
const Header_DIRECTION Header::DIRECTION_MIN;
const Header_DIRECTION Header::DIRECTION_MAX;
const int Header::DIRECTION_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Header_DataType_descriptor() {
  protobuf_Msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Msg_2eproto::file_level_enum_descriptors[1];
}
bool Header_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 100:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 300:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Header_DataType Header::PERF;
const Header_DataType Header::EVENT;
const Header_DataType Header::APP;
const Header_DataType Header::ACS_EVENT;
const Header_DataType Header::STB_INSPECT;
const Header_DataType Header::RESPONSE;
const Header_DataType Header::UPHOSTCFG;
const Header_DataType Header::ALARM;
const Header_DataType Header::CONFIG;
const Header_DataType Header::CTRL_APP;
const Header_DataType Header::SOFTWARE;
const Header_DataType Header::REALQUERYHOSTCFG;
const Header_DataType Header::HASWITCH;
const Header_DataType Header::HEART;
const Header_DataType Header::DataType_MIN;
const Header_DataType Header::DataType_MAX;
const int Header::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Major::kHeaderFieldNumber;
const int Major::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Major::Major()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.Major)
}
Major::Major(const Major& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.body().size() > 0) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_header()) {
    header_ = new ::com::fiberhome::fums::proto::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.Major)
}

void Major::SharedCtor() {
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

Major::~Major() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.Major)
  SharedDtor();
}

void Major::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void Major::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Major::descriptor() {
  protobuf_Msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Major& Major::default_instance() {
  protobuf_Msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

Major* Major::New(::google::protobuf::Arena* arena) const {
  Major* n = new Major;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Major::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.Major)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool Major::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.Major)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fiberhome.fums.proto.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->body().data(), static_cast<int>(this->body().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.Major.body"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.Major)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.Major)
  return false;
#undef DO_
}

void Major::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.Major)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.fiberhome.fums.proto.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.Major.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.Major)
}

::google::protobuf::uint8* Major::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.Major)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.fiberhome.fums.proto.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // string body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->body().data(), static_cast<int>(this->body().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.Major.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->body(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.Major)
  return target;
}

size_t Major::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.Major)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());
  }

  // .com.fiberhome.fums.proto.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Major::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.Major)
  GOOGLE_DCHECK_NE(&from, this);
  const Major* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Major>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.Major)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.Major)
    MergeFrom(*source);
  }
}

void Major::MergeFrom(const Major& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.Major)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_header()) {
    mutable_header()->::com::fiberhome::fums::proto::Header::MergeFrom(from.header());
  }
}

void Major::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.Major)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Major::CopyFrom(const Major& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.Major)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Major::IsInitialized() const {
  return true;
}

void Major::Swap(Major* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Major::InternalSwap(Major* other) {
  using std::swap;
  body_.Swap(&other->body_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Major::GetMetadata() const {
  protobuf_Msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Major

// .com.fiberhome.fums.proto.Header header = 1;
bool Major::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void Major::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::com::fiberhome::fums::proto::Header& Major::header() const {
  const ::com::fiberhome::fums::proto::Header* p = header_;
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Major.header)
  return p != NULL ? *p : *reinterpret_cast<const ::com::fiberhome::fums::proto::Header*>(
      &::com::fiberhome::fums::proto::_Header_default_instance_);
}
::com::fiberhome::fums::proto::Header* Major::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::com::fiberhome::fums::proto::Header;
  }
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.Major.header)
  return header_;
}
::com::fiberhome::fums::proto::Header* Major::release_header() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.Major.header)
  
  ::com::fiberhome::fums::proto::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Major::set_allocated_header(::com::fiberhome::fums::proto::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.Major.header)
}

// string body = 2;
void Major::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Major::body() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Major.body)
  return body_.GetNoArena();
}
void Major::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Major.body)
}
#if LANG_CXX11
void Major::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.Major.body)
}
#endif
void Major::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.Major.body)
}
void Major::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.Major.body)
}
::std::string* Major::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.Major.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Major::release_body() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.Major.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Major::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.Major.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kHostFieldNumber;
const int Header::kIpFieldNumber;
const int Header::kSeqFieldNumber;
const int Header::kTimestampFieldNumber;
const int Header::kDirectionFieldNumber;
const int Header::kTypeFieldNumber;
const int Header::kRabbitmqInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  rabbitmqinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rabbitmqinfo().size() > 0) {
    rabbitmqinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rabbitmqinfo_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.Header)
}

void Header::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rabbitmqinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
  _cached_size_ = 0;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rabbitmqinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_Msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  protobuf_Msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rabbitmqinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.Header.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.Header.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 seq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fiberhome.fums.proto.Header.DIRECTION direction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::com::fiberhome::fums::proto::Header_DIRECTION >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fiberhome.fums.proto.Header.DataType type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::com::fiberhome::fums::proto::Header_DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rabbitmqInfo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rabbitmqinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rabbitmqinfo().data(), static_cast<int>(this->rabbitmqinfo().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.Header.rabbitmqInfo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.Header.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.Header.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // int32 seq = 3;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seq(), output);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // .com.fiberhome.fums.proto.Header.DIRECTION direction = 5;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->direction(), output);
  }

  // .com.fiberhome.fums.proto.Header.DataType type = 6;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // string rabbitmqInfo = 7;
  if (this->rabbitmqinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rabbitmqinfo().data(), static_cast<int>(this->rabbitmqinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.Header.rabbitmqInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->rabbitmqinfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.Header.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.Header.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // int32 seq = 3;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seq(), target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // .com.fiberhome.fums.proto.Header.DIRECTION direction = 5;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->direction(), target);
  }

  // .com.fiberhome.fums.proto.Header.DataType type = 6;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // string rabbitmqInfo = 7;
  if (this->rabbitmqinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rabbitmqinfo().data(), static_cast<int>(this->rabbitmqinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.Header.rabbitmqInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rabbitmqinfo(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.Header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string rabbitmqInfo = 7;
  if (this->rabbitmqinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rabbitmqinfo());
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());
  }

  // .com.fiberhome.fums.proto.Header.DIRECTION direction = 5;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // .com.fiberhome.fums.proto.Header.DataType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.rabbitmqinfo().size() > 0) {

    rabbitmqinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rabbitmqinfo_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  host_.Swap(&other->host_);
  ip_.Swap(&other->ip_);
  rabbitmqinfo_.Swap(&other->rabbitmqinfo_);
  swap(timestamp_, other->timestamp_);
  swap(seq_, other->seq_);
  swap(direction_, other->direction_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_Msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// string host = 1;
void Header::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::host() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Header.host)
  return host_.GetNoArena();
}
void Header::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Header.host)
}
#if LANG_CXX11
void Header::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.Header.host)
}
#endif
void Header::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.Header.host)
}
void Header::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.Header.host)
}
::std::string* Header::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.Header.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_host() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.Header.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.Header.host)
}

// string ip = 2;
void Header::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::ip() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Header.ip)
  return ip_.GetNoArena();
}
void Header::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Header.ip)
}
#if LANG_CXX11
void Header::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.Header.ip)
}
#endif
void Header::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.Header.ip)
}
void Header::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.Header.ip)
}
::std::string* Header::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.Header.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_ip() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.Header.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.Header.ip)
}

// int32 seq = 3;
void Header::clear_seq() {
  seq_ = 0;
}
::google::protobuf::int32 Header::seq() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Header.seq)
  return seq_;
}
void Header::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Header.seq)
}

// int64 timestamp = 4;
void Header::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Header::timestamp() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Header.timestamp)
  return timestamp_;
}
void Header::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Header.timestamp)
}

// .com.fiberhome.fums.proto.Header.DIRECTION direction = 5;
void Header::clear_direction() {
  direction_ = 0;
}
::com::fiberhome::fums::proto::Header_DIRECTION Header::direction() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Header.direction)
  return static_cast< ::com::fiberhome::fums::proto::Header_DIRECTION >(direction_);
}
void Header::set_direction(::com::fiberhome::fums::proto::Header_DIRECTION value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Header.direction)
}

// .com.fiberhome.fums.proto.Header.DataType type = 6;
void Header::clear_type() {
  type_ = 0;
}
::com::fiberhome::fums::proto::Header_DataType Header::type() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Header.type)
  return static_cast< ::com::fiberhome::fums::proto::Header_DataType >(type_);
}
void Header::set_type(::com::fiberhome::fums::proto::Header_DataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Header.type)
}

// string rabbitmqInfo = 7;
void Header::clear_rabbitmqinfo() {
  rabbitmqinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Header::rabbitmqinfo() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Header.rabbitmqInfo)
  return rabbitmqinfo_.GetNoArena();
}
void Header::set_rabbitmqinfo(const ::std::string& value) {
  
  rabbitmqinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Header.rabbitmqInfo)
}
#if LANG_CXX11
void Header::set_rabbitmqinfo(::std::string&& value) {
  
  rabbitmqinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.Header.rabbitmqInfo)
}
#endif
void Header::set_rabbitmqinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rabbitmqinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.Header.rabbitmqInfo)
}
void Header::set_rabbitmqinfo(const char* value, size_t size) {
  
  rabbitmqinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.Header.rabbitmqInfo)
}
::std::string* Header::mutable_rabbitmqinfo() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.Header.rabbitmqInfo)
  return rabbitmqinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_rabbitmqinfo() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.Header.rabbitmqInfo)
  
  return rabbitmqinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_rabbitmqinfo(::std::string* rabbitmqinfo) {
  if (rabbitmqinfo != NULL) {
    
  } else {
    
  }
  rabbitmqinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rabbitmqinfo);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.Header.rabbitmqInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

// @@protoc_insertion_point(global_scope)

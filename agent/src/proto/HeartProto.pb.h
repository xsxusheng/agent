// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HeartProto.proto

#ifndef PROTOBUF_HeartProto_2eproto__INCLUDED
#define PROTOBUF_HeartProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace proto {
class HeartData;
class HeartDataDefaultTypeInternal;
extern HeartDataDefaultTypeInternal _HeartData_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_HeartProto_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_HeartProto_2eproto

enum HeartData_HeartType {
  HeartData_HeartType_AGENT = 0,
  HeartData_HeartType_FUMS = 1,
  HeartData_HeartType_HeartData_HeartType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HeartData_HeartType_HeartData_HeartType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HeartData_HeartType_IsValid(int value);
const HeartData_HeartType HeartData_HeartType_HeartType_MIN = HeartData_HeartType_AGENT;
const HeartData_HeartType HeartData_HeartType_HeartType_MAX = HeartData_HeartType_FUMS;
const int HeartData_HeartType_HeartType_ARRAYSIZE = HeartData_HeartType_HeartType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HeartData_HeartType_descriptor();
inline const ::std::string& HeartData_HeartType_Name(HeartData_HeartType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HeartData_HeartType_descriptor(), value);
}
inline bool HeartData_HeartType_Parse(
    const ::std::string& name, HeartData_HeartType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HeartData_HeartType>(
    HeartData_HeartType_descriptor(), name, value);
}
// ===================================================================

class HeartData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HeartData) */ {
 public:
  HeartData();
  virtual ~HeartData();

  HeartData(const HeartData& from);

  inline HeartData& operator=(const HeartData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartData(HeartData&& from) noexcept
    : HeartData() {
    *this = ::std::move(from);
  }

  inline HeartData& operator=(HeartData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartData& default_instance();

  static inline const HeartData* internal_default_instance() {
    return reinterpret_cast<const HeartData*>(
               &_HeartData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HeartData* other);
  friend void swap(HeartData& a, HeartData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartData* New() const PROTOBUF_FINAL { return New(NULL); }

  HeartData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeartData& from);
  void MergeFrom(const HeartData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeartData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HeartData_HeartType HeartType;
  static const HeartType AGENT =
    HeartData_HeartType_AGENT;
  static const HeartType FUMS =
    HeartData_HeartType_FUMS;
  static inline bool HeartType_IsValid(int value) {
    return HeartData_HeartType_IsValid(value);
  }
  static const HeartType HeartType_MIN =
    HeartData_HeartType_HeartType_MIN;
  static const HeartType HeartType_MAX =
    HeartData_HeartType_HeartType_MAX;
  static const int HeartType_ARRAYSIZE =
    HeartData_HeartType_HeartType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  HeartType_descriptor() {
    return HeartData_HeartType_descriptor();
  }
  static inline const ::std::string& HeartType_Name(HeartType value) {
    return HeartData_HeartType_Name(value);
  }
  static inline bool HeartType_Parse(const ::std::string& name,
      HeartType* value) {
    return HeartData_HeartType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // int64 uniqueId = 1;
  void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 1;
  ::google::protobuf::int64 uniqueid() const;
  void set_uniqueid(::google::protobuf::int64 value);

  // .proto.HeartData.HeartType heartType = 3;
  void clear_hearttype();
  static const int kHeartTypeFieldNumber = 3;
  ::proto::HeartData_HeartType hearttype() const;
  void set_hearttype(::proto::HeartData_HeartType value);

  // @@protoc_insertion_point(class_scope:proto.HeartData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int64 uniqueid_;
  int hearttype_;
  mutable int _cached_size_;
  friend struct protobuf_HeartProto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HeartData

// int64 uniqueId = 1;
inline void HeartData::clear_uniqueid() {
  uniqueid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HeartData::uniqueid() const {
  // @@protoc_insertion_point(field_get:proto.HeartData.uniqueId)
  return uniqueid_;
}
inline void HeartData::set_uniqueid(::google::protobuf::int64 value) {
  
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:proto.HeartData.uniqueId)
}

// string msg = 2;
inline void HeartData::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartData::msg() const {
  // @@protoc_insertion_point(field_get:proto.HeartData.msg)
  return msg_.GetNoArena();
}
inline void HeartData::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.HeartData.msg)
}
#if LANG_CXX11
inline void HeartData::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.HeartData.msg)
}
#endif
inline void HeartData::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.HeartData.msg)
}
inline void HeartData::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.HeartData.msg)
}
inline ::std::string* HeartData::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:proto.HeartData.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartData::release_msg() {
  // @@protoc_insertion_point(field_release:proto.HeartData.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartData::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:proto.HeartData.msg)
}

// .proto.HeartData.HeartType heartType = 3;
inline void HeartData::clear_hearttype() {
  hearttype_ = 0;
}
inline ::proto::HeartData_HeartType HeartData::hearttype() const {
  // @@protoc_insertion_point(field_get:proto.HeartData.heartType)
  return static_cast< ::proto::HeartData_HeartType >(hearttype_);
}
inline void HeartData::set_hearttype(::proto::HeartData_HeartType value) {
  
  hearttype_ = value;
  // @@protoc_insertion_point(field_set:proto.HeartData.heartType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::HeartData_HeartType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::HeartData_HeartType>() {
  return ::proto::HeartData_HeartType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HeartProto_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommonDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace fiberhome {
namespace fums {
namespace proto {
class CommonResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CommonResponse>
     _instance;
} _CommonResponse_default_instance_;
class SingleNicPerfDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SingleNicPerfData>
     _instance;
} _SingleNicPerfData_default_instance_;
class EnumDefineDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EnumDefineData>
     _instance;
} _EnumDefineData_default_instance_;

namespace protobuf_CommonDefine_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, responsemsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, responsecode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicipaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicrxbytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nictxbytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicrxpackets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicrxdropped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicrxerrors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicrxframe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicrxoverruns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nictxpackets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nictxdropped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nictxerrors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nictxoverruns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicoutputbandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicinputbandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicrxbytesmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nictxbytesmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicrxspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nictxspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nicrxmaxspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleNicPerfData, nictxmaxspeed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumDefineData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(CommonResponse)},
  { 8, -1, sizeof(SingleNicPerfData)},
  { 35, -1, sizeof(EnumDefineData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommonResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SingleNicPerfData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnumDefineData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "CommonDefine.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CommonResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CommonResponse_default_instance_);_SingleNicPerfData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SingleNicPerfData_default_instance_);_EnumDefineData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EnumDefineData_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022CommonDefine.proto\022\030com.fiberhome.fums"
      ".proto\"\255\001\n\016CommonResponse\022\023\n\013responseMsg"
      "\030\001 \001(\t\022\024\n\014responseCode\030\002 \001(\005\022F\n\006status\030\003"
      " \001(\01626.com.fiberhome.fums.proto.CommonRe"
      "sponse.ResStatusEnum\"(\n\rResStatusEnum\022\013\n"
      "\007SUCCESS\020\000\022\n\n\006FAILED\020\001\"\363\003\n\021SingleNicPerf"
      "Data\022\017\n\007nicName\030\001 \001(\t\022\024\n\014nicIpAddress\030\002 "
      "\001(\t\022\020\n\010nicSpeed\030\003 \001(\t\022\022\n\nnicRxBytes\030\004 \001("
      "\003\022\022\n\nnicTxBytes\030\005 \001(\003\022\024\n\014nicRxPackets\030\006 "
      "\001(\003\022\024\n\014nicRxDropped\030\007 \001(\003\022\023\n\013nicRxErrors"
      "\030\010 \001(\003\022\022\n\nnicRxFrame\030\t \001(\003\022\025\n\rnicRxOverr"
      "uns\030\n \001(\003\022\024\n\014nicTxPackets\030\013 \001(\003\022\024\n\014nicTx"
      "Dropped\030\014 \001(\003\022\023\n\013nicTxErrors\030\r \001(\003\022\025\n\rni"
      "cTxOverruns\030\016 \001(\003\022\032\n\022nicOutputBandWidth\030"
      "\017 \001(\005\022\031\n\021nicInputBandWidth\030\020 \001(\005\022\025\n\rnicR"
      "xBytesMax\030\021 \001(\003\022\025\n\rnicTxBytesMax\030\022 \001(\003\022\022"
      "\n\nnicRxSpeed\030\023 \001(\003\022\022\n\nnicTxSpeed\030\024 \001(\003\022\025"
      "\n\rnicRxMaxSpeed\030\025 \001(\003\022\025\n\rnicTxMaxSpeed\030\026"
      " \001(\003\"\375\004\n\016EnumDefineData\"\352\004\n\013AppTypeEnum\022"
      "\010\n\004GSLB\020\000\022\006\n\002SS\020\001\022\007\n\003EPG\020\002\022\n\n\006EPG_DB\020\003\022\r"
      "\n\tEPG_CACHE\020\004\022\013\n\007EPG_WEB\020\005\022\n\n\006EPG_LB\020\006\022\n"
      "\n\006EPG_HA\020\007\022\013\n\007EPG_LOG\020\010\022\r\n\tEPG_RSYNC\020\t\022\013"
      "\n\007ACS_WEB\020\n\022\n\n\006ACS_HA\020\013\022\n\n\006ACS_LB\020\014\022\007\n\003A"
      "CS\020\r\022\013\n\007ACS_ALL\020\016\022\007\n\003AAA\020\017\022\013\n\007AAA_WEB\020\020\022"
      "\n\n\006AAA_HA\020\021\022\n\n\006AAA_LB\020\022\022\013\n\007AAA_ALL\020\023\022\t\n\005"
      "VODLD\020\024\022\010\n\004TVLD\020\025\022\r\n\tTVLD_TVLD\020\026\022\r\n\tTVLD"
      "_TLCC\020\027\022\007\n\003VCC\020\030\022\006\n\002MW\020\031\022\t\n\005MW_MA\020\032\022\n\n\006M"
      "W_OSS\020\033\022\014\n\010MW_JBOSS\020\034\022\t\n\005MW_HA\020\035\022\006\n\002DB\020\036"
      "\022\t\n\005DB_HA\020\037\022\n\n\006PC_EPG\020 \022\007\n\003ADS\020!\022\007\n\003RRS\020"
      "\"\022\n\n\006RRS_HA\020#\022\007\n\003CMM\020$\022\t\n\005CMMD2\020%\022\007\n\003TMS"
      "\020&\022\007\n\003CMS\020\'\022\007\n\003ESS\020(\022\007\n\003OSS\020)\022\010\n\004TCMS\020*\022"
      "\010\n\004TVMS\020+\022\t\n\005NGINX\020,\022\t\n\005EPG4K\020-\022\010\n\004TVGW\020"
      ".\022\007\n\003CSD\020/\022\007\n\003LRS\0200\022\007\n\003LCM\0201\022\007\n\003CSP\0202\022\007\n"
      "\003CSV\0203\022\007\n\003DRS\0204\022\007\n\003CSX\0205\022\007\n\003CSJ\0206\022\t\n\005AGE"
      "NT\0207B(\n\030com.fiberhome.fums.protoB\014Common"
      "Defineb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1414);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommonDefine.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_CommonDefine_2eproto

const ::google::protobuf::EnumDescriptor* CommonResponse_ResStatusEnum_descriptor() {
  protobuf_CommonDefine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonDefine_2eproto::file_level_enum_descriptors[0];
}
bool CommonResponse_ResStatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommonResponse_ResStatusEnum CommonResponse::SUCCESS;
const CommonResponse_ResStatusEnum CommonResponse::FAILED;
const CommonResponse_ResStatusEnum CommonResponse::ResStatusEnum_MIN;
const CommonResponse_ResStatusEnum CommonResponse::ResStatusEnum_MAX;
const int CommonResponse::ResStatusEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EnumDefineData_AppTypeEnum_descriptor() {
  protobuf_CommonDefine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonDefine_2eproto::file_level_enum_descriptors[1];
}
bool EnumDefineData_AppTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EnumDefineData_AppTypeEnum EnumDefineData::GSLB;
const EnumDefineData_AppTypeEnum EnumDefineData::SS;
const EnumDefineData_AppTypeEnum EnumDefineData::EPG;
const EnumDefineData_AppTypeEnum EnumDefineData::EPG_DB;
const EnumDefineData_AppTypeEnum EnumDefineData::EPG_CACHE;
const EnumDefineData_AppTypeEnum EnumDefineData::EPG_WEB;
const EnumDefineData_AppTypeEnum EnumDefineData::EPG_LB;
const EnumDefineData_AppTypeEnum EnumDefineData::EPG_HA;
const EnumDefineData_AppTypeEnum EnumDefineData::EPG_LOG;
const EnumDefineData_AppTypeEnum EnumDefineData::EPG_RSYNC;
const EnumDefineData_AppTypeEnum EnumDefineData::ACS_WEB;
const EnumDefineData_AppTypeEnum EnumDefineData::ACS_HA;
const EnumDefineData_AppTypeEnum EnumDefineData::ACS_LB;
const EnumDefineData_AppTypeEnum EnumDefineData::ACS;
const EnumDefineData_AppTypeEnum EnumDefineData::ACS_ALL;
const EnumDefineData_AppTypeEnum EnumDefineData::AAA;
const EnumDefineData_AppTypeEnum EnumDefineData::AAA_WEB;
const EnumDefineData_AppTypeEnum EnumDefineData::AAA_HA;
const EnumDefineData_AppTypeEnum EnumDefineData::AAA_LB;
const EnumDefineData_AppTypeEnum EnumDefineData::AAA_ALL;
const EnumDefineData_AppTypeEnum EnumDefineData::VODLD;
const EnumDefineData_AppTypeEnum EnumDefineData::TVLD;
const EnumDefineData_AppTypeEnum EnumDefineData::TVLD_TVLD;
const EnumDefineData_AppTypeEnum EnumDefineData::TVLD_TLCC;
const EnumDefineData_AppTypeEnum EnumDefineData::VCC;
const EnumDefineData_AppTypeEnum EnumDefineData::MW;
const EnumDefineData_AppTypeEnum EnumDefineData::MW_MA;
const EnumDefineData_AppTypeEnum EnumDefineData::MW_OSS;
const EnumDefineData_AppTypeEnum EnumDefineData::MW_JBOSS;
const EnumDefineData_AppTypeEnum EnumDefineData::MW_HA;
const EnumDefineData_AppTypeEnum EnumDefineData::DB;
const EnumDefineData_AppTypeEnum EnumDefineData::DB_HA;
const EnumDefineData_AppTypeEnum EnumDefineData::PC_EPG;
const EnumDefineData_AppTypeEnum EnumDefineData::ADS;
const EnumDefineData_AppTypeEnum EnumDefineData::RRS;
const EnumDefineData_AppTypeEnum EnumDefineData::RRS_HA;
const EnumDefineData_AppTypeEnum EnumDefineData::CMM;
const EnumDefineData_AppTypeEnum EnumDefineData::CMMD2;
const EnumDefineData_AppTypeEnum EnumDefineData::TMS;
const EnumDefineData_AppTypeEnum EnumDefineData::CMS;
const EnumDefineData_AppTypeEnum EnumDefineData::ESS;
const EnumDefineData_AppTypeEnum EnumDefineData::OSS;
const EnumDefineData_AppTypeEnum EnumDefineData::TCMS;
const EnumDefineData_AppTypeEnum EnumDefineData::TVMS;
const EnumDefineData_AppTypeEnum EnumDefineData::NGINX;
const EnumDefineData_AppTypeEnum EnumDefineData::EPG4K;
const EnumDefineData_AppTypeEnum EnumDefineData::TVGW;
const EnumDefineData_AppTypeEnum EnumDefineData::CSD;
const EnumDefineData_AppTypeEnum EnumDefineData::LRS;
const EnumDefineData_AppTypeEnum EnumDefineData::LCM;
const EnumDefineData_AppTypeEnum EnumDefineData::CSP;
const EnumDefineData_AppTypeEnum EnumDefineData::CSV;
const EnumDefineData_AppTypeEnum EnumDefineData::DRS;
const EnumDefineData_AppTypeEnum EnumDefineData::CSX;
const EnumDefineData_AppTypeEnum EnumDefineData::CSJ;
const EnumDefineData_AppTypeEnum EnumDefineData::AGENT;
const EnumDefineData_AppTypeEnum EnumDefineData::AppTypeEnum_MIN;
const EnumDefineData_AppTypeEnum EnumDefineData::AppTypeEnum_MAX;
const int EnumDefineData::AppTypeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonResponse::kResponseMsgFieldNumber;
const int CommonResponse::kResponseCodeFieldNumber;
const int CommonResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonResponse::CommonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommonDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.CommonResponse)
}
CommonResponse::CommonResponse(const CommonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  responsemsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.responsemsg().size() > 0) {
    responsemsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.responsemsg_);
  }
  ::memcpy(&responsecode_, &from.responsecode_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&responsecode_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.CommonResponse)
}

void CommonResponse::SharedCtor() {
  responsemsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&responsecode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&responsecode_)) + sizeof(status_));
  _cached_size_ = 0;
}

CommonResponse::~CommonResponse() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.CommonResponse)
  SharedDtor();
}

void CommonResponse::SharedDtor() {
  responsemsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonResponse::descriptor() {
  protobuf_CommonDefine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonDefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonResponse& CommonResponse::default_instance() {
  protobuf_CommonDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommonResponse* CommonResponse::New(::google::protobuf::Arena* arena) const {
  CommonResponse* n = new CommonResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.CommonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responsemsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&responsecode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&responsecode_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

bool CommonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.CommonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string responseMsg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_responsemsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->responsemsg().data(), static_cast<int>(this->responsemsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.CommonResponse.responseMsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 responseCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &responsecode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fiberhome.fums.proto.CommonResponse.ResStatusEnum status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::com::fiberhome::fums::proto::CommonResponse_ResStatusEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.CommonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.CommonResponse)
  return false;
#undef DO_
}

void CommonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.CommonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string responseMsg = 1;
  if (this->responsemsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->responsemsg().data(), static_cast<int>(this->responsemsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.CommonResponse.responseMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->responsemsg(), output);
  }

  // int32 responseCode = 2;
  if (this->responsecode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->responsecode(), output);
  }

  // .com.fiberhome.fums.proto.CommonResponse.ResStatusEnum status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.CommonResponse)
}

::google::protobuf::uint8* CommonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.CommonResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string responseMsg = 1;
  if (this->responsemsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->responsemsg().data(), static_cast<int>(this->responsemsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.CommonResponse.responseMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->responsemsg(), target);
  }

  // int32 responseCode = 2;
  if (this->responsecode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->responsecode(), target);
  }

  // .com.fiberhome.fums.proto.CommonResponse.ResStatusEnum status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.CommonResponse)
  return target;
}

size_t CommonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.CommonResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string responseMsg = 1;
  if (this->responsemsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->responsemsg());
  }

  // int32 responseCode = 2;
  if (this->responsecode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->responsecode());
  }

  // .com.fiberhome.fums.proto.CommonResponse.ResStatusEnum status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.CommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.CommonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.CommonResponse)
    MergeFrom(*source);
  }
}

void CommonResponse::MergeFrom(const CommonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.CommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.responsemsg().size() > 0) {

    responsemsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.responsemsg_);
  }
  if (from.responsecode() != 0) {
    set_responsecode(from.responsecode());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void CommonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.CommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResponse::CopyFrom(const CommonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.CommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResponse::IsInitialized() const {
  return true;
}

void CommonResponse::Swap(CommonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonResponse::InternalSwap(CommonResponse* other) {
  using std::swap;
  responsemsg_.Swap(&other->responsemsg_);
  swap(responsecode_, other->responsecode_);
  swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonResponse::GetMetadata() const {
  protobuf_CommonDefine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonDefine_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonResponse

// string responseMsg = 1;
void CommonResponse::clear_responsemsg() {
  responsemsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommonResponse::responsemsg() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.CommonResponse.responseMsg)
  return responsemsg_.GetNoArena();
}
void CommonResponse::set_responsemsg(const ::std::string& value) {
  
  responsemsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.CommonResponse.responseMsg)
}
#if LANG_CXX11
void CommonResponse::set_responsemsg(::std::string&& value) {
  
  responsemsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.CommonResponse.responseMsg)
}
#endif
void CommonResponse::set_responsemsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsemsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.CommonResponse.responseMsg)
}
void CommonResponse::set_responsemsg(const char* value, size_t size) {
  
  responsemsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.CommonResponse.responseMsg)
}
::std::string* CommonResponse::mutable_responsemsg() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.CommonResponse.responseMsg)
  return responsemsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommonResponse::release_responsemsg() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.CommonResponse.responseMsg)
  
  return responsemsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommonResponse::set_allocated_responsemsg(::std::string* responsemsg) {
  if (responsemsg != NULL) {
    
  } else {
    
  }
  responsemsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsemsg);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.CommonResponse.responseMsg)
}

// int32 responseCode = 2;
void CommonResponse::clear_responsecode() {
  responsecode_ = 0;
}
::google::protobuf::int32 CommonResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.CommonResponse.responseCode)
  return responsecode_;
}
void CommonResponse::set_responsecode(::google::protobuf::int32 value) {
  
  responsecode_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.CommonResponse.responseCode)
}

// .com.fiberhome.fums.proto.CommonResponse.ResStatusEnum status = 3;
void CommonResponse::clear_status() {
  status_ = 0;
}
::com::fiberhome::fums::proto::CommonResponse_ResStatusEnum CommonResponse::status() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.CommonResponse.status)
  return static_cast< ::com::fiberhome::fums::proto::CommonResponse_ResStatusEnum >(status_);
}
void CommonResponse::set_status(::com::fiberhome::fums::proto::CommonResponse_ResStatusEnum value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.CommonResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleNicPerfData::kNicNameFieldNumber;
const int SingleNicPerfData::kNicIpAddressFieldNumber;
const int SingleNicPerfData::kNicSpeedFieldNumber;
const int SingleNicPerfData::kNicRxBytesFieldNumber;
const int SingleNicPerfData::kNicTxBytesFieldNumber;
const int SingleNicPerfData::kNicRxPacketsFieldNumber;
const int SingleNicPerfData::kNicRxDroppedFieldNumber;
const int SingleNicPerfData::kNicRxErrorsFieldNumber;
const int SingleNicPerfData::kNicRxFrameFieldNumber;
const int SingleNicPerfData::kNicRxOverrunsFieldNumber;
const int SingleNicPerfData::kNicTxPacketsFieldNumber;
const int SingleNicPerfData::kNicTxDroppedFieldNumber;
const int SingleNicPerfData::kNicTxErrorsFieldNumber;
const int SingleNicPerfData::kNicTxOverrunsFieldNumber;
const int SingleNicPerfData::kNicOutputBandWidthFieldNumber;
const int SingleNicPerfData::kNicInputBandWidthFieldNumber;
const int SingleNicPerfData::kNicRxBytesMaxFieldNumber;
const int SingleNicPerfData::kNicTxBytesMaxFieldNumber;
const int SingleNicPerfData::kNicRxSpeedFieldNumber;
const int SingleNicPerfData::kNicTxSpeedFieldNumber;
const int SingleNicPerfData::kNicRxMaxSpeedFieldNumber;
const int SingleNicPerfData::kNicTxMaxSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleNicPerfData::SingleNicPerfData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommonDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.SingleNicPerfData)
}
SingleNicPerfData::SingleNicPerfData(const SingleNicPerfData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nicname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nicname().size() > 0) {
    nicname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nicname_);
  }
  nicipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nicipaddress().size() > 0) {
    nicipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nicipaddress_);
  }
  nicspeed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nicspeed().size() > 0) {
    nicspeed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nicspeed_);
  }
  ::memcpy(&nicrxbytes_, &from.nicrxbytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&nictxmaxspeed_) -
    reinterpret_cast<char*>(&nicrxbytes_)) + sizeof(nictxmaxspeed_));
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.SingleNicPerfData)
}

void SingleNicPerfData::SharedCtor() {
  nicname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nicipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nicspeed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nicrxbytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nictxmaxspeed_) -
      reinterpret_cast<char*>(&nicrxbytes_)) + sizeof(nictxmaxspeed_));
  _cached_size_ = 0;
}

SingleNicPerfData::~SingleNicPerfData() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.SingleNicPerfData)
  SharedDtor();
}

void SingleNicPerfData::SharedDtor() {
  nicname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nicipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nicspeed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SingleNicPerfData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleNicPerfData::descriptor() {
  protobuf_CommonDefine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonDefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleNicPerfData& SingleNicPerfData::default_instance() {
  protobuf_CommonDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

SingleNicPerfData* SingleNicPerfData::New(::google::protobuf::Arena* arena) const {
  SingleNicPerfData* n = new SingleNicPerfData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleNicPerfData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.SingleNicPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nicname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nicipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nicspeed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nicrxbytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nictxmaxspeed_) -
      reinterpret_cast<char*>(&nicrxbytes_)) + sizeof(nictxmaxspeed_));
  _internal_metadata_.Clear();
}

bool SingleNicPerfData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.SingleNicPerfData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string nicName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nicname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nicname().data(), static_cast<int>(this->nicname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.SingleNicPerfData.nicName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nicIpAddress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nicipaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nicipaddress().data(), static_cast<int>(this->nicipaddress().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nicSpeed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nicspeed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nicspeed().data(), static_cast<int>(this->nicspeed().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicRxBytes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nicrxbytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicTxBytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nictxbytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicRxPackets = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nicrxpackets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicRxDropped = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nicrxdropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicRxErrors = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nicrxerrors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicRxFrame = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nicrxframe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicRxOverruns = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nicrxoverruns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicTxPackets = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nictxpackets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicTxDropped = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nictxdropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicTxErrors = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nictxerrors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicTxOverruns = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nictxoverruns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nicOutputBandWidth = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nicoutputbandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nicInputBandWidth = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nicinputbandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicRxBytesMax = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nicrxbytesmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicTxBytesMax = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nictxbytesmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicRxSpeed = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nicrxspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicTxSpeed = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nictxspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicRxMaxSpeed = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nicrxmaxspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nicTxMaxSpeed = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nictxmaxspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.SingleNicPerfData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.SingleNicPerfData)
  return false;
#undef DO_
}

void SingleNicPerfData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.SingleNicPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nicName = 1;
  if (this->nicname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nicname().data(), static_cast<int>(this->nicname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleNicPerfData.nicName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nicname(), output);
  }

  // string nicIpAddress = 2;
  if (this->nicipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nicipaddress().data(), static_cast<int>(this->nicipaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nicipaddress(), output);
  }

  // string nicSpeed = 3;
  if (this->nicspeed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nicspeed().data(), static_cast<int>(this->nicspeed().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nicspeed(), output);
  }

  // int64 nicRxBytes = 4;
  if (this->nicrxbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->nicrxbytes(), output);
  }

  // int64 nicTxBytes = 5;
  if (this->nictxbytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->nictxbytes(), output);
  }

  // int64 nicRxPackets = 6;
  if (this->nicrxpackets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->nicrxpackets(), output);
  }

  // int64 nicRxDropped = 7;
  if (this->nicrxdropped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->nicrxdropped(), output);
  }

  // int64 nicRxErrors = 8;
  if (this->nicrxerrors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->nicrxerrors(), output);
  }

  // int64 nicRxFrame = 9;
  if (this->nicrxframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->nicrxframe(), output);
  }

  // int64 nicRxOverruns = 10;
  if (this->nicrxoverruns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->nicrxoverruns(), output);
  }

  // int64 nicTxPackets = 11;
  if (this->nictxpackets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->nictxpackets(), output);
  }

  // int64 nicTxDropped = 12;
  if (this->nictxdropped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->nictxdropped(), output);
  }

  // int64 nicTxErrors = 13;
  if (this->nictxerrors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->nictxerrors(), output);
  }

  // int64 nicTxOverruns = 14;
  if (this->nictxoverruns() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->nictxoverruns(), output);
  }

  // int32 nicOutputBandWidth = 15;
  if (this->nicoutputbandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->nicoutputbandwidth(), output);
  }

  // int32 nicInputBandWidth = 16;
  if (this->nicinputbandwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->nicinputbandwidth(), output);
  }

  // int64 nicRxBytesMax = 17;
  if (this->nicrxbytesmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->nicrxbytesmax(), output);
  }

  // int64 nicTxBytesMax = 18;
  if (this->nictxbytesmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->nictxbytesmax(), output);
  }

  // int64 nicRxSpeed = 19;
  if (this->nicrxspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->nicrxspeed(), output);
  }

  // int64 nicTxSpeed = 20;
  if (this->nictxspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->nictxspeed(), output);
  }

  // int64 nicRxMaxSpeed = 21;
  if (this->nicrxmaxspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->nicrxmaxspeed(), output);
  }

  // int64 nicTxMaxSpeed = 22;
  if (this->nictxmaxspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->nictxmaxspeed(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.SingleNicPerfData)
}

::google::protobuf::uint8* SingleNicPerfData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.SingleNicPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nicName = 1;
  if (this->nicname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nicname().data(), static_cast<int>(this->nicname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleNicPerfData.nicName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nicname(), target);
  }

  // string nicIpAddress = 2;
  if (this->nicipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nicipaddress().data(), static_cast<int>(this->nicipaddress().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nicipaddress(), target);
  }

  // string nicSpeed = 3;
  if (this->nicspeed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nicspeed().data(), static_cast<int>(this->nicspeed().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nicspeed(), target);
  }

  // int64 nicRxBytes = 4;
  if (this->nicrxbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->nicrxbytes(), target);
  }

  // int64 nicTxBytes = 5;
  if (this->nictxbytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->nictxbytes(), target);
  }

  // int64 nicRxPackets = 6;
  if (this->nicrxpackets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->nicrxpackets(), target);
  }

  // int64 nicRxDropped = 7;
  if (this->nicrxdropped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->nicrxdropped(), target);
  }

  // int64 nicRxErrors = 8;
  if (this->nicrxerrors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->nicrxerrors(), target);
  }

  // int64 nicRxFrame = 9;
  if (this->nicrxframe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->nicrxframe(), target);
  }

  // int64 nicRxOverruns = 10;
  if (this->nicrxoverruns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->nicrxoverruns(), target);
  }

  // int64 nicTxPackets = 11;
  if (this->nictxpackets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->nictxpackets(), target);
  }

  // int64 nicTxDropped = 12;
  if (this->nictxdropped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->nictxdropped(), target);
  }

  // int64 nicTxErrors = 13;
  if (this->nictxerrors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->nictxerrors(), target);
  }

  // int64 nicTxOverruns = 14;
  if (this->nictxoverruns() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->nictxoverruns(), target);
  }

  // int32 nicOutputBandWidth = 15;
  if (this->nicoutputbandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->nicoutputbandwidth(), target);
  }

  // int32 nicInputBandWidth = 16;
  if (this->nicinputbandwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->nicinputbandwidth(), target);
  }

  // int64 nicRxBytesMax = 17;
  if (this->nicrxbytesmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->nicrxbytesmax(), target);
  }

  // int64 nicTxBytesMax = 18;
  if (this->nictxbytesmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->nictxbytesmax(), target);
  }

  // int64 nicRxSpeed = 19;
  if (this->nicrxspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->nicrxspeed(), target);
  }

  // int64 nicTxSpeed = 20;
  if (this->nictxspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->nictxspeed(), target);
  }

  // int64 nicRxMaxSpeed = 21;
  if (this->nicrxmaxspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->nicrxmaxspeed(), target);
  }

  // int64 nicTxMaxSpeed = 22;
  if (this->nictxmaxspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->nictxmaxspeed(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.SingleNicPerfData)
  return target;
}

size_t SingleNicPerfData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.SingleNicPerfData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string nicName = 1;
  if (this->nicname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nicname());
  }

  // string nicIpAddress = 2;
  if (this->nicipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nicipaddress());
  }

  // string nicSpeed = 3;
  if (this->nicspeed().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nicspeed());
  }

  // int64 nicRxBytes = 4;
  if (this->nicrxbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nicrxbytes());
  }

  // int64 nicTxBytes = 5;
  if (this->nictxbytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nictxbytes());
  }

  // int64 nicRxPackets = 6;
  if (this->nicrxpackets() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nicrxpackets());
  }

  // int64 nicRxDropped = 7;
  if (this->nicrxdropped() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nicrxdropped());
  }

  // int64 nicRxErrors = 8;
  if (this->nicrxerrors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nicrxerrors());
  }

  // int64 nicRxFrame = 9;
  if (this->nicrxframe() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nicrxframe());
  }

  // int64 nicRxOverruns = 10;
  if (this->nicrxoverruns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nicrxoverruns());
  }

  // int64 nicTxPackets = 11;
  if (this->nictxpackets() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nictxpackets());
  }

  // int64 nicTxDropped = 12;
  if (this->nictxdropped() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nictxdropped());
  }

  // int64 nicTxErrors = 13;
  if (this->nictxerrors() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nictxerrors());
  }

  // int64 nicTxOverruns = 14;
  if (this->nictxoverruns() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nictxoverruns());
  }

  // int32 nicOutputBandWidth = 15;
  if (this->nicoutputbandwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nicoutputbandwidth());
  }

  // int32 nicInputBandWidth = 16;
  if (this->nicinputbandwidth() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nicinputbandwidth());
  }

  // int64 nicRxBytesMax = 17;
  if (this->nicrxbytesmax() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nicrxbytesmax());
  }

  // int64 nicTxBytesMax = 18;
  if (this->nictxbytesmax() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nictxbytesmax());
  }

  // int64 nicRxSpeed = 19;
  if (this->nicrxspeed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nicrxspeed());
  }

  // int64 nicTxSpeed = 20;
  if (this->nictxspeed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nictxspeed());
  }

  // int64 nicRxMaxSpeed = 21;
  if (this->nicrxmaxspeed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nicrxmaxspeed());
  }

  // int64 nicTxMaxSpeed = 22;
  if (this->nictxmaxspeed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nictxmaxspeed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleNicPerfData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.SingleNicPerfData)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleNicPerfData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleNicPerfData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.SingleNicPerfData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.SingleNicPerfData)
    MergeFrom(*source);
  }
}

void SingleNicPerfData::MergeFrom(const SingleNicPerfData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.SingleNicPerfData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nicname().size() > 0) {

    nicname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nicname_);
  }
  if (from.nicipaddress().size() > 0) {

    nicipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nicipaddress_);
  }
  if (from.nicspeed().size() > 0) {

    nicspeed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nicspeed_);
  }
  if (from.nicrxbytes() != 0) {
    set_nicrxbytes(from.nicrxbytes());
  }
  if (from.nictxbytes() != 0) {
    set_nictxbytes(from.nictxbytes());
  }
  if (from.nicrxpackets() != 0) {
    set_nicrxpackets(from.nicrxpackets());
  }
  if (from.nicrxdropped() != 0) {
    set_nicrxdropped(from.nicrxdropped());
  }
  if (from.nicrxerrors() != 0) {
    set_nicrxerrors(from.nicrxerrors());
  }
  if (from.nicrxframe() != 0) {
    set_nicrxframe(from.nicrxframe());
  }
  if (from.nicrxoverruns() != 0) {
    set_nicrxoverruns(from.nicrxoverruns());
  }
  if (from.nictxpackets() != 0) {
    set_nictxpackets(from.nictxpackets());
  }
  if (from.nictxdropped() != 0) {
    set_nictxdropped(from.nictxdropped());
  }
  if (from.nictxerrors() != 0) {
    set_nictxerrors(from.nictxerrors());
  }
  if (from.nictxoverruns() != 0) {
    set_nictxoverruns(from.nictxoverruns());
  }
  if (from.nicoutputbandwidth() != 0) {
    set_nicoutputbandwidth(from.nicoutputbandwidth());
  }
  if (from.nicinputbandwidth() != 0) {
    set_nicinputbandwidth(from.nicinputbandwidth());
  }
  if (from.nicrxbytesmax() != 0) {
    set_nicrxbytesmax(from.nicrxbytesmax());
  }
  if (from.nictxbytesmax() != 0) {
    set_nictxbytesmax(from.nictxbytesmax());
  }
  if (from.nicrxspeed() != 0) {
    set_nicrxspeed(from.nicrxspeed());
  }
  if (from.nictxspeed() != 0) {
    set_nictxspeed(from.nictxspeed());
  }
  if (from.nicrxmaxspeed() != 0) {
    set_nicrxmaxspeed(from.nicrxmaxspeed());
  }
  if (from.nictxmaxspeed() != 0) {
    set_nictxmaxspeed(from.nictxmaxspeed());
  }
}

void SingleNicPerfData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.SingleNicPerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleNicPerfData::CopyFrom(const SingleNicPerfData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.SingleNicPerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleNicPerfData::IsInitialized() const {
  return true;
}

void SingleNicPerfData::Swap(SingleNicPerfData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleNicPerfData::InternalSwap(SingleNicPerfData* other) {
  using std::swap;
  nicname_.Swap(&other->nicname_);
  nicipaddress_.Swap(&other->nicipaddress_);
  nicspeed_.Swap(&other->nicspeed_);
  swap(nicrxbytes_, other->nicrxbytes_);
  swap(nictxbytes_, other->nictxbytes_);
  swap(nicrxpackets_, other->nicrxpackets_);
  swap(nicrxdropped_, other->nicrxdropped_);
  swap(nicrxerrors_, other->nicrxerrors_);
  swap(nicrxframe_, other->nicrxframe_);
  swap(nicrxoverruns_, other->nicrxoverruns_);
  swap(nictxpackets_, other->nictxpackets_);
  swap(nictxdropped_, other->nictxdropped_);
  swap(nictxerrors_, other->nictxerrors_);
  swap(nictxoverruns_, other->nictxoverruns_);
  swap(nicoutputbandwidth_, other->nicoutputbandwidth_);
  swap(nicinputbandwidth_, other->nicinputbandwidth_);
  swap(nicrxbytesmax_, other->nicrxbytesmax_);
  swap(nictxbytesmax_, other->nictxbytesmax_);
  swap(nicrxspeed_, other->nicrxspeed_);
  swap(nictxspeed_, other->nictxspeed_);
  swap(nicrxmaxspeed_, other->nicrxmaxspeed_);
  swap(nictxmaxspeed_, other->nictxmaxspeed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleNicPerfData::GetMetadata() const {
  protobuf_CommonDefine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonDefine_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleNicPerfData

// string nicName = 1;
void SingleNicPerfData::clear_nicname() {
  nicname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SingleNicPerfData::nicname() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
  return nicname_.GetNoArena();
}
void SingleNicPerfData::set_nicname(const ::std::string& value) {
  
  nicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
}
#if LANG_CXX11
void SingleNicPerfData::set_nicname(::std::string&& value) {
  
  nicname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
}
#endif
void SingleNicPerfData::set_nicname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
}
void SingleNicPerfData::set_nicname(const char* value, size_t size) {
  
  nicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
}
::std::string* SingleNicPerfData::mutable_nicname() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
  return nicname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SingleNicPerfData::release_nicname() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
  
  return nicname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SingleNicPerfData::set_allocated_nicname(::std::string* nicname) {
  if (nicname != NULL) {
    
  } else {
    
  }
  nicname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nicname);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
}

// string nicIpAddress = 2;
void SingleNicPerfData::clear_nicipaddress() {
  nicipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SingleNicPerfData::nicipaddress() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
  return nicipaddress_.GetNoArena();
}
void SingleNicPerfData::set_nicipaddress(const ::std::string& value) {
  
  nicipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
}
#if LANG_CXX11
void SingleNicPerfData::set_nicipaddress(::std::string&& value) {
  
  nicipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
}
#endif
void SingleNicPerfData::set_nicipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nicipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
}
void SingleNicPerfData::set_nicipaddress(const char* value, size_t size) {
  
  nicipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
}
::std::string* SingleNicPerfData::mutable_nicipaddress() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
  return nicipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SingleNicPerfData::release_nicipaddress() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
  
  return nicipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SingleNicPerfData::set_allocated_nicipaddress(::std::string* nicipaddress) {
  if (nicipaddress != NULL) {
    
  } else {
    
  }
  nicipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nicipaddress);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
}

// string nicSpeed = 3;
void SingleNicPerfData::clear_nicspeed() {
  nicspeed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SingleNicPerfData::nicspeed() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
  return nicspeed_.GetNoArena();
}
void SingleNicPerfData::set_nicspeed(const ::std::string& value) {
  
  nicspeed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
}
#if LANG_CXX11
void SingleNicPerfData::set_nicspeed(::std::string&& value) {
  
  nicspeed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
}
#endif
void SingleNicPerfData::set_nicspeed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nicspeed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
}
void SingleNicPerfData::set_nicspeed(const char* value, size_t size) {
  
  nicspeed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
}
::std::string* SingleNicPerfData::mutable_nicspeed() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
  return nicspeed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SingleNicPerfData::release_nicspeed() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
  
  return nicspeed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SingleNicPerfData::set_allocated_nicspeed(::std::string* nicspeed) {
  if (nicspeed != NULL) {
    
  } else {
    
  }
  nicspeed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nicspeed);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
}

// int64 nicRxBytes = 4;
void SingleNicPerfData::clear_nicrxbytes() {
  nicrxbytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nicrxbytes() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxBytes)
  return nicrxbytes_;
}
void SingleNicPerfData::set_nicrxbytes(::google::protobuf::int64 value) {
  
  nicrxbytes_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxBytes)
}

// int64 nicTxBytes = 5;
void SingleNicPerfData::clear_nictxbytes() {
  nictxbytes_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nictxbytes() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxBytes)
  return nictxbytes_;
}
void SingleNicPerfData::set_nictxbytes(::google::protobuf::int64 value) {
  
  nictxbytes_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxBytes)
}

// int64 nicRxPackets = 6;
void SingleNicPerfData::clear_nicrxpackets() {
  nicrxpackets_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nicrxpackets() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxPackets)
  return nicrxpackets_;
}
void SingleNicPerfData::set_nicrxpackets(::google::protobuf::int64 value) {
  
  nicrxpackets_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxPackets)
}

// int64 nicRxDropped = 7;
void SingleNicPerfData::clear_nicrxdropped() {
  nicrxdropped_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nicrxdropped() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxDropped)
  return nicrxdropped_;
}
void SingleNicPerfData::set_nicrxdropped(::google::protobuf::int64 value) {
  
  nicrxdropped_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxDropped)
}

// int64 nicRxErrors = 8;
void SingleNicPerfData::clear_nicrxerrors() {
  nicrxerrors_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nicrxerrors() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxErrors)
  return nicrxerrors_;
}
void SingleNicPerfData::set_nicrxerrors(::google::protobuf::int64 value) {
  
  nicrxerrors_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxErrors)
}

// int64 nicRxFrame = 9;
void SingleNicPerfData::clear_nicrxframe() {
  nicrxframe_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nicrxframe() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxFrame)
  return nicrxframe_;
}
void SingleNicPerfData::set_nicrxframe(::google::protobuf::int64 value) {
  
  nicrxframe_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxFrame)
}

// int64 nicRxOverruns = 10;
void SingleNicPerfData::clear_nicrxoverruns() {
  nicrxoverruns_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nicrxoverruns() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxOverruns)
  return nicrxoverruns_;
}
void SingleNicPerfData::set_nicrxoverruns(::google::protobuf::int64 value) {
  
  nicrxoverruns_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxOverruns)
}

// int64 nicTxPackets = 11;
void SingleNicPerfData::clear_nictxpackets() {
  nictxpackets_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nictxpackets() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxPackets)
  return nictxpackets_;
}
void SingleNicPerfData::set_nictxpackets(::google::protobuf::int64 value) {
  
  nictxpackets_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxPackets)
}

// int64 nicTxDropped = 12;
void SingleNicPerfData::clear_nictxdropped() {
  nictxdropped_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nictxdropped() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxDropped)
  return nictxdropped_;
}
void SingleNicPerfData::set_nictxdropped(::google::protobuf::int64 value) {
  
  nictxdropped_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxDropped)
}

// int64 nicTxErrors = 13;
void SingleNicPerfData::clear_nictxerrors() {
  nictxerrors_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nictxerrors() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxErrors)
  return nictxerrors_;
}
void SingleNicPerfData::set_nictxerrors(::google::protobuf::int64 value) {
  
  nictxerrors_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxErrors)
}

// int64 nicTxOverruns = 14;
void SingleNicPerfData::clear_nictxoverruns() {
  nictxoverruns_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nictxoverruns() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxOverruns)
  return nictxoverruns_;
}
void SingleNicPerfData::set_nictxoverruns(::google::protobuf::int64 value) {
  
  nictxoverruns_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxOverruns)
}

// int32 nicOutputBandWidth = 15;
void SingleNicPerfData::clear_nicoutputbandwidth() {
  nicoutputbandwidth_ = 0;
}
::google::protobuf::int32 SingleNicPerfData::nicoutputbandwidth() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicOutputBandWidth)
  return nicoutputbandwidth_;
}
void SingleNicPerfData::set_nicoutputbandwidth(::google::protobuf::int32 value) {
  
  nicoutputbandwidth_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicOutputBandWidth)
}

// int32 nicInputBandWidth = 16;
void SingleNicPerfData::clear_nicinputbandwidth() {
  nicinputbandwidth_ = 0;
}
::google::protobuf::int32 SingleNicPerfData::nicinputbandwidth() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicInputBandWidth)
  return nicinputbandwidth_;
}
void SingleNicPerfData::set_nicinputbandwidth(::google::protobuf::int32 value) {
  
  nicinputbandwidth_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicInputBandWidth)
}

// int64 nicRxBytesMax = 17;
void SingleNicPerfData::clear_nicrxbytesmax() {
  nicrxbytesmax_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nicrxbytesmax() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxBytesMax)
  return nicrxbytesmax_;
}
void SingleNicPerfData::set_nicrxbytesmax(::google::protobuf::int64 value) {
  
  nicrxbytesmax_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxBytesMax)
}

// int64 nicTxBytesMax = 18;
void SingleNicPerfData::clear_nictxbytesmax() {
  nictxbytesmax_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nictxbytesmax() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxBytesMax)
  return nictxbytesmax_;
}
void SingleNicPerfData::set_nictxbytesmax(::google::protobuf::int64 value) {
  
  nictxbytesmax_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxBytesMax)
}

// int64 nicRxSpeed = 19;
void SingleNicPerfData::clear_nicrxspeed() {
  nicrxspeed_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nicrxspeed() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxSpeed)
  return nicrxspeed_;
}
void SingleNicPerfData::set_nicrxspeed(::google::protobuf::int64 value) {
  
  nicrxspeed_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxSpeed)
}

// int64 nicTxSpeed = 20;
void SingleNicPerfData::clear_nictxspeed() {
  nictxspeed_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nictxspeed() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxSpeed)
  return nictxspeed_;
}
void SingleNicPerfData::set_nictxspeed(::google::protobuf::int64 value) {
  
  nictxspeed_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxSpeed)
}

// int64 nicRxMaxSpeed = 21;
void SingleNicPerfData::clear_nicrxmaxspeed() {
  nicrxmaxspeed_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nicrxmaxspeed() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxMaxSpeed)
  return nicrxmaxspeed_;
}
void SingleNicPerfData::set_nicrxmaxspeed(::google::protobuf::int64 value) {
  
  nicrxmaxspeed_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxMaxSpeed)
}

// int64 nicTxMaxSpeed = 22;
void SingleNicPerfData::clear_nictxmaxspeed() {
  nictxmaxspeed_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleNicPerfData::nictxmaxspeed() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxMaxSpeed)
  return nictxmaxspeed_;
}
void SingleNicPerfData::set_nictxmaxspeed(::google::protobuf::int64 value) {
  
  nictxmaxspeed_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxMaxSpeed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnumDefineData::EnumDefineData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommonDefine_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.EnumDefineData)
}
EnumDefineData::EnumDefineData(const EnumDefineData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.EnumDefineData)
}

void EnumDefineData::SharedCtor() {
  _cached_size_ = 0;
}

EnumDefineData::~EnumDefineData() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.EnumDefineData)
  SharedDtor();
}

void EnumDefineData::SharedDtor() {
}

void EnumDefineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnumDefineData::descriptor() {
  protobuf_CommonDefine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonDefine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnumDefineData& EnumDefineData::default_instance() {
  protobuf_CommonDefine_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnumDefineData* EnumDefineData::New(::google::protobuf::Arena* arena) const {
  EnumDefineData* n = new EnumDefineData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnumDefineData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.EnumDefineData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool EnumDefineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.EnumDefineData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.EnumDefineData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.EnumDefineData)
  return false;
#undef DO_
}

void EnumDefineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.EnumDefineData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.EnumDefineData)
}

::google::protobuf::uint8* EnumDefineData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.EnumDefineData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.EnumDefineData)
  return target;
}

size_t EnumDefineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.EnumDefineData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnumDefineData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.EnumDefineData)
  GOOGLE_DCHECK_NE(&from, this);
  const EnumDefineData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnumDefineData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.EnumDefineData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.EnumDefineData)
    MergeFrom(*source);
  }
}

void EnumDefineData::MergeFrom(const EnumDefineData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.EnumDefineData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EnumDefineData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.EnumDefineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumDefineData::CopyFrom(const EnumDefineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.EnumDefineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumDefineData::IsInitialized() const {
  return true;
}

void EnumDefineData::Swap(EnumDefineData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnumDefineData::InternalSwap(EnumDefineData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnumDefineData::GetMetadata() const {
  protobuf_CommonDefine_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommonDefine_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnumDefineData

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

// @@protoc_insertion_point(global_scope)

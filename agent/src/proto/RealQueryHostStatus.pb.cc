// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RealQueryHostStatus.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RealQueryHostStatus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace fiberhome {
namespace fums {
namespace proto {
class RealQueryHostStatusDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RealQueryHostStatusData>
     _instance;
} _RealQueryHostStatusData_default_instance_;
class RealQueryHostStatusResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RealQueryHostStatusResponse>
     _instance;
} _RealQueryHostStatusResponse_default_instance_;
class RealSystemInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RealSystemInfo>
     _instance;
} _RealSystemInfo_default_instance_;
class RealDiskStatusInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RealDiskStatusInfo>
     _instance;
} _RealDiskStatusInfo_default_instance_;
class RealSingleDiskStatusInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RealSingleDiskStatusInfo>
     _instance;
} _RealSingleDiskStatusInfo_default_instance_;
class RealDiskCfgInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RealDiskCfgInfo>
     _instance;
} _RealDiskCfgInfo_default_instance_;
class RealSingleDiskCfgInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RealSingleDiskCfgInfo>
     _instance;
} _RealSingleDiskCfgInfo_default_instance_;
class RealDiskRaidCfgInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RealDiskRaidCfgInfo>
     _instance;
} _RealDiskRaidCfgInfo_default_instance_;
class RealDiskHealthInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RealDiskHealthInfo>
     _instance;
} _RealDiskHealthInfo_default_instance_;
class RealSingleDiskHealthInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RealSingleDiskHealthInfo>
     _instance;
} _RealSingleDiskHealthInfo_default_instance_;
class RealNicStatusInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RealNicStatusInfo>
     _instance;
} _RealNicStatusInfo_default_instance_;
class RealProcessStatusInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RealProcessStatusInfo>
     _instance;
} _RealProcessStatusInfo_default_instance_;
class RealSingleProcessStatusInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RealSingleProcessStatusInfo>
     _instance;
} _RealSingleProcessStatusInfo_default_instance_;

namespace protobuf_RealQueryHostStatus_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealQueryHostStatusData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealQueryHostStatusData, uniqueid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealQueryHostStatusData, querycfgtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealQueryHostStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealQueryHostStatusResponse, querycfgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealQueryHostStatusResponse, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, sysdescr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, sysuptime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, cpufrequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, cpunumbers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, loadaverage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, cpuusage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, memorysize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, memoryusage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, disktotalsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, mainfsdisksize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, mainfsavailablesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, mainfsdiskuseratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, osname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, osversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, osvender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, tcpnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, tcptotalinbound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, tcptotaloutbound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, cpumonokaryonusage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, swapusage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSystemInfo, agentversion_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealDiskStatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealDiskStatusInfo, singlediskstatus_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskStatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskStatusInfo, diskname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskStatusInfo, diskservicetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskStatusInfo, diskqueue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskStatusInfo, diskreadbytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskStatusInfo, diskreads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskStatusInfo, diskwritebytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskStatusInfo, diskwrites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskStatusInfo, disktotal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskStatusInfo, diskavail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskStatusInfo, diskusage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealDiskCfgInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealDiskCfgInfo, singlediskinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskCfgInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskCfgInfo, diskindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskCfgInfo, diskname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskCfgInfo, disksize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskCfgInfo, diskseqno_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealDiskRaidCfgInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealDiskRaidCfgInfo, personalities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealDiskRaidCfgInfo, unuseddevices_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealDiskHealthInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealDiskHealthInfo, singlediskhealth_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskHealthInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskHealthInfo, diskname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleDiskHealthInfo, smartctlinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealNicStatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealNicStatusInfo, singlenicinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealProcessStatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealProcessStatusInfo, singleprocessinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleProcessStatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleProcessStatusInfo, processid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleProcessStatusInfo, processappname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleProcessStatusInfo, processpid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleProcessStatusInfo, processstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleProcessStatusInfo, processcpuusage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealSingleProcessStatusInfo, processmemory_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(RealQueryHostStatusData)},
  { 7, -1, sizeof(RealQueryHostStatusResponse)},
  { 14, -1, sizeof(RealSystemInfo)},
  { 40, -1, sizeof(RealDiskStatusInfo)},
  { 46, -1, sizeof(RealSingleDiskStatusInfo)},
  { 61, -1, sizeof(RealDiskCfgInfo)},
  { 67, -1, sizeof(RealSingleDiskCfgInfo)},
  { 76, -1, sizeof(RealDiskRaidCfgInfo)},
  { 83, -1, sizeof(RealDiskHealthInfo)},
  { 89, -1, sizeof(RealSingleDiskHealthInfo)},
  { 96, -1, sizeof(RealNicStatusInfo)},
  { 102, -1, sizeof(RealProcessStatusInfo)},
  { 108, -1, sizeof(RealSingleProcessStatusInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RealQueryHostStatusData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RealQueryHostStatusResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RealSystemInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RealDiskStatusInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RealSingleDiskStatusInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RealDiskCfgInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RealSingleDiskCfgInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RealDiskRaidCfgInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RealDiskHealthInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RealSingleDiskHealthInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RealNicStatusInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RealProcessStatusInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RealSingleProcessStatusInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "RealQueryHostStatus.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::fiberhome::fums::proto::protobuf_CommonDefine_2eproto::InitDefaults();
  _RealQueryHostStatusData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RealQueryHostStatusData_default_instance_);_RealQueryHostStatusResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RealQueryHostStatusResponse_default_instance_);_RealSystemInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RealSystemInfo_default_instance_);_RealDiskStatusInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RealDiskStatusInfo_default_instance_);_RealSingleDiskStatusInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RealSingleDiskStatusInfo_default_instance_);_RealDiskCfgInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RealDiskCfgInfo_default_instance_);_RealSingleDiskCfgInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RealSingleDiskCfgInfo_default_instance_);_RealDiskRaidCfgInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RealDiskRaidCfgInfo_default_instance_);_RealDiskHealthInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RealDiskHealthInfo_default_instance_);_RealSingleDiskHealthInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RealSingleDiskHealthInfo_default_instance_);_RealNicStatusInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RealNicStatusInfo_default_instance_);_RealProcessStatusInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RealProcessStatusInfo_default_instance_);_RealSingleProcessStatusInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RealSingleProcessStatusInfo_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031RealQueryHostStatus.proto\022\030com.fiberho"
      "me.fums.proto\032\022CommonDefine.proto\"\364\001\n\027Re"
      "alQueryHostStatusData\022\020\n\010uniqueId\030\001 \001(\003\022"
      "W\n\014queryCfgType\030\002 \001(\0162A.com.fiberhome.fu"
      "ms.proto.RealQueryHostStatusData.HostCfg"
      "TypeEnum\"n\n\017HostCfgTypeEnum\022\n\n\006SYSTEM\020\000\022"
      "\016\n\nDISKSTATUS\020\001\022\013\n\007DISKCFG\020\002\022\014\n\010DISKRAID"
      "\020\003\022\016\n\nDISKHEALTH\020\004\022\007\n\003NIC\020\005\022\013\n\007PROCESS\020\006"
      "\"\204\001\n\033RealQueryHostStatusResponse\022W\n\014quer"
      "yCfgType\030\001 \001(\0162A.com.fiberhome.fums.prot"
      "o.RealQueryHostStatusData.HostCfgTypeEnu"
      "m\022\014\n\004data\030\002 \001(\t\"\324\003\n\016RealSystemInfo\022\020\n\010sy"
      "sDescr\030\001 \001(\t\022\021\n\tsysUptime\030\002 \001(\001\022\024\n\014cpuFr"
      "equency\030\003 \001(\005\022\022\n\ncpuNumbers\030\004 \001(\005\022\023\n\013loa"
      "dAverage\030\005 \001(\t\022\020\n\010cpuUsage\030\006 \001(\001\022\022\n\nmemo"
      "rySize\030\007 \001(\005\022\023\n\013memoryUsage\030\010 \001(\001\022\025\n\rdis"
      "kTotalSize\030\t \001(\005\022\026\n\016mainFSDiskSize\030\n \001(\005"
      "\022\033\n\023mainFSAvailableSize\030\013 \001(\005\022\032\n\022mainFSD"
      "iskUseRatio\030\014 \001(\005\022\016\n\006osName\030\r \001(\t\022\021\n\tosV"
      "ersion\030\016 \001(\t\022\020\n\010osVender\030\017 \001(\t\022\016\n\006tcpNum"
      "\030\020 \001(\005\022\027\n\017tcpTotalInbound\030\021 \001(\005\022\030\n\020tcpTo"
      "talOutbound\030\022 \001(\005\022\032\n\022cpuMonokaryonUsage\030"
      "\023 \001(\t\022\021\n\tswapUsage\030\024 \001(\001\022\024\n\014agentVersion"
      "\030\025 \001(\t\"b\n\022RealDiskStatusInfo\022L\n\020singleDi"
      "skStatus\030\001 \003(\01322.com.fiberhome.fums.prot"
      "o.RealSingleDiskStatusInfo\"\347\001\n\030RealSingl"
      "eDiskStatusInfo\022\020\n\010diskName\030\001 \001(\t\022\027\n\017dis"
      "kServiceTime\030\002 \001(\t\022\021\n\tdiskQueue\030\003 \001(\t\022\025\n"
      "\rdiskReadBytes\030\004 \001(\t\022\021\n\tdiskReads\030\005 \001(\t\022"
      "\026\n\016diskWriteBytes\030\006 \001(\t\022\022\n\ndiskWrites\030\007 "
      "\001(\t\022\021\n\tdiskTotal\030\010 \001(\t\022\021\n\tdiskAvail\030\t \001("
      "\t\022\021\n\tdiskUsage\030\n \001(\t\"Z\n\017RealDiskCfgInfo\022"
      "G\n\016singleDiskInfo\030\001 \003(\0132/.com.fiberhome."
      "fums.proto.RealSingleDiskCfgInfo\"a\n\025Real"
      "SingleDiskCfgInfo\022\021\n\tdiskIndex\030\001 \001(\005\022\020\n\010"
      "diskName\030\002 \001(\t\022\020\n\010diskSize\030\003 \001(\t\022\021\n\tdisk"
      "SeqNo\030\004 \001(\t\"C\n\023RealDiskRaidCfgInfo\022\025\n\rpe"
      "rsonalities\030\001 \001(\t\022\025\n\runusedDevices\030\002 \001(\t"
      "\"b\n\022RealDiskHealthInfo\022L\n\020singleDiskHeal"
      "th\030\001 \003(\01322.com.fiberhome.fums.proto.Real"
      "SingleDiskHealthInfo\"B\n\030RealSingleDiskHe"
      "althInfo\022\020\n\010diskName\030\001 \001(\t\022\024\n\014smartCtlIn"
      "fo\030\002 \001(\t\"W\n\021RealNicStatusInfo\022B\n\rsingleN"
      "icInfo\030\001 \003(\0132+.com.fiberhome.fums.proto."
      "SingleNicPerfData\"i\n\025RealProcessStatusIn"
      "fo\022P\n\021singleProcessInfo\030\001 \003(\01325.com.fibe"
      "rhome.fums.proto.RealSingleProcessStatus"
      "Info\"\242\001\n\033RealSingleProcessStatusInfo\022\021\n\t"
      "processId\030\001 \001(\005\022\026\n\016processAppName\030\002 \001(\t\022"
      "\022\n\nprocessPid\030\003 \001(\003\022\024\n\014processState\030\004 \001("
      "\t\022\027\n\017processCpuUsage\030\005 \001(\t\022\025\n\rprocessMem"
      "ory\030\006 \001(\tB/\n\030com.fiberhome.fums.protoB\023R"
      "ealQueryHostStatusb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2106);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RealQueryHostStatus.proto", &protobuf_RegisterTypes);
  ::com::fiberhome::fums::proto::protobuf_CommonDefine_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_RealQueryHostStatus_2eproto

const ::google::protobuf::EnumDescriptor* RealQueryHostStatusData_HostCfgTypeEnum_descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_enum_descriptors[0];
}
bool RealQueryHostStatusData_HostCfgTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusData::SYSTEM;
const RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusData::DISKSTATUS;
const RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusData::DISKCFG;
const RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusData::DISKRAID;
const RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusData::DISKHEALTH;
const RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusData::NIC;
const RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusData::PROCESS;
const RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusData::HostCfgTypeEnum_MIN;
const RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusData::HostCfgTypeEnum_MAX;
const int RealQueryHostStatusData::HostCfgTypeEnum_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealQueryHostStatusData::kUniqueIdFieldNumber;
const int RealQueryHostStatusData::kQueryCfgTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealQueryHostStatusData::RealQueryHostStatusData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.RealQueryHostStatusData)
}
RealQueryHostStatusData::RealQueryHostStatusData(const RealQueryHostStatusData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uniqueid_, &from.uniqueid_,
    static_cast<size_t>(reinterpret_cast<char*>(&querycfgtype_) -
    reinterpret_cast<char*>(&uniqueid_)) + sizeof(querycfgtype_));
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.RealQueryHostStatusData)
}

void RealQueryHostStatusData::SharedCtor() {
  ::memset(&uniqueid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&querycfgtype_) -
      reinterpret_cast<char*>(&uniqueid_)) + sizeof(querycfgtype_));
  _cached_size_ = 0;
}

RealQueryHostStatusData::~RealQueryHostStatusData() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.RealQueryHostStatusData)
  SharedDtor();
}

void RealQueryHostStatusData::SharedDtor() {
}

void RealQueryHostStatusData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealQueryHostStatusData::descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealQueryHostStatusData& RealQueryHostStatusData::default_instance() {
  protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealQueryHostStatusData* RealQueryHostStatusData::New(::google::protobuf::Arena* arena) const {
  RealQueryHostStatusData* n = new RealQueryHostStatusData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealQueryHostStatusData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.RealQueryHostStatusData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uniqueid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&querycfgtype_) -
      reinterpret_cast<char*>(&uniqueid_)) + sizeof(querycfgtype_));
  _internal_metadata_.Clear();
}

bool RealQueryHostStatusData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.RealQueryHostStatusData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 uniqueId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uniqueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fiberhome.fums.proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_querycfgtype(static_cast< ::com::fiberhome::fums::proto::RealQueryHostStatusData_HostCfgTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.RealQueryHostStatusData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.RealQueryHostStatusData)
  return false;
#undef DO_
}

void RealQueryHostStatusData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.RealQueryHostStatusData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uniqueId = 1;
  if (this->uniqueid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uniqueid(), output);
  }

  // .com.fiberhome.fums.proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 2;
  if (this->querycfgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->querycfgtype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.RealQueryHostStatusData)
}

::google::protobuf::uint8* RealQueryHostStatusData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.RealQueryHostStatusData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 uniqueId = 1;
  if (this->uniqueid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uniqueid(), target);
  }

  // .com.fiberhome.fums.proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 2;
  if (this->querycfgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->querycfgtype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.RealQueryHostStatusData)
  return target;
}

size_t RealQueryHostStatusData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.RealQueryHostStatusData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 uniqueId = 1;
  if (this->uniqueid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->uniqueid());
  }

  // .com.fiberhome.fums.proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 2;
  if (this->querycfgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->querycfgtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealQueryHostStatusData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.RealQueryHostStatusData)
  GOOGLE_DCHECK_NE(&from, this);
  const RealQueryHostStatusData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealQueryHostStatusData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.RealQueryHostStatusData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.RealQueryHostStatusData)
    MergeFrom(*source);
  }
}

void RealQueryHostStatusData::MergeFrom(const RealQueryHostStatusData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.RealQueryHostStatusData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uniqueid() != 0) {
    set_uniqueid(from.uniqueid());
  }
  if (from.querycfgtype() != 0) {
    set_querycfgtype(from.querycfgtype());
  }
}

void RealQueryHostStatusData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.RealQueryHostStatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealQueryHostStatusData::CopyFrom(const RealQueryHostStatusData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.RealQueryHostStatusData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealQueryHostStatusData::IsInitialized() const {
  return true;
}

void RealQueryHostStatusData::Swap(RealQueryHostStatusData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealQueryHostStatusData::InternalSwap(RealQueryHostStatusData* other) {
  using std::swap;
  swap(uniqueid_, other->uniqueid_);
  swap(querycfgtype_, other->querycfgtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealQueryHostStatusData::GetMetadata() const {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealQueryHostStatusData

// int64 uniqueId = 1;
void RealQueryHostStatusData::clear_uniqueid() {
  uniqueid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RealQueryHostStatusData::uniqueid() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealQueryHostStatusData.uniqueId)
  return uniqueid_;
}
void RealQueryHostStatusData::set_uniqueid(::google::protobuf::int64 value) {
  
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealQueryHostStatusData.uniqueId)
}

// .com.fiberhome.fums.proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 2;
void RealQueryHostStatusData::clear_querycfgtype() {
  querycfgtype_ = 0;
}
::com::fiberhome::fums::proto::RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusData::querycfgtype() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealQueryHostStatusData.queryCfgType)
  return static_cast< ::com::fiberhome::fums::proto::RealQueryHostStatusData_HostCfgTypeEnum >(querycfgtype_);
}
void RealQueryHostStatusData::set_querycfgtype(::com::fiberhome::fums::proto::RealQueryHostStatusData_HostCfgTypeEnum value) {
  
  querycfgtype_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealQueryHostStatusData.queryCfgType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealQueryHostStatusResponse::kQueryCfgTypeFieldNumber;
const int RealQueryHostStatusResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealQueryHostStatusResponse::RealQueryHostStatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
}
RealQueryHostStatusResponse::RealQueryHostStatusResponse(const RealQueryHostStatusResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  querycfgtype_ = from.querycfgtype_;
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
}

void RealQueryHostStatusResponse::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  querycfgtype_ = 0;
  _cached_size_ = 0;
}

RealQueryHostStatusResponse::~RealQueryHostStatusResponse() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
  SharedDtor();
}

void RealQueryHostStatusResponse::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RealQueryHostStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealQueryHostStatusResponse::descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealQueryHostStatusResponse& RealQueryHostStatusResponse::default_instance() {
  protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealQueryHostStatusResponse* RealQueryHostStatusResponse::New(::google::protobuf::Arena* arena) const {
  RealQueryHostStatusResponse* n = new RealQueryHostStatusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealQueryHostStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  querycfgtype_ = 0;
  _internal_metadata_.Clear();
}

bool RealQueryHostStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fiberhome.fums.proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_querycfgtype(static_cast< ::com::fiberhome::fums::proto::RealQueryHostStatusData_HostCfgTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealQueryHostStatusResponse.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
  return false;
#undef DO_
}

void RealQueryHostStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.fiberhome.fums.proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 1;
  if (this->querycfgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->querycfgtype(), output);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealQueryHostStatusResponse.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
}

::google::protobuf::uint8* RealQueryHostStatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.fiberhome.fums.proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 1;
  if (this->querycfgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->querycfgtype(), target);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealQueryHostStatusResponse.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
  return target;
}

size_t RealQueryHostStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // .com.fiberhome.fums.proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 1;
  if (this->querycfgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->querycfgtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealQueryHostStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RealQueryHostStatusResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealQueryHostStatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
    MergeFrom(*source);
  }
}

void RealQueryHostStatusResponse::MergeFrom(const RealQueryHostStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.querycfgtype() != 0) {
    set_querycfgtype(from.querycfgtype());
  }
}

void RealQueryHostStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealQueryHostStatusResponse::CopyFrom(const RealQueryHostStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.RealQueryHostStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealQueryHostStatusResponse::IsInitialized() const {
  return true;
}

void RealQueryHostStatusResponse::Swap(RealQueryHostStatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealQueryHostStatusResponse::InternalSwap(RealQueryHostStatusResponse* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(querycfgtype_, other->querycfgtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealQueryHostStatusResponse::GetMetadata() const {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealQueryHostStatusResponse

// .com.fiberhome.fums.proto.RealQueryHostStatusData.HostCfgTypeEnum queryCfgType = 1;
void RealQueryHostStatusResponse::clear_querycfgtype() {
  querycfgtype_ = 0;
}
::com::fiberhome::fums::proto::RealQueryHostStatusData_HostCfgTypeEnum RealQueryHostStatusResponse::querycfgtype() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealQueryHostStatusResponse.queryCfgType)
  return static_cast< ::com::fiberhome::fums::proto::RealQueryHostStatusData_HostCfgTypeEnum >(querycfgtype_);
}
void RealQueryHostStatusResponse::set_querycfgtype(::com::fiberhome::fums::proto::RealQueryHostStatusData_HostCfgTypeEnum value) {
  
  querycfgtype_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealQueryHostStatusResponse.queryCfgType)
}

// string data = 2;
void RealQueryHostStatusResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealQueryHostStatusResponse::data() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealQueryHostStatusResponse.data)
  return data_.GetNoArena();
}
void RealQueryHostStatusResponse::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealQueryHostStatusResponse.data)
}
#if LANG_CXX11
void RealQueryHostStatusResponse::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealQueryHostStatusResponse.data)
}
#endif
void RealQueryHostStatusResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealQueryHostStatusResponse.data)
}
void RealQueryHostStatusResponse::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealQueryHostStatusResponse.data)
}
::std::string* RealQueryHostStatusResponse::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealQueryHostStatusResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealQueryHostStatusResponse::release_data() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealQueryHostStatusResponse.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealQueryHostStatusResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealQueryHostStatusResponse.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealSystemInfo::kSysDescrFieldNumber;
const int RealSystemInfo::kSysUptimeFieldNumber;
const int RealSystemInfo::kCpuFrequencyFieldNumber;
const int RealSystemInfo::kCpuNumbersFieldNumber;
const int RealSystemInfo::kLoadAverageFieldNumber;
const int RealSystemInfo::kCpuUsageFieldNumber;
const int RealSystemInfo::kMemorySizeFieldNumber;
const int RealSystemInfo::kMemoryUsageFieldNumber;
const int RealSystemInfo::kDiskTotalSizeFieldNumber;
const int RealSystemInfo::kMainFSDiskSizeFieldNumber;
const int RealSystemInfo::kMainFSAvailableSizeFieldNumber;
const int RealSystemInfo::kMainFSDiskUseRatioFieldNumber;
const int RealSystemInfo::kOsNameFieldNumber;
const int RealSystemInfo::kOsVersionFieldNumber;
const int RealSystemInfo::kOsVenderFieldNumber;
const int RealSystemInfo::kTcpNumFieldNumber;
const int RealSystemInfo::kTcpTotalInboundFieldNumber;
const int RealSystemInfo::kTcpTotalOutboundFieldNumber;
const int RealSystemInfo::kCpuMonokaryonUsageFieldNumber;
const int RealSystemInfo::kSwapUsageFieldNumber;
const int RealSystemInfo::kAgentVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealSystemInfo::RealSystemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.RealSystemInfo)
}
RealSystemInfo::RealSystemInfo(const RealSystemInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sysdescr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sysdescr().size() > 0) {
    sysdescr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sysdescr_);
  }
  loadaverage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.loadaverage().size() > 0) {
    loadaverage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loadaverage_);
  }
  osname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.osname().size() > 0) {
    osname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.osname_);
  }
  osversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.osversion().size() > 0) {
    osversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.osversion_);
  }
  osvender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.osvender().size() > 0) {
    osvender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.osvender_);
  }
  cpumonokaryonusage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cpumonokaryonusage().size() > 0) {
    cpumonokaryonusage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpumonokaryonusage_);
  }
  agentversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.agentversion().size() > 0) {
    agentversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agentversion_);
  }
  ::memcpy(&sysuptime_, &from.sysuptime_,
    static_cast<size_t>(reinterpret_cast<char*>(&swapusage_) -
    reinterpret_cast<char*>(&sysuptime_)) + sizeof(swapusage_));
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.RealSystemInfo)
}

void RealSystemInfo::SharedCtor() {
  sysdescr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loadaverage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osvender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpumonokaryonusage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agentversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sysuptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&swapusage_) -
      reinterpret_cast<char*>(&sysuptime_)) + sizeof(swapusage_));
  _cached_size_ = 0;
}

RealSystemInfo::~RealSystemInfo() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.RealSystemInfo)
  SharedDtor();
}

void RealSystemInfo::SharedDtor() {
  sysdescr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loadaverage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osvender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpumonokaryonusage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agentversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RealSystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealSystemInfo::descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealSystemInfo& RealSystemInfo::default_instance() {
  protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealSystemInfo* RealSystemInfo::New(::google::protobuf::Arena* arena) const {
  RealSystemInfo* n = new RealSystemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealSystemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.RealSystemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sysdescr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loadaverage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osvender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpumonokaryonusage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agentversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sysuptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&swapusage_) -
      reinterpret_cast<char*>(&sysuptime_)) + sizeof(swapusage_));
  _internal_metadata_.Clear();
}

bool RealSystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.RealSystemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sysDescr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sysdescr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sysdescr().data(), static_cast<int>(this->sysdescr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSystemInfo.sysDescr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sysUptime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sysuptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cpuFrequency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpufrequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cpuNumbers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpunumbers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string loadAverage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loadaverage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->loadaverage().data(), static_cast<int>(this->loadaverage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSystemInfo.loadAverage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cpuUsage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpuusage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 memorySize = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memorysize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double memoryUsage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &memoryusage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 diskTotalSize = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disktotalsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mainFSDiskSize = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainfsdisksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mainFSAvailableSize = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainfsavailablesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mainFSDiskUseRatio = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainfsdiskuseratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string osName = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->osname().data(), static_cast<int>(this->osname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSystemInfo.osName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string osVersion = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->osversion().data(), static_cast<int>(this->osversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSystemInfo.osVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string osVender = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osvender()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->osvender().data(), static_cast<int>(this->osvender().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSystemInfo.osVender"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tcpNum = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcpnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tcpTotalInbound = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcptotalinbound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tcpTotalOutbound = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcptotaloutbound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cpuMonokaryonUsage = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpumonokaryonusage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cpumonokaryonusage().data(), static_cast<int>(this->cpumonokaryonusage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSystemInfo.cpuMonokaryonUsage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double swapUsage = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &swapusage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string agentVersion = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agentversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->agentversion().data(), static_cast<int>(this->agentversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSystemInfo.agentVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.RealSystemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.RealSystemInfo)
  return false;
#undef DO_
}

void RealSystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.RealSystemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sysDescr = 1;
  if (this->sysdescr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sysdescr().data(), static_cast<int>(this->sysdescr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.sysDescr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sysdescr(), output);
  }

  // double sysUptime = 2;
  if (this->sysuptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sysuptime(), output);
  }

  // int32 cpuFrequency = 3;
  if (this->cpufrequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cpufrequency(), output);
  }

  // int32 cpuNumbers = 4;
  if (this->cpunumbers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cpunumbers(), output);
  }

  // string loadAverage = 5;
  if (this->loadaverage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->loadaverage().data(), static_cast<int>(this->loadaverage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.loadAverage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->loadaverage(), output);
  }

  // double cpuUsage = 6;
  if (this->cpuusage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->cpuusage(), output);
  }

  // int32 memorySize = 7;
  if (this->memorysize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->memorysize(), output);
  }

  // double memoryUsage = 8;
  if (this->memoryusage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->memoryusage(), output);
  }

  // int32 diskTotalSize = 9;
  if (this->disktotalsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->disktotalsize(), output);
  }

  // int32 mainFSDiskSize = 10;
  if (this->mainfsdisksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mainfsdisksize(), output);
  }

  // int32 mainFSAvailableSize = 11;
  if (this->mainfsavailablesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mainfsavailablesize(), output);
  }

  // int32 mainFSDiskUseRatio = 12;
  if (this->mainfsdiskuseratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mainfsdiskuseratio(), output);
  }

  // string osName = 13;
  if (this->osname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->osname().data(), static_cast<int>(this->osname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.osName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->osname(), output);
  }

  // string osVersion = 14;
  if (this->osversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->osversion().data(), static_cast<int>(this->osversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.osVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->osversion(), output);
  }

  // string osVender = 15;
  if (this->osvender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->osvender().data(), static_cast<int>(this->osvender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.osVender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->osvender(), output);
  }

  // int32 tcpNum = 16;
  if (this->tcpnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tcpnum(), output);
  }

  // int32 tcpTotalInbound = 17;
  if (this->tcptotalinbound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->tcptotalinbound(), output);
  }

  // int32 tcpTotalOutbound = 18;
  if (this->tcptotaloutbound() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->tcptotaloutbound(), output);
  }

  // string cpuMonokaryonUsage = 19;
  if (this->cpumonokaryonusage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cpumonokaryonusage().data(), static_cast<int>(this->cpumonokaryonusage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.cpuMonokaryonUsage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->cpumonokaryonusage(), output);
  }

  // double swapUsage = 20;
  if (this->swapusage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->swapusage(), output);
  }

  // string agentVersion = 21;
  if (this->agentversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->agentversion().data(), static_cast<int>(this->agentversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.agentVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->agentversion(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.RealSystemInfo)
}

::google::protobuf::uint8* RealSystemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.RealSystemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sysDescr = 1;
  if (this->sysdescr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sysdescr().data(), static_cast<int>(this->sysdescr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.sysDescr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sysdescr(), target);
  }

  // double sysUptime = 2;
  if (this->sysuptime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sysuptime(), target);
  }

  // int32 cpuFrequency = 3;
  if (this->cpufrequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cpufrequency(), target);
  }

  // int32 cpuNumbers = 4;
  if (this->cpunumbers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cpunumbers(), target);
  }

  // string loadAverage = 5;
  if (this->loadaverage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->loadaverage().data(), static_cast<int>(this->loadaverage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.loadAverage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->loadaverage(), target);
  }

  // double cpuUsage = 6;
  if (this->cpuusage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->cpuusage(), target);
  }

  // int32 memorySize = 7;
  if (this->memorysize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->memorysize(), target);
  }

  // double memoryUsage = 8;
  if (this->memoryusage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->memoryusage(), target);
  }

  // int32 diskTotalSize = 9;
  if (this->disktotalsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->disktotalsize(), target);
  }

  // int32 mainFSDiskSize = 10;
  if (this->mainfsdisksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mainfsdisksize(), target);
  }

  // int32 mainFSAvailableSize = 11;
  if (this->mainfsavailablesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mainfsavailablesize(), target);
  }

  // int32 mainFSDiskUseRatio = 12;
  if (this->mainfsdiskuseratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mainfsdiskuseratio(), target);
  }

  // string osName = 13;
  if (this->osname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->osname().data(), static_cast<int>(this->osname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.osName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->osname(), target);
  }

  // string osVersion = 14;
  if (this->osversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->osversion().data(), static_cast<int>(this->osversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.osVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->osversion(), target);
  }

  // string osVender = 15;
  if (this->osvender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->osvender().data(), static_cast<int>(this->osvender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.osVender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->osvender(), target);
  }

  // int32 tcpNum = 16;
  if (this->tcpnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tcpnum(), target);
  }

  // int32 tcpTotalInbound = 17;
  if (this->tcptotalinbound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->tcptotalinbound(), target);
  }

  // int32 tcpTotalOutbound = 18;
  if (this->tcptotaloutbound() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->tcptotaloutbound(), target);
  }

  // string cpuMonokaryonUsage = 19;
  if (this->cpumonokaryonusage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cpumonokaryonusage().data(), static_cast<int>(this->cpumonokaryonusage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.cpuMonokaryonUsage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->cpumonokaryonusage(), target);
  }

  // double swapUsage = 20;
  if (this->swapusage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->swapusage(), target);
  }

  // string agentVersion = 21;
  if (this->agentversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->agentversion().data(), static_cast<int>(this->agentversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSystemInfo.agentVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->agentversion(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.RealSystemInfo)
  return target;
}

size_t RealSystemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.RealSystemInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sysDescr = 1;
  if (this->sysdescr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sysdescr());
  }

  // string loadAverage = 5;
  if (this->loadaverage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->loadaverage());
  }

  // string osName = 13;
  if (this->osname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->osname());
  }

  // string osVersion = 14;
  if (this->osversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->osversion());
  }

  // string osVender = 15;
  if (this->osvender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->osvender());
  }

  // string cpuMonokaryonUsage = 19;
  if (this->cpumonokaryonusage().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cpumonokaryonusage());
  }

  // string agentVersion = 21;
  if (this->agentversion().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->agentversion());
  }

  // double sysUptime = 2;
  if (this->sysuptime() != 0) {
    total_size += 1 + 8;
  }

  // int32 cpuFrequency = 3;
  if (this->cpufrequency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cpufrequency());
  }

  // int32 cpuNumbers = 4;
  if (this->cpunumbers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cpunumbers());
  }

  // double cpuUsage = 6;
  if (this->cpuusage() != 0) {
    total_size += 1 + 8;
  }

  // double memoryUsage = 8;
  if (this->memoryusage() != 0) {
    total_size += 1 + 8;
  }

  // int32 memorySize = 7;
  if (this->memorysize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->memorysize());
  }

  // int32 diskTotalSize = 9;
  if (this->disktotalsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->disktotalsize());
  }

  // int32 mainFSDiskSize = 10;
  if (this->mainfsdisksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mainfsdisksize());
  }

  // int32 mainFSAvailableSize = 11;
  if (this->mainfsavailablesize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mainfsavailablesize());
  }

  // int32 mainFSDiskUseRatio = 12;
  if (this->mainfsdiskuseratio() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mainfsdiskuseratio());
  }

  // int32 tcpNum = 16;
  if (this->tcpnum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcpnum());
  }

  // int32 tcpTotalInbound = 17;
  if (this->tcptotalinbound() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcptotalinbound());
  }

  // int32 tcpTotalOutbound = 18;
  if (this->tcptotaloutbound() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcptotaloutbound());
  }

  // double swapUsage = 20;
  if (this->swapusage() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealSystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.RealSystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RealSystemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealSystemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.RealSystemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.RealSystemInfo)
    MergeFrom(*source);
  }
}

void RealSystemInfo::MergeFrom(const RealSystemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.RealSystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sysdescr().size() > 0) {

    sysdescr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sysdescr_);
  }
  if (from.loadaverage().size() > 0) {

    loadaverage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loadaverage_);
  }
  if (from.osname().size() > 0) {

    osname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.osname_);
  }
  if (from.osversion().size() > 0) {

    osversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.osversion_);
  }
  if (from.osvender().size() > 0) {

    osvender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.osvender_);
  }
  if (from.cpumonokaryonusage().size() > 0) {

    cpumonokaryonusage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpumonokaryonusage_);
  }
  if (from.agentversion().size() > 0) {

    agentversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.agentversion_);
  }
  if (from.sysuptime() != 0) {
    set_sysuptime(from.sysuptime());
  }
  if (from.cpufrequency() != 0) {
    set_cpufrequency(from.cpufrequency());
  }
  if (from.cpunumbers() != 0) {
    set_cpunumbers(from.cpunumbers());
  }
  if (from.cpuusage() != 0) {
    set_cpuusage(from.cpuusage());
  }
  if (from.memoryusage() != 0) {
    set_memoryusage(from.memoryusage());
  }
  if (from.memorysize() != 0) {
    set_memorysize(from.memorysize());
  }
  if (from.disktotalsize() != 0) {
    set_disktotalsize(from.disktotalsize());
  }
  if (from.mainfsdisksize() != 0) {
    set_mainfsdisksize(from.mainfsdisksize());
  }
  if (from.mainfsavailablesize() != 0) {
    set_mainfsavailablesize(from.mainfsavailablesize());
  }
  if (from.mainfsdiskuseratio() != 0) {
    set_mainfsdiskuseratio(from.mainfsdiskuseratio());
  }
  if (from.tcpnum() != 0) {
    set_tcpnum(from.tcpnum());
  }
  if (from.tcptotalinbound() != 0) {
    set_tcptotalinbound(from.tcptotalinbound());
  }
  if (from.tcptotaloutbound() != 0) {
    set_tcptotaloutbound(from.tcptotaloutbound());
  }
  if (from.swapusage() != 0) {
    set_swapusage(from.swapusage());
  }
}

void RealSystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.RealSystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealSystemInfo::CopyFrom(const RealSystemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.RealSystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealSystemInfo::IsInitialized() const {
  return true;
}

void RealSystemInfo::Swap(RealSystemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealSystemInfo::InternalSwap(RealSystemInfo* other) {
  using std::swap;
  sysdescr_.Swap(&other->sysdescr_);
  loadaverage_.Swap(&other->loadaverage_);
  osname_.Swap(&other->osname_);
  osversion_.Swap(&other->osversion_);
  osvender_.Swap(&other->osvender_);
  cpumonokaryonusage_.Swap(&other->cpumonokaryonusage_);
  agentversion_.Swap(&other->agentversion_);
  swap(sysuptime_, other->sysuptime_);
  swap(cpufrequency_, other->cpufrequency_);
  swap(cpunumbers_, other->cpunumbers_);
  swap(cpuusage_, other->cpuusage_);
  swap(memoryusage_, other->memoryusage_);
  swap(memorysize_, other->memorysize_);
  swap(disktotalsize_, other->disktotalsize_);
  swap(mainfsdisksize_, other->mainfsdisksize_);
  swap(mainfsavailablesize_, other->mainfsavailablesize_);
  swap(mainfsdiskuseratio_, other->mainfsdiskuseratio_);
  swap(tcpnum_, other->tcpnum_);
  swap(tcptotalinbound_, other->tcptotalinbound_);
  swap(tcptotaloutbound_, other->tcptotaloutbound_);
  swap(swapusage_, other->swapusage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealSystemInfo::GetMetadata() const {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealSystemInfo

// string sysDescr = 1;
void RealSystemInfo::clear_sysdescr() {
  sysdescr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSystemInfo::sysdescr() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.sysDescr)
  return sysdescr_.GetNoArena();
}
void RealSystemInfo::set_sysdescr(const ::std::string& value) {
  
  sysdescr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.sysDescr)
}
#if LANG_CXX11
void RealSystemInfo::set_sysdescr(::std::string&& value) {
  
  sysdescr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSystemInfo.sysDescr)
}
#endif
void RealSystemInfo::set_sysdescr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sysdescr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSystemInfo.sysDescr)
}
void RealSystemInfo::set_sysdescr(const char* value, size_t size) {
  
  sysdescr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSystemInfo.sysDescr)
}
::std::string* RealSystemInfo::mutable_sysdescr() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSystemInfo.sysDescr)
  return sysdescr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSystemInfo::release_sysdescr() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSystemInfo.sysDescr)
  
  return sysdescr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSystemInfo::set_allocated_sysdescr(::std::string* sysdescr) {
  if (sysdescr != NULL) {
    
  } else {
    
  }
  sysdescr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sysdescr);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSystemInfo.sysDescr)
}

// double sysUptime = 2;
void RealSystemInfo::clear_sysuptime() {
  sysuptime_ = 0;
}
double RealSystemInfo::sysuptime() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.sysUptime)
  return sysuptime_;
}
void RealSystemInfo::set_sysuptime(double value) {
  
  sysuptime_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.sysUptime)
}

// int32 cpuFrequency = 3;
void RealSystemInfo::clear_cpufrequency() {
  cpufrequency_ = 0;
}
::google::protobuf::int32 RealSystemInfo::cpufrequency() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.cpuFrequency)
  return cpufrequency_;
}
void RealSystemInfo::set_cpufrequency(::google::protobuf::int32 value) {
  
  cpufrequency_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.cpuFrequency)
}

// int32 cpuNumbers = 4;
void RealSystemInfo::clear_cpunumbers() {
  cpunumbers_ = 0;
}
::google::protobuf::int32 RealSystemInfo::cpunumbers() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.cpuNumbers)
  return cpunumbers_;
}
void RealSystemInfo::set_cpunumbers(::google::protobuf::int32 value) {
  
  cpunumbers_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.cpuNumbers)
}

// string loadAverage = 5;
void RealSystemInfo::clear_loadaverage() {
  loadaverage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSystemInfo::loadaverage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.loadAverage)
  return loadaverage_.GetNoArena();
}
void RealSystemInfo::set_loadaverage(const ::std::string& value) {
  
  loadaverage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.loadAverage)
}
#if LANG_CXX11
void RealSystemInfo::set_loadaverage(::std::string&& value) {
  
  loadaverage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSystemInfo.loadAverage)
}
#endif
void RealSystemInfo::set_loadaverage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loadaverage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSystemInfo.loadAverage)
}
void RealSystemInfo::set_loadaverage(const char* value, size_t size) {
  
  loadaverage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSystemInfo.loadAverage)
}
::std::string* RealSystemInfo::mutable_loadaverage() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSystemInfo.loadAverage)
  return loadaverage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSystemInfo::release_loadaverage() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSystemInfo.loadAverage)
  
  return loadaverage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSystemInfo::set_allocated_loadaverage(::std::string* loadaverage) {
  if (loadaverage != NULL) {
    
  } else {
    
  }
  loadaverage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loadaverage);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSystemInfo.loadAverage)
}

// double cpuUsage = 6;
void RealSystemInfo::clear_cpuusage() {
  cpuusage_ = 0;
}
double RealSystemInfo::cpuusage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.cpuUsage)
  return cpuusage_;
}
void RealSystemInfo::set_cpuusage(double value) {
  
  cpuusage_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.cpuUsage)
}

// int32 memorySize = 7;
void RealSystemInfo::clear_memorysize() {
  memorysize_ = 0;
}
::google::protobuf::int32 RealSystemInfo::memorysize() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.memorySize)
  return memorysize_;
}
void RealSystemInfo::set_memorysize(::google::protobuf::int32 value) {
  
  memorysize_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.memorySize)
}

// double memoryUsage = 8;
void RealSystemInfo::clear_memoryusage() {
  memoryusage_ = 0;
}
double RealSystemInfo::memoryusage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.memoryUsage)
  return memoryusage_;
}
void RealSystemInfo::set_memoryusage(double value) {
  
  memoryusage_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.memoryUsage)
}

// int32 diskTotalSize = 9;
void RealSystemInfo::clear_disktotalsize() {
  disktotalsize_ = 0;
}
::google::protobuf::int32 RealSystemInfo::disktotalsize() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.diskTotalSize)
  return disktotalsize_;
}
void RealSystemInfo::set_disktotalsize(::google::protobuf::int32 value) {
  
  disktotalsize_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.diskTotalSize)
}

// int32 mainFSDiskSize = 10;
void RealSystemInfo::clear_mainfsdisksize() {
  mainfsdisksize_ = 0;
}
::google::protobuf::int32 RealSystemInfo::mainfsdisksize() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.mainFSDiskSize)
  return mainfsdisksize_;
}
void RealSystemInfo::set_mainfsdisksize(::google::protobuf::int32 value) {
  
  mainfsdisksize_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.mainFSDiskSize)
}

// int32 mainFSAvailableSize = 11;
void RealSystemInfo::clear_mainfsavailablesize() {
  mainfsavailablesize_ = 0;
}
::google::protobuf::int32 RealSystemInfo::mainfsavailablesize() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.mainFSAvailableSize)
  return mainfsavailablesize_;
}
void RealSystemInfo::set_mainfsavailablesize(::google::protobuf::int32 value) {
  
  mainfsavailablesize_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.mainFSAvailableSize)
}

// int32 mainFSDiskUseRatio = 12;
void RealSystemInfo::clear_mainfsdiskuseratio() {
  mainfsdiskuseratio_ = 0;
}
::google::protobuf::int32 RealSystemInfo::mainfsdiskuseratio() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.mainFSDiskUseRatio)
  return mainfsdiskuseratio_;
}
void RealSystemInfo::set_mainfsdiskuseratio(::google::protobuf::int32 value) {
  
  mainfsdiskuseratio_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.mainFSDiskUseRatio)
}

// string osName = 13;
void RealSystemInfo::clear_osname() {
  osname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSystemInfo::osname() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.osName)
  return osname_.GetNoArena();
}
void RealSystemInfo::set_osname(const ::std::string& value) {
  
  osname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.osName)
}
#if LANG_CXX11
void RealSystemInfo::set_osname(::std::string&& value) {
  
  osname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSystemInfo.osName)
}
#endif
void RealSystemInfo::set_osname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  osname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSystemInfo.osName)
}
void RealSystemInfo::set_osname(const char* value, size_t size) {
  
  osname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSystemInfo.osName)
}
::std::string* RealSystemInfo::mutable_osname() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSystemInfo.osName)
  return osname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSystemInfo::release_osname() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSystemInfo.osName)
  
  return osname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSystemInfo::set_allocated_osname(::std::string* osname) {
  if (osname != NULL) {
    
  } else {
    
  }
  osname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osname);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSystemInfo.osName)
}

// string osVersion = 14;
void RealSystemInfo::clear_osversion() {
  osversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSystemInfo::osversion() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.osVersion)
  return osversion_.GetNoArena();
}
void RealSystemInfo::set_osversion(const ::std::string& value) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.osVersion)
}
#if LANG_CXX11
void RealSystemInfo::set_osversion(::std::string&& value) {
  
  osversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSystemInfo.osVersion)
}
#endif
void RealSystemInfo::set_osversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSystemInfo.osVersion)
}
void RealSystemInfo::set_osversion(const char* value, size_t size) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSystemInfo.osVersion)
}
::std::string* RealSystemInfo::mutable_osversion() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSystemInfo.osVersion)
  return osversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSystemInfo::release_osversion() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSystemInfo.osVersion)
  
  return osversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSystemInfo::set_allocated_osversion(::std::string* osversion) {
  if (osversion != NULL) {
    
  } else {
    
  }
  osversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osversion);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSystemInfo.osVersion)
}

// string osVender = 15;
void RealSystemInfo::clear_osvender() {
  osvender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSystemInfo::osvender() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.osVender)
  return osvender_.GetNoArena();
}
void RealSystemInfo::set_osvender(const ::std::string& value) {
  
  osvender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.osVender)
}
#if LANG_CXX11
void RealSystemInfo::set_osvender(::std::string&& value) {
  
  osvender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSystemInfo.osVender)
}
#endif
void RealSystemInfo::set_osvender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  osvender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSystemInfo.osVender)
}
void RealSystemInfo::set_osvender(const char* value, size_t size) {
  
  osvender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSystemInfo.osVender)
}
::std::string* RealSystemInfo::mutable_osvender() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSystemInfo.osVender)
  return osvender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSystemInfo::release_osvender() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSystemInfo.osVender)
  
  return osvender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSystemInfo::set_allocated_osvender(::std::string* osvender) {
  if (osvender != NULL) {
    
  } else {
    
  }
  osvender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osvender);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSystemInfo.osVender)
}

// int32 tcpNum = 16;
void RealSystemInfo::clear_tcpnum() {
  tcpnum_ = 0;
}
::google::protobuf::int32 RealSystemInfo::tcpnum() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.tcpNum)
  return tcpnum_;
}
void RealSystemInfo::set_tcpnum(::google::protobuf::int32 value) {
  
  tcpnum_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.tcpNum)
}

// int32 tcpTotalInbound = 17;
void RealSystemInfo::clear_tcptotalinbound() {
  tcptotalinbound_ = 0;
}
::google::protobuf::int32 RealSystemInfo::tcptotalinbound() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.tcpTotalInbound)
  return tcptotalinbound_;
}
void RealSystemInfo::set_tcptotalinbound(::google::protobuf::int32 value) {
  
  tcptotalinbound_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.tcpTotalInbound)
}

// int32 tcpTotalOutbound = 18;
void RealSystemInfo::clear_tcptotaloutbound() {
  tcptotaloutbound_ = 0;
}
::google::protobuf::int32 RealSystemInfo::tcptotaloutbound() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.tcpTotalOutbound)
  return tcptotaloutbound_;
}
void RealSystemInfo::set_tcptotaloutbound(::google::protobuf::int32 value) {
  
  tcptotaloutbound_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.tcpTotalOutbound)
}

// string cpuMonokaryonUsage = 19;
void RealSystemInfo::clear_cpumonokaryonusage() {
  cpumonokaryonusage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSystemInfo::cpumonokaryonusage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.cpuMonokaryonUsage)
  return cpumonokaryonusage_.GetNoArena();
}
void RealSystemInfo::set_cpumonokaryonusage(const ::std::string& value) {
  
  cpumonokaryonusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.cpuMonokaryonUsage)
}
#if LANG_CXX11
void RealSystemInfo::set_cpumonokaryonusage(::std::string&& value) {
  
  cpumonokaryonusage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSystemInfo.cpuMonokaryonUsage)
}
#endif
void RealSystemInfo::set_cpumonokaryonusage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpumonokaryonusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSystemInfo.cpuMonokaryonUsage)
}
void RealSystemInfo::set_cpumonokaryonusage(const char* value, size_t size) {
  
  cpumonokaryonusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSystemInfo.cpuMonokaryonUsage)
}
::std::string* RealSystemInfo::mutable_cpumonokaryonusage() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSystemInfo.cpuMonokaryonUsage)
  return cpumonokaryonusage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSystemInfo::release_cpumonokaryonusage() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSystemInfo.cpuMonokaryonUsage)
  
  return cpumonokaryonusage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSystemInfo::set_allocated_cpumonokaryonusage(::std::string* cpumonokaryonusage) {
  if (cpumonokaryonusage != NULL) {
    
  } else {
    
  }
  cpumonokaryonusage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpumonokaryonusage);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSystemInfo.cpuMonokaryonUsage)
}

// double swapUsage = 20;
void RealSystemInfo::clear_swapusage() {
  swapusage_ = 0;
}
double RealSystemInfo::swapusage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.swapUsage)
  return swapusage_;
}
void RealSystemInfo::set_swapusage(double value) {
  
  swapusage_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.swapUsage)
}

// string agentVersion = 21;
void RealSystemInfo::clear_agentversion() {
  agentversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSystemInfo::agentversion() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSystemInfo.agentVersion)
  return agentversion_.GetNoArena();
}
void RealSystemInfo::set_agentversion(const ::std::string& value) {
  
  agentversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSystemInfo.agentVersion)
}
#if LANG_CXX11
void RealSystemInfo::set_agentversion(::std::string&& value) {
  
  agentversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSystemInfo.agentVersion)
}
#endif
void RealSystemInfo::set_agentversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agentversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSystemInfo.agentVersion)
}
void RealSystemInfo::set_agentversion(const char* value, size_t size) {
  
  agentversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSystemInfo.agentVersion)
}
::std::string* RealSystemInfo::mutable_agentversion() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSystemInfo.agentVersion)
  return agentversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSystemInfo::release_agentversion() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSystemInfo.agentVersion)
  
  return agentversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSystemInfo::set_allocated_agentversion(::std::string* agentversion) {
  if (agentversion != NULL) {
    
  } else {
    
  }
  agentversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agentversion);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSystemInfo.agentVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealDiskStatusInfo::kSingleDiskStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealDiskStatusInfo::RealDiskStatusInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.RealDiskStatusInfo)
}
RealDiskStatusInfo::RealDiskStatusInfo(const RealDiskStatusInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      singlediskstatus_(from.singlediskstatus_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.RealDiskStatusInfo)
}

void RealDiskStatusInfo::SharedCtor() {
  _cached_size_ = 0;
}

RealDiskStatusInfo::~RealDiskStatusInfo() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.RealDiskStatusInfo)
  SharedDtor();
}

void RealDiskStatusInfo::SharedDtor() {
}

void RealDiskStatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealDiskStatusInfo::descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealDiskStatusInfo& RealDiskStatusInfo::default_instance() {
  protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealDiskStatusInfo* RealDiskStatusInfo::New(::google::protobuf::Arena* arena) const {
  RealDiskStatusInfo* n = new RealDiskStatusInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealDiskStatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.RealDiskStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  singlediskstatus_.Clear();
  _internal_metadata_.Clear();
}

bool RealDiskStatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.RealDiskStatusInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.fiberhome.fums.proto.RealSingleDiskStatusInfo singleDiskStatus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_singlediskstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.RealDiskStatusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.RealDiskStatusInfo)
  return false;
#undef DO_
}

void RealDiskStatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.RealDiskStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.RealSingleDiskStatusInfo singleDiskStatus = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->singlediskstatus_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->singlediskstatus(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.RealDiskStatusInfo)
}

::google::protobuf::uint8* RealDiskStatusInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.RealDiskStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.RealSingleDiskStatusInfo singleDiskStatus = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->singlediskstatus_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->singlediskstatus(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.RealDiskStatusInfo)
  return target;
}

size_t RealDiskStatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.RealDiskStatusInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.fiberhome.fums.proto.RealSingleDiskStatusInfo singleDiskStatus = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->singlediskstatus_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singlediskstatus(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealDiskStatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.RealDiskStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RealDiskStatusInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealDiskStatusInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.RealDiskStatusInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.RealDiskStatusInfo)
    MergeFrom(*source);
  }
}

void RealDiskStatusInfo::MergeFrom(const RealDiskStatusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.RealDiskStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  singlediskstatus_.MergeFrom(from.singlediskstatus_);
}

void RealDiskStatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.RealDiskStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealDiskStatusInfo::CopyFrom(const RealDiskStatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.RealDiskStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealDiskStatusInfo::IsInitialized() const {
  return true;
}

void RealDiskStatusInfo::Swap(RealDiskStatusInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealDiskStatusInfo::InternalSwap(RealDiskStatusInfo* other) {
  using std::swap;
  singlediskstatus_.InternalSwap(&other->singlediskstatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealDiskStatusInfo::GetMetadata() const {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealDiskStatusInfo

// repeated .com.fiberhome.fums.proto.RealSingleDiskStatusInfo singleDiskStatus = 1;
int RealDiskStatusInfo::singlediskstatus_size() const {
  return singlediskstatus_.size();
}
void RealDiskStatusInfo::clear_singlediskstatus() {
  singlediskstatus_.Clear();
}
const ::com::fiberhome::fums::proto::RealSingleDiskStatusInfo& RealDiskStatusInfo::singlediskstatus(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealDiskStatusInfo.singleDiskStatus)
  return singlediskstatus_.Get(index);
}
::com::fiberhome::fums::proto::RealSingleDiskStatusInfo* RealDiskStatusInfo::mutable_singlediskstatus(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealDiskStatusInfo.singleDiskStatus)
  return singlediskstatus_.Mutable(index);
}
::com::fiberhome::fums::proto::RealSingleDiskStatusInfo* RealDiskStatusInfo::add_singlediskstatus() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.RealDiskStatusInfo.singleDiskStatus)
  return singlediskstatus_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::RealSingleDiskStatusInfo >*
RealDiskStatusInfo::mutable_singlediskstatus() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.RealDiskStatusInfo.singleDiskStatus)
  return &singlediskstatus_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::RealSingleDiskStatusInfo >&
RealDiskStatusInfo::singlediskstatus() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.RealDiskStatusInfo.singleDiskStatus)
  return singlediskstatus_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealSingleDiskStatusInfo::kDiskNameFieldNumber;
const int RealSingleDiskStatusInfo::kDiskServiceTimeFieldNumber;
const int RealSingleDiskStatusInfo::kDiskQueueFieldNumber;
const int RealSingleDiskStatusInfo::kDiskReadBytesFieldNumber;
const int RealSingleDiskStatusInfo::kDiskReadsFieldNumber;
const int RealSingleDiskStatusInfo::kDiskWriteBytesFieldNumber;
const int RealSingleDiskStatusInfo::kDiskWritesFieldNumber;
const int RealSingleDiskStatusInfo::kDiskTotalFieldNumber;
const int RealSingleDiskStatusInfo::kDiskAvailFieldNumber;
const int RealSingleDiskStatusInfo::kDiskUsageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealSingleDiskStatusInfo::RealSingleDiskStatusInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
}
RealSingleDiskStatusInfo::RealSingleDiskStatusInfo(const RealSingleDiskStatusInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskname().size() > 0) {
    diskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskname_);
  }
  diskservicetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskservicetime().size() > 0) {
    diskservicetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskservicetime_);
  }
  diskqueue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskqueue().size() > 0) {
    diskqueue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskqueue_);
  }
  diskreadbytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskreadbytes().size() > 0) {
    diskreadbytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskreadbytes_);
  }
  diskreads_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskreads().size() > 0) {
    diskreads_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskreads_);
  }
  diskwritebytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskwritebytes().size() > 0) {
    diskwritebytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskwritebytes_);
  }
  diskwrites_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskwrites().size() > 0) {
    diskwrites_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskwrites_);
  }
  disktotal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.disktotal().size() > 0) {
    disktotal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disktotal_);
  }
  diskavail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskavail().size() > 0) {
    diskavail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskavail_);
  }
  diskusage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskusage().size() > 0) {
    diskusage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskusage_);
  }
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
}

void RealSingleDiskStatusInfo::SharedCtor() {
  diskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskservicetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskqueue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskreadbytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskreads_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskwritebytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskwrites_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disktotal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskavail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskusage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RealSingleDiskStatusInfo::~RealSingleDiskStatusInfo() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
  SharedDtor();
}

void RealSingleDiskStatusInfo::SharedDtor() {
  diskname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskservicetime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskqueue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskreadbytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskreads_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskwritebytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskwrites_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disktotal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskavail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskusage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RealSingleDiskStatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealSingleDiskStatusInfo::descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealSingleDiskStatusInfo& RealSingleDiskStatusInfo::default_instance() {
  protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealSingleDiskStatusInfo* RealSingleDiskStatusInfo::New(::google::protobuf::Arena* arena) const {
  RealSingleDiskStatusInfo* n = new RealSingleDiskStatusInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealSingleDiskStatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskservicetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskqueue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskreadbytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskreads_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskwritebytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskwrites_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disktotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskavail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskusage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RealSingleDiskStatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diskName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskname().data(), static_cast<int>(this->diskname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskServiceTime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskservicetime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskservicetime().data(), static_cast<int>(this->diskservicetime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskServiceTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskQueue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskqueue()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskqueue().data(), static_cast<int>(this->diskqueue().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskQueue"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskReadBytes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskreadbytes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskreadbytes().data(), static_cast<int>(this->diskreadbytes().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReadBytes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskReads = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskreads()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskreads().data(), static_cast<int>(this->diskreads().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReads"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskWriteBytes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskwritebytes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskwritebytes().data(), static_cast<int>(this->diskwritebytes().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWriteBytes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskWrites = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskwrites()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskwrites().data(), static_cast<int>(this->diskwrites().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWrites"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskTotal = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disktotal()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->disktotal().data(), static_cast<int>(this->disktotal().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskTotal"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskAvail = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskavail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskavail().data(), static_cast<int>(this->diskavail().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskAvail"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskUsage = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskusage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskusage().data(), static_cast<int>(this->diskusage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskUsage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
  return false;
#undef DO_
}

void RealSingleDiskStatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diskName = 1;
  if (this->diskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskname().data(), static_cast<int>(this->diskname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diskname(), output);
  }

  // string diskServiceTime = 2;
  if (this->diskservicetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskservicetime().data(), static_cast<int>(this->diskservicetime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskServiceTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->diskservicetime(), output);
  }

  // string diskQueue = 3;
  if (this->diskqueue().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskqueue().data(), static_cast<int>(this->diskqueue().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskQueue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->diskqueue(), output);
  }

  // string diskReadBytes = 4;
  if (this->diskreadbytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskreadbytes().data(), static_cast<int>(this->diskreadbytes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReadBytes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->diskreadbytes(), output);
  }

  // string diskReads = 5;
  if (this->diskreads().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskreads().data(), static_cast<int>(this->diskreads().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReads");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->diskreads(), output);
  }

  // string diskWriteBytes = 6;
  if (this->diskwritebytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskwritebytes().data(), static_cast<int>(this->diskwritebytes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWriteBytes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->diskwritebytes(), output);
  }

  // string diskWrites = 7;
  if (this->diskwrites().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskwrites().data(), static_cast<int>(this->diskwrites().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWrites");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->diskwrites(), output);
  }

  // string diskTotal = 8;
  if (this->disktotal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disktotal().data(), static_cast<int>(this->disktotal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskTotal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->disktotal(), output);
  }

  // string diskAvail = 9;
  if (this->diskavail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskavail().data(), static_cast<int>(this->diskavail().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskAvail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->diskavail(), output);
  }

  // string diskUsage = 10;
  if (this->diskusage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskusage().data(), static_cast<int>(this->diskusage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskUsage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->diskusage(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
}

::google::protobuf::uint8* RealSingleDiskStatusInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diskName = 1;
  if (this->diskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskname().data(), static_cast<int>(this->diskname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->diskname(), target);
  }

  // string diskServiceTime = 2;
  if (this->diskservicetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskservicetime().data(), static_cast<int>(this->diskservicetime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskServiceTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->diskservicetime(), target);
  }

  // string diskQueue = 3;
  if (this->diskqueue().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskqueue().data(), static_cast<int>(this->diskqueue().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskQueue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->diskqueue(), target);
  }

  // string diskReadBytes = 4;
  if (this->diskreadbytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskreadbytes().data(), static_cast<int>(this->diskreadbytes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReadBytes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->diskreadbytes(), target);
  }

  // string diskReads = 5;
  if (this->diskreads().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskreads().data(), static_cast<int>(this->diskreads().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReads");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->diskreads(), target);
  }

  // string diskWriteBytes = 6;
  if (this->diskwritebytes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskwritebytes().data(), static_cast<int>(this->diskwritebytes().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWriteBytes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->diskwritebytes(), target);
  }

  // string diskWrites = 7;
  if (this->diskwrites().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskwrites().data(), static_cast<int>(this->diskwrites().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWrites");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->diskwrites(), target);
  }

  // string diskTotal = 8;
  if (this->disktotal().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disktotal().data(), static_cast<int>(this->disktotal().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskTotal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->disktotal(), target);
  }

  // string diskAvail = 9;
  if (this->diskavail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskavail().data(), static_cast<int>(this->diskavail().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskAvail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->diskavail(), target);
  }

  // string diskUsage = 10;
  if (this->diskusage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskusage().data(), static_cast<int>(this->diskusage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskUsage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->diskusage(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
  return target;
}

size_t RealSingleDiskStatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string diskName = 1;
  if (this->diskname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskname());
  }

  // string diskServiceTime = 2;
  if (this->diskservicetime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskservicetime());
  }

  // string diskQueue = 3;
  if (this->diskqueue().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskqueue());
  }

  // string diskReadBytes = 4;
  if (this->diskreadbytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskreadbytes());
  }

  // string diskReads = 5;
  if (this->diskreads().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskreads());
  }

  // string diskWriteBytes = 6;
  if (this->diskwritebytes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskwritebytes());
  }

  // string diskWrites = 7;
  if (this->diskwrites().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskwrites());
  }

  // string diskTotal = 8;
  if (this->disktotal().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->disktotal());
  }

  // string diskAvail = 9;
  if (this->diskavail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskavail());
  }

  // string diskUsage = 10;
  if (this->diskusage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskusage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealSingleDiskStatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RealSingleDiskStatusInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealSingleDiskStatusInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
    MergeFrom(*source);
  }
}

void RealSingleDiskStatusInfo::MergeFrom(const RealSingleDiskStatusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diskname().size() > 0) {

    diskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskname_);
  }
  if (from.diskservicetime().size() > 0) {

    diskservicetime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskservicetime_);
  }
  if (from.diskqueue().size() > 0) {

    diskqueue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskqueue_);
  }
  if (from.diskreadbytes().size() > 0) {

    diskreadbytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskreadbytes_);
  }
  if (from.diskreads().size() > 0) {

    diskreads_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskreads_);
  }
  if (from.diskwritebytes().size() > 0) {

    diskwritebytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskwritebytes_);
  }
  if (from.diskwrites().size() > 0) {

    diskwrites_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskwrites_);
  }
  if (from.disktotal().size() > 0) {

    disktotal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disktotal_);
  }
  if (from.diskavail().size() > 0) {

    diskavail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskavail_);
  }
  if (from.diskusage().size() > 0) {

    diskusage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskusage_);
  }
}

void RealSingleDiskStatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealSingleDiskStatusInfo::CopyFrom(const RealSingleDiskStatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.RealSingleDiskStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealSingleDiskStatusInfo::IsInitialized() const {
  return true;
}

void RealSingleDiskStatusInfo::Swap(RealSingleDiskStatusInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealSingleDiskStatusInfo::InternalSwap(RealSingleDiskStatusInfo* other) {
  using std::swap;
  diskname_.Swap(&other->diskname_);
  diskservicetime_.Swap(&other->diskservicetime_);
  diskqueue_.Swap(&other->diskqueue_);
  diskreadbytes_.Swap(&other->diskreadbytes_);
  diskreads_.Swap(&other->diskreads_);
  diskwritebytes_.Swap(&other->diskwritebytes_);
  diskwrites_.Swap(&other->diskwrites_);
  disktotal_.Swap(&other->disktotal_);
  diskavail_.Swap(&other->diskavail_);
  diskusage_.Swap(&other->diskusage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealSingleDiskStatusInfo::GetMetadata() const {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealSingleDiskStatusInfo

// string diskName = 1;
void RealSingleDiskStatusInfo::clear_diskname() {
  diskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskStatusInfo::diskname() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskName)
  return diskname_.GetNoArena();
}
void RealSingleDiskStatusInfo::set_diskname(const ::std::string& value) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskName)
}
#if LANG_CXX11
void RealSingleDiskStatusInfo::set_diskname(::std::string&& value) {
  
  diskname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskName)
}
#endif
void RealSingleDiskStatusInfo::set_diskname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskName)
}
void RealSingleDiskStatusInfo::set_diskname(const char* value, size_t size) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskName)
}
::std::string* RealSingleDiskStatusInfo::mutable_diskname() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskName)
  return diskname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskStatusInfo::release_diskname() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskName)
  
  return diskname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskStatusInfo::set_allocated_diskname(::std::string* diskname) {
  if (diskname != NULL) {
    
  } else {
    
  }
  diskname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskname);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskName)
}

// string diskServiceTime = 2;
void RealSingleDiskStatusInfo::clear_diskservicetime() {
  diskservicetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskStatusInfo::diskservicetime() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskServiceTime)
  return diskservicetime_.GetNoArena();
}
void RealSingleDiskStatusInfo::set_diskservicetime(const ::std::string& value) {
  
  diskservicetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskServiceTime)
}
#if LANG_CXX11
void RealSingleDiskStatusInfo::set_diskservicetime(::std::string&& value) {
  
  diskservicetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskServiceTime)
}
#endif
void RealSingleDiskStatusInfo::set_diskservicetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskservicetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskServiceTime)
}
void RealSingleDiskStatusInfo::set_diskservicetime(const char* value, size_t size) {
  
  diskservicetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskServiceTime)
}
::std::string* RealSingleDiskStatusInfo::mutable_diskservicetime() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskServiceTime)
  return diskservicetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskStatusInfo::release_diskservicetime() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskServiceTime)
  
  return diskservicetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskStatusInfo::set_allocated_diskservicetime(::std::string* diskservicetime) {
  if (diskservicetime != NULL) {
    
  } else {
    
  }
  diskservicetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskservicetime);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskServiceTime)
}

// string diskQueue = 3;
void RealSingleDiskStatusInfo::clear_diskqueue() {
  diskqueue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskStatusInfo::diskqueue() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskQueue)
  return diskqueue_.GetNoArena();
}
void RealSingleDiskStatusInfo::set_diskqueue(const ::std::string& value) {
  
  diskqueue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskQueue)
}
#if LANG_CXX11
void RealSingleDiskStatusInfo::set_diskqueue(::std::string&& value) {
  
  diskqueue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskQueue)
}
#endif
void RealSingleDiskStatusInfo::set_diskqueue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskqueue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskQueue)
}
void RealSingleDiskStatusInfo::set_diskqueue(const char* value, size_t size) {
  
  diskqueue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskQueue)
}
::std::string* RealSingleDiskStatusInfo::mutable_diskqueue() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskQueue)
  return diskqueue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskStatusInfo::release_diskqueue() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskQueue)
  
  return diskqueue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskStatusInfo::set_allocated_diskqueue(::std::string* diskqueue) {
  if (diskqueue != NULL) {
    
  } else {
    
  }
  diskqueue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskqueue);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskQueue)
}

// string diskReadBytes = 4;
void RealSingleDiskStatusInfo::clear_diskreadbytes() {
  diskreadbytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskStatusInfo::diskreadbytes() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReadBytes)
  return diskreadbytes_.GetNoArena();
}
void RealSingleDiskStatusInfo::set_diskreadbytes(const ::std::string& value) {
  
  diskreadbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReadBytes)
}
#if LANG_CXX11
void RealSingleDiskStatusInfo::set_diskreadbytes(::std::string&& value) {
  
  diskreadbytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReadBytes)
}
#endif
void RealSingleDiskStatusInfo::set_diskreadbytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskreadbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReadBytes)
}
void RealSingleDiskStatusInfo::set_diskreadbytes(const char* value, size_t size) {
  
  diskreadbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReadBytes)
}
::std::string* RealSingleDiskStatusInfo::mutable_diskreadbytes() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReadBytes)
  return diskreadbytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskStatusInfo::release_diskreadbytes() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReadBytes)
  
  return diskreadbytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskStatusInfo::set_allocated_diskreadbytes(::std::string* diskreadbytes) {
  if (diskreadbytes != NULL) {
    
  } else {
    
  }
  diskreadbytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskreadbytes);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReadBytes)
}

// string diskReads = 5;
void RealSingleDiskStatusInfo::clear_diskreads() {
  diskreads_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskStatusInfo::diskreads() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReads)
  return diskreads_.GetNoArena();
}
void RealSingleDiskStatusInfo::set_diskreads(const ::std::string& value) {
  
  diskreads_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReads)
}
#if LANG_CXX11
void RealSingleDiskStatusInfo::set_diskreads(::std::string&& value) {
  
  diskreads_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReads)
}
#endif
void RealSingleDiskStatusInfo::set_diskreads(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskreads_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReads)
}
void RealSingleDiskStatusInfo::set_diskreads(const char* value, size_t size) {
  
  diskreads_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReads)
}
::std::string* RealSingleDiskStatusInfo::mutable_diskreads() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReads)
  return diskreads_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskStatusInfo::release_diskreads() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReads)
  
  return diskreads_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskStatusInfo::set_allocated_diskreads(::std::string* diskreads) {
  if (diskreads != NULL) {
    
  } else {
    
  }
  diskreads_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskreads);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskReads)
}

// string diskWriteBytes = 6;
void RealSingleDiskStatusInfo::clear_diskwritebytes() {
  diskwritebytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskStatusInfo::diskwritebytes() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWriteBytes)
  return diskwritebytes_.GetNoArena();
}
void RealSingleDiskStatusInfo::set_diskwritebytes(const ::std::string& value) {
  
  diskwritebytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWriteBytes)
}
#if LANG_CXX11
void RealSingleDiskStatusInfo::set_diskwritebytes(::std::string&& value) {
  
  diskwritebytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWriteBytes)
}
#endif
void RealSingleDiskStatusInfo::set_diskwritebytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskwritebytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWriteBytes)
}
void RealSingleDiskStatusInfo::set_diskwritebytes(const char* value, size_t size) {
  
  diskwritebytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWriteBytes)
}
::std::string* RealSingleDiskStatusInfo::mutable_diskwritebytes() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWriteBytes)
  return diskwritebytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskStatusInfo::release_diskwritebytes() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWriteBytes)
  
  return diskwritebytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskStatusInfo::set_allocated_diskwritebytes(::std::string* diskwritebytes) {
  if (diskwritebytes != NULL) {
    
  } else {
    
  }
  diskwritebytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskwritebytes);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWriteBytes)
}

// string diskWrites = 7;
void RealSingleDiskStatusInfo::clear_diskwrites() {
  diskwrites_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskStatusInfo::diskwrites() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWrites)
  return diskwrites_.GetNoArena();
}
void RealSingleDiskStatusInfo::set_diskwrites(const ::std::string& value) {
  
  diskwrites_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWrites)
}
#if LANG_CXX11
void RealSingleDiskStatusInfo::set_diskwrites(::std::string&& value) {
  
  diskwrites_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWrites)
}
#endif
void RealSingleDiskStatusInfo::set_diskwrites(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskwrites_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWrites)
}
void RealSingleDiskStatusInfo::set_diskwrites(const char* value, size_t size) {
  
  diskwrites_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWrites)
}
::std::string* RealSingleDiskStatusInfo::mutable_diskwrites() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWrites)
  return diskwrites_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskStatusInfo::release_diskwrites() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWrites)
  
  return diskwrites_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskStatusInfo::set_allocated_diskwrites(::std::string* diskwrites) {
  if (diskwrites != NULL) {
    
  } else {
    
  }
  diskwrites_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskwrites);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskWrites)
}

// string diskTotal = 8;
void RealSingleDiskStatusInfo::clear_disktotal() {
  disktotal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskStatusInfo::disktotal() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskTotal)
  return disktotal_.GetNoArena();
}
void RealSingleDiskStatusInfo::set_disktotal(const ::std::string& value) {
  
  disktotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskTotal)
}
#if LANG_CXX11
void RealSingleDiskStatusInfo::set_disktotal(::std::string&& value) {
  
  disktotal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskTotal)
}
#endif
void RealSingleDiskStatusInfo::set_disktotal(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  disktotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskTotal)
}
void RealSingleDiskStatusInfo::set_disktotal(const char* value, size_t size) {
  
  disktotal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskTotal)
}
::std::string* RealSingleDiskStatusInfo::mutable_disktotal() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskTotal)
  return disktotal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskStatusInfo::release_disktotal() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskTotal)
  
  return disktotal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskStatusInfo::set_allocated_disktotal(::std::string* disktotal) {
  if (disktotal != NULL) {
    
  } else {
    
  }
  disktotal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disktotal);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskTotal)
}

// string diskAvail = 9;
void RealSingleDiskStatusInfo::clear_diskavail() {
  diskavail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskStatusInfo::diskavail() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskAvail)
  return diskavail_.GetNoArena();
}
void RealSingleDiskStatusInfo::set_diskavail(const ::std::string& value) {
  
  diskavail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskAvail)
}
#if LANG_CXX11
void RealSingleDiskStatusInfo::set_diskavail(::std::string&& value) {
  
  diskavail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskAvail)
}
#endif
void RealSingleDiskStatusInfo::set_diskavail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskavail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskAvail)
}
void RealSingleDiskStatusInfo::set_diskavail(const char* value, size_t size) {
  
  diskavail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskAvail)
}
::std::string* RealSingleDiskStatusInfo::mutable_diskavail() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskAvail)
  return diskavail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskStatusInfo::release_diskavail() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskAvail)
  
  return diskavail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskStatusInfo::set_allocated_diskavail(::std::string* diskavail) {
  if (diskavail != NULL) {
    
  } else {
    
  }
  diskavail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskavail);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskAvail)
}

// string diskUsage = 10;
void RealSingleDiskStatusInfo::clear_diskusage() {
  diskusage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskStatusInfo::diskusage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskUsage)
  return diskusage_.GetNoArena();
}
void RealSingleDiskStatusInfo::set_diskusage(const ::std::string& value) {
  
  diskusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskUsage)
}
#if LANG_CXX11
void RealSingleDiskStatusInfo::set_diskusage(::std::string&& value) {
  
  diskusage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskUsage)
}
#endif
void RealSingleDiskStatusInfo::set_diskusage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskUsage)
}
void RealSingleDiskStatusInfo::set_diskusage(const char* value, size_t size) {
  
  diskusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskUsage)
}
::std::string* RealSingleDiskStatusInfo::mutable_diskusage() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskUsage)
  return diskusage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskStatusInfo::release_diskusage() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskUsage)
  
  return diskusage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskStatusInfo::set_allocated_diskusage(::std::string* diskusage) {
  if (diskusage != NULL) {
    
  } else {
    
  }
  diskusage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskusage);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskStatusInfo.diskUsage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealDiskCfgInfo::kSingleDiskInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealDiskCfgInfo::RealDiskCfgInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.RealDiskCfgInfo)
}
RealDiskCfgInfo::RealDiskCfgInfo(const RealDiskCfgInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      singlediskinfo_(from.singlediskinfo_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.RealDiskCfgInfo)
}

void RealDiskCfgInfo::SharedCtor() {
  _cached_size_ = 0;
}

RealDiskCfgInfo::~RealDiskCfgInfo() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.RealDiskCfgInfo)
  SharedDtor();
}

void RealDiskCfgInfo::SharedDtor() {
}

void RealDiskCfgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealDiskCfgInfo::descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealDiskCfgInfo& RealDiskCfgInfo::default_instance() {
  protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealDiskCfgInfo* RealDiskCfgInfo::New(::google::protobuf::Arena* arena) const {
  RealDiskCfgInfo* n = new RealDiskCfgInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealDiskCfgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.RealDiskCfgInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  singlediskinfo_.Clear();
  _internal_metadata_.Clear();
}

bool RealDiskCfgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.RealDiskCfgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.fiberhome.fums.proto.RealSingleDiskCfgInfo singleDiskInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_singlediskinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.RealDiskCfgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.RealDiskCfgInfo)
  return false;
#undef DO_
}

void RealDiskCfgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.RealDiskCfgInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.RealSingleDiskCfgInfo singleDiskInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->singlediskinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->singlediskinfo(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.RealDiskCfgInfo)
}

::google::protobuf::uint8* RealDiskCfgInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.RealDiskCfgInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.RealSingleDiskCfgInfo singleDiskInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->singlediskinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->singlediskinfo(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.RealDiskCfgInfo)
  return target;
}

size_t RealDiskCfgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.RealDiskCfgInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.fiberhome.fums.proto.RealSingleDiskCfgInfo singleDiskInfo = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->singlediskinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singlediskinfo(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealDiskCfgInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.RealDiskCfgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RealDiskCfgInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealDiskCfgInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.RealDiskCfgInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.RealDiskCfgInfo)
    MergeFrom(*source);
  }
}

void RealDiskCfgInfo::MergeFrom(const RealDiskCfgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.RealDiskCfgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  singlediskinfo_.MergeFrom(from.singlediskinfo_);
}

void RealDiskCfgInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.RealDiskCfgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealDiskCfgInfo::CopyFrom(const RealDiskCfgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.RealDiskCfgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealDiskCfgInfo::IsInitialized() const {
  return true;
}

void RealDiskCfgInfo::Swap(RealDiskCfgInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealDiskCfgInfo::InternalSwap(RealDiskCfgInfo* other) {
  using std::swap;
  singlediskinfo_.InternalSwap(&other->singlediskinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealDiskCfgInfo::GetMetadata() const {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealDiskCfgInfo

// repeated .com.fiberhome.fums.proto.RealSingleDiskCfgInfo singleDiskInfo = 1;
int RealDiskCfgInfo::singlediskinfo_size() const {
  return singlediskinfo_.size();
}
void RealDiskCfgInfo::clear_singlediskinfo() {
  singlediskinfo_.Clear();
}
const ::com::fiberhome::fums::proto::RealSingleDiskCfgInfo& RealDiskCfgInfo::singlediskinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealDiskCfgInfo.singleDiskInfo)
  return singlediskinfo_.Get(index);
}
::com::fiberhome::fums::proto::RealSingleDiskCfgInfo* RealDiskCfgInfo::mutable_singlediskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealDiskCfgInfo.singleDiskInfo)
  return singlediskinfo_.Mutable(index);
}
::com::fiberhome::fums::proto::RealSingleDiskCfgInfo* RealDiskCfgInfo::add_singlediskinfo() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.RealDiskCfgInfo.singleDiskInfo)
  return singlediskinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::RealSingleDiskCfgInfo >*
RealDiskCfgInfo::mutable_singlediskinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.RealDiskCfgInfo.singleDiskInfo)
  return &singlediskinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::RealSingleDiskCfgInfo >&
RealDiskCfgInfo::singlediskinfo() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.RealDiskCfgInfo.singleDiskInfo)
  return singlediskinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealSingleDiskCfgInfo::kDiskIndexFieldNumber;
const int RealSingleDiskCfgInfo::kDiskNameFieldNumber;
const int RealSingleDiskCfgInfo::kDiskSizeFieldNumber;
const int RealSingleDiskCfgInfo::kDiskSeqNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealSingleDiskCfgInfo::RealSingleDiskCfgInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
}
RealSingleDiskCfgInfo::RealSingleDiskCfgInfo(const RealSingleDiskCfgInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskname().size() > 0) {
    diskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskname_);
  }
  disksize_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.disksize().size() > 0) {
    disksize_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disksize_);
  }
  diskseqno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskseqno().size() > 0) {
    diskseqno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskseqno_);
  }
  diskindex_ = from.diskindex_;
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
}

void RealSingleDiskCfgInfo::SharedCtor() {
  diskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disksize_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskseqno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskindex_ = 0;
  _cached_size_ = 0;
}

RealSingleDiskCfgInfo::~RealSingleDiskCfgInfo() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
  SharedDtor();
}

void RealSingleDiskCfgInfo::SharedDtor() {
  diskname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disksize_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskseqno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RealSingleDiskCfgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealSingleDiskCfgInfo::descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealSingleDiskCfgInfo& RealSingleDiskCfgInfo::default_instance() {
  protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealSingleDiskCfgInfo* RealSingleDiskCfgInfo::New(::google::protobuf::Arena* arena) const {
  RealSingleDiskCfgInfo* n = new RealSingleDiskCfgInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealSingleDiskCfgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disksize_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskseqno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diskindex_ = 0;
  _internal_metadata_.Clear();
}

bool RealSingleDiskCfgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 diskIndex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diskindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskname().data(), static_cast<int>(this->diskname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disksize()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->disksize().data(), static_cast<int>(this->disksize().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSize"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string diskSeqNo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskseqno()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskseqno().data(), static_cast<int>(this->diskseqno().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSeqNo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
  return false;
#undef DO_
}

void RealSingleDiskCfgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 diskIndex = 1;
  if (this->diskindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->diskindex(), output);
  }

  // string diskName = 2;
  if (this->diskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskname().data(), static_cast<int>(this->diskname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->diskname(), output);
  }

  // string diskSize = 3;
  if (this->disksize().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disksize().data(), static_cast<int>(this->disksize().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSize");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->disksize(), output);
  }

  // string diskSeqNo = 4;
  if (this->diskseqno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskseqno().data(), static_cast<int>(this->diskseqno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSeqNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->diskseqno(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
}

::google::protobuf::uint8* RealSingleDiskCfgInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 diskIndex = 1;
  if (this->diskindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->diskindex(), target);
  }

  // string diskName = 2;
  if (this->diskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskname().data(), static_cast<int>(this->diskname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->diskname(), target);
  }

  // string diskSize = 3;
  if (this->disksize().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->disksize().data(), static_cast<int>(this->disksize().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSize");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->disksize(), target);
  }

  // string diskSeqNo = 4;
  if (this->diskseqno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskseqno().data(), static_cast<int>(this->diskseqno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSeqNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->diskseqno(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
  return target;
}

size_t RealSingleDiskCfgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string diskName = 2;
  if (this->diskname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskname());
  }

  // string diskSize = 3;
  if (this->disksize().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->disksize());
  }

  // string diskSeqNo = 4;
  if (this->diskseqno().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskseqno());
  }

  // int32 diskIndex = 1;
  if (this->diskindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diskindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealSingleDiskCfgInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RealSingleDiskCfgInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealSingleDiskCfgInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
    MergeFrom(*source);
  }
}

void RealSingleDiskCfgInfo::MergeFrom(const RealSingleDiskCfgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diskname().size() > 0) {

    diskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskname_);
  }
  if (from.disksize().size() > 0) {

    disksize_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.disksize_);
  }
  if (from.diskseqno().size() > 0) {

    diskseqno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskseqno_);
  }
  if (from.diskindex() != 0) {
    set_diskindex(from.diskindex());
  }
}

void RealSingleDiskCfgInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealSingleDiskCfgInfo::CopyFrom(const RealSingleDiskCfgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.RealSingleDiskCfgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealSingleDiskCfgInfo::IsInitialized() const {
  return true;
}

void RealSingleDiskCfgInfo::Swap(RealSingleDiskCfgInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealSingleDiskCfgInfo::InternalSwap(RealSingleDiskCfgInfo* other) {
  using std::swap;
  diskname_.Swap(&other->diskname_);
  disksize_.Swap(&other->disksize_);
  diskseqno_.Swap(&other->diskseqno_);
  swap(diskindex_, other->diskindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealSingleDiskCfgInfo::GetMetadata() const {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealSingleDiskCfgInfo

// int32 diskIndex = 1;
void RealSingleDiskCfgInfo::clear_diskindex() {
  diskindex_ = 0;
}
::google::protobuf::int32 RealSingleDiskCfgInfo::diskindex() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskIndex)
  return diskindex_;
}
void RealSingleDiskCfgInfo::set_diskindex(::google::protobuf::int32 value) {
  
  diskindex_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskIndex)
}

// string diskName = 2;
void RealSingleDiskCfgInfo::clear_diskname() {
  diskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskCfgInfo::diskname() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskName)
  return diskname_.GetNoArena();
}
void RealSingleDiskCfgInfo::set_diskname(const ::std::string& value) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskName)
}
#if LANG_CXX11
void RealSingleDiskCfgInfo::set_diskname(::std::string&& value) {
  
  diskname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskName)
}
#endif
void RealSingleDiskCfgInfo::set_diskname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskName)
}
void RealSingleDiskCfgInfo::set_diskname(const char* value, size_t size) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskName)
}
::std::string* RealSingleDiskCfgInfo::mutable_diskname() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskName)
  return diskname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskCfgInfo::release_diskname() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskName)
  
  return diskname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskCfgInfo::set_allocated_diskname(::std::string* diskname) {
  if (diskname != NULL) {
    
  } else {
    
  }
  diskname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskname);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskName)
}

// string diskSize = 3;
void RealSingleDiskCfgInfo::clear_disksize() {
  disksize_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskCfgInfo::disksize() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSize)
  return disksize_.GetNoArena();
}
void RealSingleDiskCfgInfo::set_disksize(const ::std::string& value) {
  
  disksize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSize)
}
#if LANG_CXX11
void RealSingleDiskCfgInfo::set_disksize(::std::string&& value) {
  
  disksize_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSize)
}
#endif
void RealSingleDiskCfgInfo::set_disksize(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  disksize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSize)
}
void RealSingleDiskCfgInfo::set_disksize(const char* value, size_t size) {
  
  disksize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSize)
}
::std::string* RealSingleDiskCfgInfo::mutable_disksize() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSize)
  return disksize_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskCfgInfo::release_disksize() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSize)
  
  return disksize_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskCfgInfo::set_allocated_disksize(::std::string* disksize) {
  if (disksize != NULL) {
    
  } else {
    
  }
  disksize_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disksize);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSize)
}

// string diskSeqNo = 4;
void RealSingleDiskCfgInfo::clear_diskseqno() {
  diskseqno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskCfgInfo::diskseqno() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSeqNo)
  return diskseqno_.GetNoArena();
}
void RealSingleDiskCfgInfo::set_diskseqno(const ::std::string& value) {
  
  diskseqno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSeqNo)
}
#if LANG_CXX11
void RealSingleDiskCfgInfo::set_diskseqno(::std::string&& value) {
  
  diskseqno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSeqNo)
}
#endif
void RealSingleDiskCfgInfo::set_diskseqno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskseqno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSeqNo)
}
void RealSingleDiskCfgInfo::set_diskseqno(const char* value, size_t size) {
  
  diskseqno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSeqNo)
}
::std::string* RealSingleDiskCfgInfo::mutable_diskseqno() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSeqNo)
  return diskseqno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskCfgInfo::release_diskseqno() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSeqNo)
  
  return diskseqno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskCfgInfo::set_allocated_diskseqno(::std::string* diskseqno) {
  if (diskseqno != NULL) {
    
  } else {
    
  }
  diskseqno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskseqno);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskCfgInfo.diskSeqNo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealDiskRaidCfgInfo::kPersonalitiesFieldNumber;
const int RealDiskRaidCfgInfo::kUnusedDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealDiskRaidCfgInfo::RealDiskRaidCfgInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
}
RealDiskRaidCfgInfo::RealDiskRaidCfgInfo(const RealDiskRaidCfgInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  personalities_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.personalities().size() > 0) {
    personalities_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.personalities_);
  }
  unuseddevices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unuseddevices().size() > 0) {
    unuseddevices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unuseddevices_);
  }
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
}

void RealDiskRaidCfgInfo::SharedCtor() {
  personalities_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unuseddevices_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RealDiskRaidCfgInfo::~RealDiskRaidCfgInfo() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
  SharedDtor();
}

void RealDiskRaidCfgInfo::SharedDtor() {
  personalities_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unuseddevices_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RealDiskRaidCfgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealDiskRaidCfgInfo::descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealDiskRaidCfgInfo& RealDiskRaidCfgInfo::default_instance() {
  protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealDiskRaidCfgInfo* RealDiskRaidCfgInfo::New(::google::protobuf::Arena* arena) const {
  RealDiskRaidCfgInfo* n = new RealDiskRaidCfgInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealDiskRaidCfgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  personalities_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unuseddevices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RealDiskRaidCfgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string personalities = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_personalities()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->personalities().data(), static_cast<int>(this->personalities().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealDiskRaidCfgInfo.personalities"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unusedDevices = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unuseddevices()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unuseddevices().data(), static_cast<int>(this->unuseddevices().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealDiskRaidCfgInfo.unusedDevices"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
  return false;
#undef DO_
}

void RealDiskRaidCfgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string personalities = 1;
  if (this->personalities().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->personalities().data(), static_cast<int>(this->personalities().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealDiskRaidCfgInfo.personalities");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->personalities(), output);
  }

  // string unusedDevices = 2;
  if (this->unuseddevices().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unuseddevices().data(), static_cast<int>(this->unuseddevices().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealDiskRaidCfgInfo.unusedDevices");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->unuseddevices(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
}

::google::protobuf::uint8* RealDiskRaidCfgInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string personalities = 1;
  if (this->personalities().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->personalities().data(), static_cast<int>(this->personalities().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealDiskRaidCfgInfo.personalities");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->personalities(), target);
  }

  // string unusedDevices = 2;
  if (this->unuseddevices().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unuseddevices().data(), static_cast<int>(this->unuseddevices().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealDiskRaidCfgInfo.unusedDevices");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unuseddevices(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
  return target;
}

size_t RealDiskRaidCfgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string personalities = 1;
  if (this->personalities().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->personalities());
  }

  // string unusedDevices = 2;
  if (this->unuseddevices().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unuseddevices());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealDiskRaidCfgInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RealDiskRaidCfgInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealDiskRaidCfgInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
    MergeFrom(*source);
  }
}

void RealDiskRaidCfgInfo::MergeFrom(const RealDiskRaidCfgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.personalities().size() > 0) {

    personalities_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.personalities_);
  }
  if (from.unuseddevices().size() > 0) {

    unuseddevices_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unuseddevices_);
  }
}

void RealDiskRaidCfgInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealDiskRaidCfgInfo::CopyFrom(const RealDiskRaidCfgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.RealDiskRaidCfgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealDiskRaidCfgInfo::IsInitialized() const {
  return true;
}

void RealDiskRaidCfgInfo::Swap(RealDiskRaidCfgInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealDiskRaidCfgInfo::InternalSwap(RealDiskRaidCfgInfo* other) {
  using std::swap;
  personalities_.Swap(&other->personalities_);
  unuseddevices_.Swap(&other->unuseddevices_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealDiskRaidCfgInfo::GetMetadata() const {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealDiskRaidCfgInfo

// string personalities = 1;
void RealDiskRaidCfgInfo::clear_personalities() {
  personalities_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealDiskRaidCfgInfo::personalities() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.personalities)
  return personalities_.GetNoArena();
}
void RealDiskRaidCfgInfo::set_personalities(const ::std::string& value) {
  
  personalities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.personalities)
}
#if LANG_CXX11
void RealDiskRaidCfgInfo::set_personalities(::std::string&& value) {
  
  personalities_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.personalities)
}
#endif
void RealDiskRaidCfgInfo::set_personalities(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  personalities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.personalities)
}
void RealDiskRaidCfgInfo::set_personalities(const char* value, size_t size) {
  
  personalities_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.personalities)
}
::std::string* RealDiskRaidCfgInfo::mutable_personalities() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.personalities)
  return personalities_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealDiskRaidCfgInfo::release_personalities() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.personalities)
  
  return personalities_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealDiskRaidCfgInfo::set_allocated_personalities(::std::string* personalities) {
  if (personalities != NULL) {
    
  } else {
    
  }
  personalities_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), personalities);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.personalities)
}

// string unusedDevices = 2;
void RealDiskRaidCfgInfo::clear_unuseddevices() {
  unuseddevices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealDiskRaidCfgInfo::unuseddevices() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.unusedDevices)
  return unuseddevices_.GetNoArena();
}
void RealDiskRaidCfgInfo::set_unuseddevices(const ::std::string& value) {
  
  unuseddevices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.unusedDevices)
}
#if LANG_CXX11
void RealDiskRaidCfgInfo::set_unuseddevices(::std::string&& value) {
  
  unuseddevices_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.unusedDevices)
}
#endif
void RealDiskRaidCfgInfo::set_unuseddevices(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  unuseddevices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.unusedDevices)
}
void RealDiskRaidCfgInfo::set_unuseddevices(const char* value, size_t size) {
  
  unuseddevices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.unusedDevices)
}
::std::string* RealDiskRaidCfgInfo::mutable_unuseddevices() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.unusedDevices)
  return unuseddevices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealDiskRaidCfgInfo::release_unuseddevices() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.unusedDevices)
  
  return unuseddevices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealDiskRaidCfgInfo::set_allocated_unuseddevices(::std::string* unuseddevices) {
  if (unuseddevices != NULL) {
    
  } else {
    
  }
  unuseddevices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unuseddevices);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealDiskRaidCfgInfo.unusedDevices)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealDiskHealthInfo::kSingleDiskHealthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealDiskHealthInfo::RealDiskHealthInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.RealDiskHealthInfo)
}
RealDiskHealthInfo::RealDiskHealthInfo(const RealDiskHealthInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      singlediskhealth_(from.singlediskhealth_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.RealDiskHealthInfo)
}

void RealDiskHealthInfo::SharedCtor() {
  _cached_size_ = 0;
}

RealDiskHealthInfo::~RealDiskHealthInfo() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.RealDiskHealthInfo)
  SharedDtor();
}

void RealDiskHealthInfo::SharedDtor() {
}

void RealDiskHealthInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealDiskHealthInfo::descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealDiskHealthInfo& RealDiskHealthInfo::default_instance() {
  protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealDiskHealthInfo* RealDiskHealthInfo::New(::google::protobuf::Arena* arena) const {
  RealDiskHealthInfo* n = new RealDiskHealthInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealDiskHealthInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.RealDiskHealthInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  singlediskhealth_.Clear();
  _internal_metadata_.Clear();
}

bool RealDiskHealthInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.RealDiskHealthInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.fiberhome.fums.proto.RealSingleDiskHealthInfo singleDiskHealth = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_singlediskhealth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.RealDiskHealthInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.RealDiskHealthInfo)
  return false;
#undef DO_
}

void RealDiskHealthInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.RealDiskHealthInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.RealSingleDiskHealthInfo singleDiskHealth = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->singlediskhealth_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->singlediskhealth(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.RealDiskHealthInfo)
}

::google::protobuf::uint8* RealDiskHealthInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.RealDiskHealthInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.RealSingleDiskHealthInfo singleDiskHealth = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->singlediskhealth_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->singlediskhealth(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.RealDiskHealthInfo)
  return target;
}

size_t RealDiskHealthInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.RealDiskHealthInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.fiberhome.fums.proto.RealSingleDiskHealthInfo singleDiskHealth = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->singlediskhealth_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singlediskhealth(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealDiskHealthInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.RealDiskHealthInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RealDiskHealthInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealDiskHealthInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.RealDiskHealthInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.RealDiskHealthInfo)
    MergeFrom(*source);
  }
}

void RealDiskHealthInfo::MergeFrom(const RealDiskHealthInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.RealDiskHealthInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  singlediskhealth_.MergeFrom(from.singlediskhealth_);
}

void RealDiskHealthInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.RealDiskHealthInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealDiskHealthInfo::CopyFrom(const RealDiskHealthInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.RealDiskHealthInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealDiskHealthInfo::IsInitialized() const {
  return true;
}

void RealDiskHealthInfo::Swap(RealDiskHealthInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealDiskHealthInfo::InternalSwap(RealDiskHealthInfo* other) {
  using std::swap;
  singlediskhealth_.InternalSwap(&other->singlediskhealth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealDiskHealthInfo::GetMetadata() const {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealDiskHealthInfo

// repeated .com.fiberhome.fums.proto.RealSingleDiskHealthInfo singleDiskHealth = 1;
int RealDiskHealthInfo::singlediskhealth_size() const {
  return singlediskhealth_.size();
}
void RealDiskHealthInfo::clear_singlediskhealth() {
  singlediskhealth_.Clear();
}
const ::com::fiberhome::fums::proto::RealSingleDiskHealthInfo& RealDiskHealthInfo::singlediskhealth(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealDiskHealthInfo.singleDiskHealth)
  return singlediskhealth_.Get(index);
}
::com::fiberhome::fums::proto::RealSingleDiskHealthInfo* RealDiskHealthInfo::mutable_singlediskhealth(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealDiskHealthInfo.singleDiskHealth)
  return singlediskhealth_.Mutable(index);
}
::com::fiberhome::fums::proto::RealSingleDiskHealthInfo* RealDiskHealthInfo::add_singlediskhealth() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.RealDiskHealthInfo.singleDiskHealth)
  return singlediskhealth_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::RealSingleDiskHealthInfo >*
RealDiskHealthInfo::mutable_singlediskhealth() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.RealDiskHealthInfo.singleDiskHealth)
  return &singlediskhealth_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::RealSingleDiskHealthInfo >&
RealDiskHealthInfo::singlediskhealth() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.RealDiskHealthInfo.singleDiskHealth)
  return singlediskhealth_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealSingleDiskHealthInfo::kDiskNameFieldNumber;
const int RealSingleDiskHealthInfo::kSmartCtlInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealSingleDiskHealthInfo::RealSingleDiskHealthInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
}
RealSingleDiskHealthInfo::RealSingleDiskHealthInfo(const RealSingleDiskHealthInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  diskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diskname().size() > 0) {
    diskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskname_);
  }
  smartctlinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.smartctlinfo().size() > 0) {
    smartctlinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smartctlinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
}

void RealSingleDiskHealthInfo::SharedCtor() {
  diskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smartctlinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RealSingleDiskHealthInfo::~RealSingleDiskHealthInfo() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
  SharedDtor();
}

void RealSingleDiskHealthInfo::SharedDtor() {
  diskname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smartctlinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RealSingleDiskHealthInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealSingleDiskHealthInfo::descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealSingleDiskHealthInfo& RealSingleDiskHealthInfo::default_instance() {
  protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealSingleDiskHealthInfo* RealSingleDiskHealthInfo::New(::google::protobuf::Arena* arena) const {
  RealSingleDiskHealthInfo* n = new RealSingleDiskHealthInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealSingleDiskHealthInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  diskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smartctlinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RealSingleDiskHealthInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string diskName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diskname().data(), static_cast<int>(this->diskname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskHealthInfo.diskName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string smartCtlInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smartctlinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smartctlinfo().data(), static_cast<int>(this->smartctlinfo().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleDiskHealthInfo.smartCtlInfo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
  return false;
#undef DO_
}

void RealSingleDiskHealthInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diskName = 1;
  if (this->diskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskname().data(), static_cast<int>(this->diskname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskHealthInfo.diskName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->diskname(), output);
  }

  // string smartCtlInfo = 2;
  if (this->smartctlinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smartctlinfo().data(), static_cast<int>(this->smartctlinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskHealthInfo.smartCtlInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->smartctlinfo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
}

::google::protobuf::uint8* RealSingleDiskHealthInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string diskName = 1;
  if (this->diskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diskname().data(), static_cast<int>(this->diskname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskHealthInfo.diskName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->diskname(), target);
  }

  // string smartCtlInfo = 2;
  if (this->smartctlinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smartctlinfo().data(), static_cast<int>(this->smartctlinfo().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleDiskHealthInfo.smartCtlInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->smartctlinfo(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
  return target;
}

size_t RealSingleDiskHealthInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string diskName = 1;
  if (this->diskname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diskname());
  }

  // string smartCtlInfo = 2;
  if (this->smartctlinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smartctlinfo());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealSingleDiskHealthInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RealSingleDiskHealthInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealSingleDiskHealthInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
    MergeFrom(*source);
  }
}

void RealSingleDiskHealthInfo::MergeFrom(const RealSingleDiskHealthInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.diskname().size() > 0) {

    diskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diskname_);
  }
  if (from.smartctlinfo().size() > 0) {

    smartctlinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smartctlinfo_);
  }
}

void RealSingleDiskHealthInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealSingleDiskHealthInfo::CopyFrom(const RealSingleDiskHealthInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.RealSingleDiskHealthInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealSingleDiskHealthInfo::IsInitialized() const {
  return true;
}

void RealSingleDiskHealthInfo::Swap(RealSingleDiskHealthInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealSingleDiskHealthInfo::InternalSwap(RealSingleDiskHealthInfo* other) {
  using std::swap;
  diskname_.Swap(&other->diskname_);
  smartctlinfo_.Swap(&other->smartctlinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealSingleDiskHealthInfo::GetMetadata() const {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealSingleDiskHealthInfo

// string diskName = 1;
void RealSingleDiskHealthInfo::clear_diskname() {
  diskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskHealthInfo::diskname() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.diskName)
  return diskname_.GetNoArena();
}
void RealSingleDiskHealthInfo::set_diskname(const ::std::string& value) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.diskName)
}
#if LANG_CXX11
void RealSingleDiskHealthInfo::set_diskname(::std::string&& value) {
  
  diskname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.diskName)
}
#endif
void RealSingleDiskHealthInfo::set_diskname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.diskName)
}
void RealSingleDiskHealthInfo::set_diskname(const char* value, size_t size) {
  
  diskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.diskName)
}
::std::string* RealSingleDiskHealthInfo::mutable_diskname() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.diskName)
  return diskname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskHealthInfo::release_diskname() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.diskName)
  
  return diskname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskHealthInfo::set_allocated_diskname(::std::string* diskname) {
  if (diskname != NULL) {
    
  } else {
    
  }
  diskname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diskname);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.diskName)
}

// string smartCtlInfo = 2;
void RealSingleDiskHealthInfo::clear_smartctlinfo() {
  smartctlinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleDiskHealthInfo::smartctlinfo() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.smartCtlInfo)
  return smartctlinfo_.GetNoArena();
}
void RealSingleDiskHealthInfo::set_smartctlinfo(const ::std::string& value) {
  
  smartctlinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.smartCtlInfo)
}
#if LANG_CXX11
void RealSingleDiskHealthInfo::set_smartctlinfo(::std::string&& value) {
  
  smartctlinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.smartCtlInfo)
}
#endif
void RealSingleDiskHealthInfo::set_smartctlinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  smartctlinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.smartCtlInfo)
}
void RealSingleDiskHealthInfo::set_smartctlinfo(const char* value, size_t size) {
  
  smartctlinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.smartCtlInfo)
}
::std::string* RealSingleDiskHealthInfo::mutable_smartctlinfo() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.smartCtlInfo)
  return smartctlinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleDiskHealthInfo::release_smartctlinfo() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.smartCtlInfo)
  
  return smartctlinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleDiskHealthInfo::set_allocated_smartctlinfo(::std::string* smartctlinfo) {
  if (smartctlinfo != NULL) {
    
  } else {
    
  }
  smartctlinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smartctlinfo);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleDiskHealthInfo.smartCtlInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealNicStatusInfo::kSingleNicInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealNicStatusInfo::RealNicStatusInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.RealNicStatusInfo)
}
RealNicStatusInfo::RealNicStatusInfo(const RealNicStatusInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      singlenicinfo_(from.singlenicinfo_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.RealNicStatusInfo)
}

void RealNicStatusInfo::SharedCtor() {
  _cached_size_ = 0;
}

RealNicStatusInfo::~RealNicStatusInfo() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.RealNicStatusInfo)
  SharedDtor();
}

void RealNicStatusInfo::SharedDtor() {
}

void RealNicStatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealNicStatusInfo::descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealNicStatusInfo& RealNicStatusInfo::default_instance() {
  protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealNicStatusInfo* RealNicStatusInfo::New(::google::protobuf::Arena* arena) const {
  RealNicStatusInfo* n = new RealNicStatusInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealNicStatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.RealNicStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  singlenicinfo_.Clear();
  _internal_metadata_.Clear();
}

bool RealNicStatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.RealNicStatusInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.fiberhome.fums.proto.SingleNicPerfData singleNicInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_singlenicinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.RealNicStatusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.RealNicStatusInfo)
  return false;
#undef DO_
}

void RealNicStatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.RealNicStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.SingleNicPerfData singleNicInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->singlenicinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->singlenicinfo(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.RealNicStatusInfo)
}

::google::protobuf::uint8* RealNicStatusInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.RealNicStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.SingleNicPerfData singleNicInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->singlenicinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->singlenicinfo(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.RealNicStatusInfo)
  return target;
}

size_t RealNicStatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.RealNicStatusInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.fiberhome.fums.proto.SingleNicPerfData singleNicInfo = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->singlenicinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singlenicinfo(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealNicStatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.RealNicStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RealNicStatusInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealNicStatusInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.RealNicStatusInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.RealNicStatusInfo)
    MergeFrom(*source);
  }
}

void RealNicStatusInfo::MergeFrom(const RealNicStatusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.RealNicStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  singlenicinfo_.MergeFrom(from.singlenicinfo_);
}

void RealNicStatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.RealNicStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealNicStatusInfo::CopyFrom(const RealNicStatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.RealNicStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealNicStatusInfo::IsInitialized() const {
  return true;
}

void RealNicStatusInfo::Swap(RealNicStatusInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealNicStatusInfo::InternalSwap(RealNicStatusInfo* other) {
  using std::swap;
  singlenicinfo_.InternalSwap(&other->singlenicinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealNicStatusInfo::GetMetadata() const {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealNicStatusInfo

// repeated .com.fiberhome.fums.proto.SingleNicPerfData singleNicInfo = 1;
int RealNicStatusInfo::singlenicinfo_size() const {
  return singlenicinfo_.size();
}
void RealNicStatusInfo::clear_singlenicinfo() {
  singlenicinfo_.Clear();
}
const ::com::fiberhome::fums::proto::SingleNicPerfData& RealNicStatusInfo::singlenicinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealNicStatusInfo.singleNicInfo)
  return singlenicinfo_.Get(index);
}
::com::fiberhome::fums::proto::SingleNicPerfData* RealNicStatusInfo::mutable_singlenicinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealNicStatusInfo.singleNicInfo)
  return singlenicinfo_.Mutable(index);
}
::com::fiberhome::fums::proto::SingleNicPerfData* RealNicStatusInfo::add_singlenicinfo() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.RealNicStatusInfo.singleNicInfo)
  return singlenicinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleNicPerfData >*
RealNicStatusInfo::mutable_singlenicinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.RealNicStatusInfo.singleNicInfo)
  return &singlenicinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleNicPerfData >&
RealNicStatusInfo::singlenicinfo() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.RealNicStatusInfo.singleNicInfo)
  return singlenicinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealProcessStatusInfo::kSingleProcessInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealProcessStatusInfo::RealProcessStatusInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.RealProcessStatusInfo)
}
RealProcessStatusInfo::RealProcessStatusInfo(const RealProcessStatusInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      singleprocessinfo_(from.singleprocessinfo_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.RealProcessStatusInfo)
}

void RealProcessStatusInfo::SharedCtor() {
  _cached_size_ = 0;
}

RealProcessStatusInfo::~RealProcessStatusInfo() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.RealProcessStatusInfo)
  SharedDtor();
}

void RealProcessStatusInfo::SharedDtor() {
}

void RealProcessStatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealProcessStatusInfo::descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealProcessStatusInfo& RealProcessStatusInfo::default_instance() {
  protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealProcessStatusInfo* RealProcessStatusInfo::New(::google::protobuf::Arena* arena) const {
  RealProcessStatusInfo* n = new RealProcessStatusInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealProcessStatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.RealProcessStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  singleprocessinfo_.Clear();
  _internal_metadata_.Clear();
}

bool RealProcessStatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.RealProcessStatusInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.fiberhome.fums.proto.RealSingleProcessStatusInfo singleProcessInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_singleprocessinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.RealProcessStatusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.RealProcessStatusInfo)
  return false;
#undef DO_
}

void RealProcessStatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.RealProcessStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.RealSingleProcessStatusInfo singleProcessInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->singleprocessinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->singleprocessinfo(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.RealProcessStatusInfo)
}

::google::protobuf::uint8* RealProcessStatusInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.RealProcessStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.RealSingleProcessStatusInfo singleProcessInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->singleprocessinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->singleprocessinfo(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.RealProcessStatusInfo)
  return target;
}

size_t RealProcessStatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.RealProcessStatusInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.fiberhome.fums.proto.RealSingleProcessStatusInfo singleProcessInfo = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->singleprocessinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->singleprocessinfo(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealProcessStatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.RealProcessStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RealProcessStatusInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealProcessStatusInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.RealProcessStatusInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.RealProcessStatusInfo)
    MergeFrom(*source);
  }
}

void RealProcessStatusInfo::MergeFrom(const RealProcessStatusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.RealProcessStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  singleprocessinfo_.MergeFrom(from.singleprocessinfo_);
}

void RealProcessStatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.RealProcessStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealProcessStatusInfo::CopyFrom(const RealProcessStatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.RealProcessStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealProcessStatusInfo::IsInitialized() const {
  return true;
}

void RealProcessStatusInfo::Swap(RealProcessStatusInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealProcessStatusInfo::InternalSwap(RealProcessStatusInfo* other) {
  using std::swap;
  singleprocessinfo_.InternalSwap(&other->singleprocessinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealProcessStatusInfo::GetMetadata() const {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealProcessStatusInfo

// repeated .com.fiberhome.fums.proto.RealSingleProcessStatusInfo singleProcessInfo = 1;
int RealProcessStatusInfo::singleprocessinfo_size() const {
  return singleprocessinfo_.size();
}
void RealProcessStatusInfo::clear_singleprocessinfo() {
  singleprocessinfo_.Clear();
}
const ::com::fiberhome::fums::proto::RealSingleProcessStatusInfo& RealProcessStatusInfo::singleprocessinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealProcessStatusInfo.singleProcessInfo)
  return singleprocessinfo_.Get(index);
}
::com::fiberhome::fums::proto::RealSingleProcessStatusInfo* RealProcessStatusInfo::mutable_singleprocessinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealProcessStatusInfo.singleProcessInfo)
  return singleprocessinfo_.Mutable(index);
}
::com::fiberhome::fums::proto::RealSingleProcessStatusInfo* RealProcessStatusInfo::add_singleprocessinfo() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.RealProcessStatusInfo.singleProcessInfo)
  return singleprocessinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::RealSingleProcessStatusInfo >*
RealProcessStatusInfo::mutable_singleprocessinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.RealProcessStatusInfo.singleProcessInfo)
  return &singleprocessinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::RealSingleProcessStatusInfo >&
RealProcessStatusInfo::singleprocessinfo() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.RealProcessStatusInfo.singleProcessInfo)
  return singleprocessinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealSingleProcessStatusInfo::kProcessIdFieldNumber;
const int RealSingleProcessStatusInfo::kProcessAppNameFieldNumber;
const int RealSingleProcessStatusInfo::kProcessPidFieldNumber;
const int RealSingleProcessStatusInfo::kProcessStateFieldNumber;
const int RealSingleProcessStatusInfo::kProcessCpuUsageFieldNumber;
const int RealSingleProcessStatusInfo::kProcessMemoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealSingleProcessStatusInfo::RealSingleProcessStatusInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
}
RealSingleProcessStatusInfo::RealSingleProcessStatusInfo(const RealSingleProcessStatusInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  processappname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.processappname().size() > 0) {
    processappname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processappname_);
  }
  processstate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.processstate().size() > 0) {
    processstate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processstate_);
  }
  processcpuusage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.processcpuusage().size() > 0) {
    processcpuusage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processcpuusage_);
  }
  processmemory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.processmemory().size() > 0) {
    processmemory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processmemory_);
  }
  ::memcpy(&processpid_, &from.processpid_,
    static_cast<size_t>(reinterpret_cast<char*>(&processid_) -
    reinterpret_cast<char*>(&processpid_)) + sizeof(processid_));
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
}

void RealSingleProcessStatusInfo::SharedCtor() {
  processappname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processstate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processcpuusage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processmemory_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&processpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processid_) -
      reinterpret_cast<char*>(&processpid_)) + sizeof(processid_));
  _cached_size_ = 0;
}

RealSingleProcessStatusInfo::~RealSingleProcessStatusInfo() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
  SharedDtor();
}

void RealSingleProcessStatusInfo::SharedDtor() {
  processappname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processstate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processcpuusage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processmemory_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RealSingleProcessStatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealSingleProcessStatusInfo::descriptor() {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealSingleProcessStatusInfo& RealSingleProcessStatusInfo::default_instance() {
  protobuf_RealQueryHostStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

RealSingleProcessStatusInfo* RealSingleProcessStatusInfo::New(::google::protobuf::Arena* arena) const {
  RealSingleProcessStatusInfo* n = new RealSingleProcessStatusInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealSingleProcessStatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processappname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processstate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processcpuusage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  processmemory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&processpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&processid_) -
      reinterpret_cast<char*>(&processpid_)) + sizeof(processid_));
  _internal_metadata_.Clear();
}

bool RealSingleProcessStatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 processId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string processAppName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processappname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->processappname().data(), static_cast<int>(this->processappname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processAppName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 processPid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processpid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string processState = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processstate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->processstate().data(), static_cast<int>(this->processstate().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processState"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string processCpuUsage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processcpuusage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->processcpuusage().data(), static_cast<int>(this->processcpuusage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processCpuUsage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string processMemory = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processmemory()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->processmemory().data(), static_cast<int>(this->processmemory().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processMemory"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
  return false;
#undef DO_
}

void RealSingleProcessStatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 processId = 1;
  if (this->processid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->processid(), output);
  }

  // string processAppName = 2;
  if (this->processappname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processappname().data(), static_cast<int>(this->processappname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processAppName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->processappname(), output);
  }

  // int64 processPid = 3;
  if (this->processpid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->processpid(), output);
  }

  // string processState = 4;
  if (this->processstate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processstate().data(), static_cast<int>(this->processstate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processState");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->processstate(), output);
  }

  // string processCpuUsage = 5;
  if (this->processcpuusage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processcpuusage().data(), static_cast<int>(this->processcpuusage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processCpuUsage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->processcpuusage(), output);
  }

  // string processMemory = 6;
  if (this->processmemory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processmemory().data(), static_cast<int>(this->processmemory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processMemory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->processmemory(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
}

::google::protobuf::uint8* RealSingleProcessStatusInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 processId = 1;
  if (this->processid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->processid(), target);
  }

  // string processAppName = 2;
  if (this->processappname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processappname().data(), static_cast<int>(this->processappname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processAppName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->processappname(), target);
  }

  // int64 processPid = 3;
  if (this->processpid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->processpid(), target);
  }

  // string processState = 4;
  if (this->processstate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processstate().data(), static_cast<int>(this->processstate().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processState");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->processstate(), target);
  }

  // string processCpuUsage = 5;
  if (this->processcpuusage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processcpuusage().data(), static_cast<int>(this->processcpuusage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processCpuUsage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->processcpuusage(), target);
  }

  // string processMemory = 6;
  if (this->processmemory().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->processmemory().data(), static_cast<int>(this->processmemory().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processMemory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->processmemory(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
  return target;
}

size_t RealSingleProcessStatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string processAppName = 2;
  if (this->processappname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processappname());
  }

  // string processState = 4;
  if (this->processstate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processstate());
  }

  // string processCpuUsage = 5;
  if (this->processcpuusage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processcpuusage());
  }

  // string processMemory = 6;
  if (this->processmemory().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->processmemory());
  }

  // int64 processPid = 3;
  if (this->processpid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processpid());
  }

  // int32 processId = 1;
  if (this->processid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->processid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealSingleProcessStatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RealSingleProcessStatusInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealSingleProcessStatusInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
    MergeFrom(*source);
  }
}

void RealSingleProcessStatusInfo::MergeFrom(const RealSingleProcessStatusInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.processappname().size() > 0) {

    processappname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processappname_);
  }
  if (from.processstate().size() > 0) {

    processstate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processstate_);
  }
  if (from.processcpuusage().size() > 0) {

    processcpuusage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processcpuusage_);
  }
  if (from.processmemory().size() > 0) {

    processmemory_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.processmemory_);
  }
  if (from.processpid() != 0) {
    set_processpid(from.processpid());
  }
  if (from.processid() != 0) {
    set_processid(from.processid());
  }
}

void RealSingleProcessStatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealSingleProcessStatusInfo::CopyFrom(const RealSingleProcessStatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.RealSingleProcessStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealSingleProcessStatusInfo::IsInitialized() const {
  return true;
}

void RealSingleProcessStatusInfo::Swap(RealSingleProcessStatusInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealSingleProcessStatusInfo::InternalSwap(RealSingleProcessStatusInfo* other) {
  using std::swap;
  processappname_.Swap(&other->processappname_);
  processstate_.Swap(&other->processstate_);
  processcpuusage_.Swap(&other->processcpuusage_);
  processmemory_.Swap(&other->processmemory_);
  swap(processpid_, other->processpid_);
  swap(processid_, other->processid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealSingleProcessStatusInfo::GetMetadata() const {
  protobuf_RealQueryHostStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RealQueryHostStatus_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealSingleProcessStatusInfo

// int32 processId = 1;
void RealSingleProcessStatusInfo::clear_processid() {
  processid_ = 0;
}
::google::protobuf::int32 RealSingleProcessStatusInfo::processid() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processId)
  return processid_;
}
void RealSingleProcessStatusInfo::set_processid(::google::protobuf::int32 value) {
  
  processid_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processId)
}

// string processAppName = 2;
void RealSingleProcessStatusInfo::clear_processappname() {
  processappname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleProcessStatusInfo::processappname() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processAppName)
  return processappname_.GetNoArena();
}
void RealSingleProcessStatusInfo::set_processappname(const ::std::string& value) {
  
  processappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processAppName)
}
#if LANG_CXX11
void RealSingleProcessStatusInfo::set_processappname(::std::string&& value) {
  
  processappname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processAppName)
}
#endif
void RealSingleProcessStatusInfo::set_processappname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  processappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processAppName)
}
void RealSingleProcessStatusInfo::set_processappname(const char* value, size_t size) {
  
  processappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processAppName)
}
::std::string* RealSingleProcessStatusInfo::mutable_processappname() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processAppName)
  return processappname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleProcessStatusInfo::release_processappname() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processAppName)
  
  return processappname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleProcessStatusInfo::set_allocated_processappname(::std::string* processappname) {
  if (processappname != NULL) {
    
  } else {
    
  }
  processappname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processappname);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processAppName)
}

// int64 processPid = 3;
void RealSingleProcessStatusInfo::clear_processpid() {
  processpid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 RealSingleProcessStatusInfo::processpid() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processPid)
  return processpid_;
}
void RealSingleProcessStatusInfo::set_processpid(::google::protobuf::int64 value) {
  
  processpid_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processPid)
}

// string processState = 4;
void RealSingleProcessStatusInfo::clear_processstate() {
  processstate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleProcessStatusInfo::processstate() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processState)
  return processstate_.GetNoArena();
}
void RealSingleProcessStatusInfo::set_processstate(const ::std::string& value) {
  
  processstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processState)
}
#if LANG_CXX11
void RealSingleProcessStatusInfo::set_processstate(::std::string&& value) {
  
  processstate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processState)
}
#endif
void RealSingleProcessStatusInfo::set_processstate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  processstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processState)
}
void RealSingleProcessStatusInfo::set_processstate(const char* value, size_t size) {
  
  processstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processState)
}
::std::string* RealSingleProcessStatusInfo::mutable_processstate() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processState)
  return processstate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleProcessStatusInfo::release_processstate() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processState)
  
  return processstate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleProcessStatusInfo::set_allocated_processstate(::std::string* processstate) {
  if (processstate != NULL) {
    
  } else {
    
  }
  processstate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processstate);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processState)
}

// string processCpuUsage = 5;
void RealSingleProcessStatusInfo::clear_processcpuusage() {
  processcpuusage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleProcessStatusInfo::processcpuusage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processCpuUsage)
  return processcpuusage_.GetNoArena();
}
void RealSingleProcessStatusInfo::set_processcpuusage(const ::std::string& value) {
  
  processcpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processCpuUsage)
}
#if LANG_CXX11
void RealSingleProcessStatusInfo::set_processcpuusage(::std::string&& value) {
  
  processcpuusage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processCpuUsage)
}
#endif
void RealSingleProcessStatusInfo::set_processcpuusage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  processcpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processCpuUsage)
}
void RealSingleProcessStatusInfo::set_processcpuusage(const char* value, size_t size) {
  
  processcpuusage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processCpuUsage)
}
::std::string* RealSingleProcessStatusInfo::mutable_processcpuusage() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processCpuUsage)
  return processcpuusage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleProcessStatusInfo::release_processcpuusage() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processCpuUsage)
  
  return processcpuusage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleProcessStatusInfo::set_allocated_processcpuusage(::std::string* processcpuusage) {
  if (processcpuusage != NULL) {
    
  } else {
    
  }
  processcpuusage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processcpuusage);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processCpuUsage)
}

// string processMemory = 6;
void RealSingleProcessStatusInfo::clear_processmemory() {
  processmemory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RealSingleProcessStatusInfo::processmemory() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processMemory)
  return processmemory_.GetNoArena();
}
void RealSingleProcessStatusInfo::set_processmemory(const ::std::string& value) {
  
  processmemory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processMemory)
}
#if LANG_CXX11
void RealSingleProcessStatusInfo::set_processmemory(::std::string&& value) {
  
  processmemory_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processMemory)
}
#endif
void RealSingleProcessStatusInfo::set_processmemory(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  processmemory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processMemory)
}
void RealSingleProcessStatusInfo::set_processmemory(const char* value, size_t size) {
  
  processmemory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processMemory)
}
::std::string* RealSingleProcessStatusInfo::mutable_processmemory() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processMemory)
  return processmemory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RealSingleProcessStatusInfo::release_processmemory() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processMemory)
  
  return processmemory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RealSingleProcessStatusInfo::set_allocated_processmemory(::std::string* processmemory) {
  if (processmemory != NULL) {
    
  } else {
    
  }
  processmemory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processmemory);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.RealSingleProcessStatusInfo.processMemory)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

// @@protoc_insertion_point(global_scope)

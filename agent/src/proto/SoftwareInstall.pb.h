// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SoftwareInstall.proto

#ifndef PROTOBUF_SoftwareInstall_2eproto__INCLUDED
#define PROTOBUF_SoftwareInstall_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonDefine.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class CtrlSoftwareStatusResponse;
class CtrlSoftwareStatusResponseDefaultTypeInternal;
extern CtrlSoftwareStatusResponseDefaultTypeInternal _CtrlSoftwareStatusResponse_default_instance_;
class SoftwareData;
class SoftwareDataDefaultTypeInternal;
extern SoftwareDataDefaultTypeInternal _SoftwareData_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_SoftwareInstall_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_SoftwareInstall_2eproto

enum SoftwareData_SoftwareCtrlTypeEnum {
  SoftwareData_SoftwareCtrlTypeEnum_DOWNLOAD = 0,
  SoftwareData_SoftwareCtrlTypeEnum_INSTALL = 1,
  SoftwareData_SoftwareCtrlTypeEnum_INIT = 2,
  SoftwareData_SoftwareCtrlTypeEnum_SoftwareData_SoftwareCtrlTypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SoftwareData_SoftwareCtrlTypeEnum_SoftwareData_SoftwareCtrlTypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SoftwareData_SoftwareCtrlTypeEnum_IsValid(int value);
const SoftwareData_SoftwareCtrlTypeEnum SoftwareData_SoftwareCtrlTypeEnum_SoftwareCtrlTypeEnum_MIN = SoftwareData_SoftwareCtrlTypeEnum_DOWNLOAD;
const SoftwareData_SoftwareCtrlTypeEnum SoftwareData_SoftwareCtrlTypeEnum_SoftwareCtrlTypeEnum_MAX = SoftwareData_SoftwareCtrlTypeEnum_INIT;
const int SoftwareData_SoftwareCtrlTypeEnum_SoftwareCtrlTypeEnum_ARRAYSIZE = SoftwareData_SoftwareCtrlTypeEnum_SoftwareCtrlTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* SoftwareData_SoftwareCtrlTypeEnum_descriptor();
inline const ::std::string& SoftwareData_SoftwareCtrlTypeEnum_Name(SoftwareData_SoftwareCtrlTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    SoftwareData_SoftwareCtrlTypeEnum_descriptor(), value);
}
inline bool SoftwareData_SoftwareCtrlTypeEnum_Parse(
    const ::std::string& name, SoftwareData_SoftwareCtrlTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SoftwareData_SoftwareCtrlTypeEnum>(
    SoftwareData_SoftwareCtrlTypeEnum_descriptor(), name, value);
}
// ===================================================================

class SoftwareData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SoftwareData) */ {
 public:
  SoftwareData();
  virtual ~SoftwareData();

  SoftwareData(const SoftwareData& from);

  inline SoftwareData& operator=(const SoftwareData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SoftwareData(SoftwareData&& from) noexcept
    : SoftwareData() {
    *this = ::std::move(from);
  }

  inline SoftwareData& operator=(SoftwareData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftwareData& default_instance();

  static inline const SoftwareData* internal_default_instance() {
    return reinterpret_cast<const SoftwareData*>(
               &_SoftwareData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SoftwareData* other);
  friend void swap(SoftwareData& a, SoftwareData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SoftwareData* New() const PROTOBUF_FINAL { return New(NULL); }

  SoftwareData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SoftwareData& from);
  void MergeFrom(const SoftwareData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SoftwareData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SoftwareData_SoftwareCtrlTypeEnum SoftwareCtrlTypeEnum;
  static const SoftwareCtrlTypeEnum DOWNLOAD =
    SoftwareData_SoftwareCtrlTypeEnum_DOWNLOAD;
  static const SoftwareCtrlTypeEnum INSTALL =
    SoftwareData_SoftwareCtrlTypeEnum_INSTALL;
  static const SoftwareCtrlTypeEnum INIT =
    SoftwareData_SoftwareCtrlTypeEnum_INIT;
  static inline bool SoftwareCtrlTypeEnum_IsValid(int value) {
    return SoftwareData_SoftwareCtrlTypeEnum_IsValid(value);
  }
  static const SoftwareCtrlTypeEnum SoftwareCtrlTypeEnum_MIN =
    SoftwareData_SoftwareCtrlTypeEnum_SoftwareCtrlTypeEnum_MIN;
  static const SoftwareCtrlTypeEnum SoftwareCtrlTypeEnum_MAX =
    SoftwareData_SoftwareCtrlTypeEnum_SoftwareCtrlTypeEnum_MAX;
  static const int SoftwareCtrlTypeEnum_ARRAYSIZE =
    SoftwareData_SoftwareCtrlTypeEnum_SoftwareCtrlTypeEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SoftwareCtrlTypeEnum_descriptor() {
    return SoftwareData_SoftwareCtrlTypeEnum_descriptor();
  }
  static inline const ::std::string& SoftwareCtrlTypeEnum_Name(SoftwareCtrlTypeEnum value) {
    return SoftwareData_SoftwareCtrlTypeEnum_Name(value);
  }
  static inline bool SoftwareCtrlTypeEnum_Parse(const ::std::string& name,
      SoftwareCtrlTypeEnum* value) {
    return SoftwareData_SoftwareCtrlTypeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string softwareType = 3;
  void clear_softwaretype();
  static const int kSoftwareTypeFieldNumber = 3;
  const ::std::string& softwaretype() const;
  void set_softwaretype(const ::std::string& value);
  #if LANG_CXX11
  void set_softwaretype(::std::string&& value);
  #endif
  void set_softwaretype(const char* value);
  void set_softwaretype(const char* value, size_t size);
  ::std::string* mutable_softwaretype();
  ::std::string* release_softwaretype();
  void set_allocated_softwaretype(::std::string* softwaretype);

  // string softwareVersion = 5;
  void clear_softwareversion();
  static const int kSoftwareVersionFieldNumber = 5;
  const ::std::string& softwareversion() const;
  void set_softwareversion(const ::std::string& value);
  #if LANG_CXX11
  void set_softwareversion(::std::string&& value);
  #endif
  void set_softwareversion(const char* value);
  void set_softwareversion(const char* value, size_t size);
  ::std::string* mutable_softwareversion();
  ::std::string* release_softwareversion();
  void set_allocated_softwareversion(::std::string* softwareversion);

  // string softwareCtrlObject = 7;
  void clear_softwarectrlobject();
  static const int kSoftwareCtrlObjectFieldNumber = 7;
  const ::std::string& softwarectrlobject() const;
  void set_softwarectrlobject(const ::std::string& value);
  #if LANG_CXX11
  void set_softwarectrlobject(::std::string&& value);
  #endif
  void set_softwarectrlobject(const char* value);
  void set_softwarectrlobject(const char* value, size_t size);
  ::std::string* mutable_softwarectrlobject();
  ::std::string* release_softwarectrlobject();
  void set_allocated_softwarectrlobject(::std::string* softwarectrlobject);

  // string args = 8;
  void clear_args();
  static const int kArgsFieldNumber = 8;
  const ::std::string& args() const;
  void set_args(const ::std::string& value);
  #if LANG_CXX11
  void set_args(::std::string&& value);
  #endif
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  ::std::string* mutable_args();
  ::std::string* release_args();
  void set_allocated_args(::std::string* args);

  // int64 uniqueId = 1;
  void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 1;
  ::google::protobuf::int64 uniqueid() const;
  void set_uniqueid(::google::protobuf::int64 value);

  // int32 softwareCtrlId = 2;
  void clear_softwarectrlid();
  static const int kSoftwareCtrlIdFieldNumber = 2;
  ::google::protobuf::int32 softwarectrlid() const;
  void set_softwarectrlid(::google::protobuf::int32 value);

  // .proto.EnumDefineData.AppTypeEnum appTypeCode = 4;
  void clear_apptypecode();
  static const int kAppTypeCodeFieldNumber = 4;
  ::proto::EnumDefineData_AppTypeEnum apptypecode() const;
  void set_apptypecode(::proto::EnumDefineData_AppTypeEnum value);

  // .proto.SoftwareData.SoftwareCtrlTypeEnum softwareCtrlType = 6;
  void clear_softwarectrltype();
  static const int kSoftwareCtrlTypeFieldNumber = 6;
  ::proto::SoftwareData_SoftwareCtrlTypeEnum softwarectrltype() const;
  void set_softwarectrltype(::proto::SoftwareData_SoftwareCtrlTypeEnum value);

  // @@protoc_insertion_point(class_scope:proto.SoftwareData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr softwaretype_;
  ::google::protobuf::internal::ArenaStringPtr softwareversion_;
  ::google::protobuf::internal::ArenaStringPtr softwarectrlobject_;
  ::google::protobuf::internal::ArenaStringPtr args_;
  ::google::protobuf::int64 uniqueid_;
  ::google::protobuf::int32 softwarectrlid_;
  int apptypecode_;
  int softwarectrltype_;
  mutable int _cached_size_;
  friend struct protobuf_SoftwareInstall_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CtrlSoftwareStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CtrlSoftwareStatusResponse) */ {
 public:
  CtrlSoftwareStatusResponse();
  virtual ~CtrlSoftwareStatusResponse();

  CtrlSoftwareStatusResponse(const CtrlSoftwareStatusResponse& from);

  inline CtrlSoftwareStatusResponse& operator=(const CtrlSoftwareStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CtrlSoftwareStatusResponse(CtrlSoftwareStatusResponse&& from) noexcept
    : CtrlSoftwareStatusResponse() {
    *this = ::std::move(from);
  }

  inline CtrlSoftwareStatusResponse& operator=(CtrlSoftwareStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CtrlSoftwareStatusResponse& default_instance();

  static inline const CtrlSoftwareStatusResponse* internal_default_instance() {
    return reinterpret_cast<const CtrlSoftwareStatusResponse*>(
               &_CtrlSoftwareStatusResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CtrlSoftwareStatusResponse* other);
  friend void swap(CtrlSoftwareStatusResponse& a, CtrlSoftwareStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CtrlSoftwareStatusResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CtrlSoftwareStatusResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CtrlSoftwareStatusResponse& from);
  void MergeFrom(const CtrlSoftwareStatusResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CtrlSoftwareStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string swAppType = 3;
  void clear_swapptype();
  static const int kSwAppTypeFieldNumber = 3;
  const ::std::string& swapptype() const;
  void set_swapptype(const ::std::string& value);
  #if LANG_CXX11
  void set_swapptype(::std::string&& value);
  #endif
  void set_swapptype(const char* value);
  void set_swapptype(const char* value, size_t size);
  ::std::string* mutable_swapptype();
  ::std::string* release_swapptype();
  void set_allocated_swapptype(::std::string* swapptype);

  // string swAppVersion = 5;
  void clear_swappversion();
  static const int kSwAppVersionFieldNumber = 5;
  const ::std::string& swappversion() const;
  void set_swappversion(const ::std::string& value);
  #if LANG_CXX11
  void set_swappversion(::std::string&& value);
  #endif
  void set_swappversion(const char* value);
  void set_swappversion(const char* value, size_t size);
  ::std::string* mutable_swappversion();
  ::std::string* release_swappversion();
  void set_allocated_swappversion(::std::string* swappversion);

  // string appTryInstallingFailedReason = 7;
  void clear_apptryinstallingfailedreason();
  static const int kAppTryInstallingFailedReasonFieldNumber = 7;
  const ::std::string& apptryinstallingfailedreason() const;
  void set_apptryinstallingfailedreason(const ::std::string& value);
  #if LANG_CXX11
  void set_apptryinstallingfailedreason(::std::string&& value);
  #endif
  void set_apptryinstallingfailedreason(const char* value);
  void set_apptryinstallingfailedreason(const char* value, size_t size);
  ::std::string* mutable_apptryinstallingfailedreason();
  ::std::string* release_apptryinstallingfailedreason();
  void set_allocated_apptryinstallingfailedreason(::std::string* apptryinstallingfailedreason);

  // int64 uniqueId = 1;
  void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 1;
  ::google::protobuf::int64 uniqueid() const;
  void set_uniqueid(::google::protobuf::int64 value);

  // .proto.SoftwareData.SoftwareCtrlTypeEnum ctrlType = 2;
  void clear_ctrltype();
  static const int kCtrlTypeFieldNumber = 2;
  ::proto::SoftwareData_SoftwareCtrlTypeEnum ctrltype() const;
  void set_ctrltype(::proto::SoftwareData_SoftwareCtrlTypeEnum value);

  // .proto.EnumDefineData.AppTypeEnum appTypeCode = 4;
  void clear_apptypecode();
  static const int kAppTypeCodeFieldNumber = 4;
  ::proto::EnumDefineData_AppTypeEnum apptypecode() const;
  void set_apptypecode(::proto::EnumDefineData_AppTypeEnum value);

  // .proto.CommonResponse.ResStatusEnum appTryInstallingStatus = 6;
  void clear_apptryinstallingstatus();
  static const int kAppTryInstallingStatusFieldNumber = 6;
  ::proto::CommonResponse_ResStatusEnum apptryinstallingstatus() const;
  void set_apptryinstallingstatus(::proto::CommonResponse_ResStatusEnum value);

  // @@protoc_insertion_point(class_scope:proto.CtrlSoftwareStatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr swapptype_;
  ::google::protobuf::internal::ArenaStringPtr swappversion_;
  ::google::protobuf::internal::ArenaStringPtr apptryinstallingfailedreason_;
  ::google::protobuf::int64 uniqueid_;
  int ctrltype_;
  int apptypecode_;
  int apptryinstallingstatus_;
  mutable int _cached_size_;
  friend struct protobuf_SoftwareInstall_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SoftwareData

// int64 uniqueId = 1;
inline void SoftwareData::clear_uniqueid() {
  uniqueid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SoftwareData::uniqueid() const {
  // @@protoc_insertion_point(field_get:proto.SoftwareData.uniqueId)
  return uniqueid_;
}
inline void SoftwareData::set_uniqueid(::google::protobuf::int64 value) {
  
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:proto.SoftwareData.uniqueId)
}

// int32 softwareCtrlId = 2;
inline void SoftwareData::clear_softwarectrlid() {
  softwarectrlid_ = 0;
}
inline ::google::protobuf::int32 SoftwareData::softwarectrlid() const {
  // @@protoc_insertion_point(field_get:proto.SoftwareData.softwareCtrlId)
  return softwarectrlid_;
}
inline void SoftwareData::set_softwarectrlid(::google::protobuf::int32 value) {
  
  softwarectrlid_ = value;
  // @@protoc_insertion_point(field_set:proto.SoftwareData.softwareCtrlId)
}

// string softwareType = 3;
inline void SoftwareData::clear_softwaretype() {
  softwaretype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SoftwareData::softwaretype() const {
  // @@protoc_insertion_point(field_get:proto.SoftwareData.softwareType)
  return softwaretype_.GetNoArena();
}
inline void SoftwareData::set_softwaretype(const ::std::string& value) {
  
  softwaretype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SoftwareData.softwareType)
}
#if LANG_CXX11
inline void SoftwareData::set_softwaretype(::std::string&& value) {
  
  softwaretype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SoftwareData.softwareType)
}
#endif
inline void SoftwareData::set_softwaretype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  softwaretype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SoftwareData.softwareType)
}
inline void SoftwareData::set_softwaretype(const char* value, size_t size) {
  
  softwaretype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SoftwareData.softwareType)
}
inline ::std::string* SoftwareData::mutable_softwaretype() {
  
  // @@protoc_insertion_point(field_mutable:proto.SoftwareData.softwareType)
  return softwaretype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftwareData::release_softwaretype() {
  // @@protoc_insertion_point(field_release:proto.SoftwareData.softwareType)
  
  return softwaretype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftwareData::set_allocated_softwaretype(::std::string* softwaretype) {
  if (softwaretype != NULL) {
    
  } else {
    
  }
  softwaretype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softwaretype);
  // @@protoc_insertion_point(field_set_allocated:proto.SoftwareData.softwareType)
}

// .proto.EnumDefineData.AppTypeEnum appTypeCode = 4;
inline void SoftwareData::clear_apptypecode() {
  apptypecode_ = 0;
}
inline ::proto::EnumDefineData_AppTypeEnum SoftwareData::apptypecode() const {
  // @@protoc_insertion_point(field_get:proto.SoftwareData.appTypeCode)
  return static_cast< ::proto::EnumDefineData_AppTypeEnum >(apptypecode_);
}
inline void SoftwareData::set_apptypecode(::proto::EnumDefineData_AppTypeEnum value) {
  
  apptypecode_ = value;
  // @@protoc_insertion_point(field_set:proto.SoftwareData.appTypeCode)
}

// string softwareVersion = 5;
inline void SoftwareData::clear_softwareversion() {
  softwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SoftwareData::softwareversion() const {
  // @@protoc_insertion_point(field_get:proto.SoftwareData.softwareVersion)
  return softwareversion_.GetNoArena();
}
inline void SoftwareData::set_softwareversion(const ::std::string& value) {
  
  softwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SoftwareData.softwareVersion)
}
#if LANG_CXX11
inline void SoftwareData::set_softwareversion(::std::string&& value) {
  
  softwareversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SoftwareData.softwareVersion)
}
#endif
inline void SoftwareData::set_softwareversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  softwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SoftwareData.softwareVersion)
}
inline void SoftwareData::set_softwareversion(const char* value, size_t size) {
  
  softwareversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SoftwareData.softwareVersion)
}
inline ::std::string* SoftwareData::mutable_softwareversion() {
  
  // @@protoc_insertion_point(field_mutable:proto.SoftwareData.softwareVersion)
  return softwareversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftwareData::release_softwareversion() {
  // @@protoc_insertion_point(field_release:proto.SoftwareData.softwareVersion)
  
  return softwareversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftwareData::set_allocated_softwareversion(::std::string* softwareversion) {
  if (softwareversion != NULL) {
    
  } else {
    
  }
  softwareversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softwareversion);
  // @@protoc_insertion_point(field_set_allocated:proto.SoftwareData.softwareVersion)
}

// .proto.SoftwareData.SoftwareCtrlTypeEnum softwareCtrlType = 6;
inline void SoftwareData::clear_softwarectrltype() {
  softwarectrltype_ = 0;
}
inline ::proto::SoftwareData_SoftwareCtrlTypeEnum SoftwareData::softwarectrltype() const {
  // @@protoc_insertion_point(field_get:proto.SoftwareData.softwareCtrlType)
  return static_cast< ::proto::SoftwareData_SoftwareCtrlTypeEnum >(softwarectrltype_);
}
inline void SoftwareData::set_softwarectrltype(::proto::SoftwareData_SoftwareCtrlTypeEnum value) {
  
  softwarectrltype_ = value;
  // @@protoc_insertion_point(field_set:proto.SoftwareData.softwareCtrlType)
}

// string softwareCtrlObject = 7;
inline void SoftwareData::clear_softwarectrlobject() {
  softwarectrlobject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SoftwareData::softwarectrlobject() const {
  // @@protoc_insertion_point(field_get:proto.SoftwareData.softwareCtrlObject)
  return softwarectrlobject_.GetNoArena();
}
inline void SoftwareData::set_softwarectrlobject(const ::std::string& value) {
  
  softwarectrlobject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SoftwareData.softwareCtrlObject)
}
#if LANG_CXX11
inline void SoftwareData::set_softwarectrlobject(::std::string&& value) {
  
  softwarectrlobject_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SoftwareData.softwareCtrlObject)
}
#endif
inline void SoftwareData::set_softwarectrlobject(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  softwarectrlobject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SoftwareData.softwareCtrlObject)
}
inline void SoftwareData::set_softwarectrlobject(const char* value, size_t size) {
  
  softwarectrlobject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SoftwareData.softwareCtrlObject)
}
inline ::std::string* SoftwareData::mutable_softwarectrlobject() {
  
  // @@protoc_insertion_point(field_mutable:proto.SoftwareData.softwareCtrlObject)
  return softwarectrlobject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftwareData::release_softwarectrlobject() {
  // @@protoc_insertion_point(field_release:proto.SoftwareData.softwareCtrlObject)
  
  return softwarectrlobject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftwareData::set_allocated_softwarectrlobject(::std::string* softwarectrlobject) {
  if (softwarectrlobject != NULL) {
    
  } else {
    
  }
  softwarectrlobject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), softwarectrlobject);
  // @@protoc_insertion_point(field_set_allocated:proto.SoftwareData.softwareCtrlObject)
}

// string args = 8;
inline void SoftwareData::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SoftwareData::args() const {
  // @@protoc_insertion_point(field_get:proto.SoftwareData.args)
  return args_.GetNoArena();
}
inline void SoftwareData::set_args(const ::std::string& value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SoftwareData.args)
}
#if LANG_CXX11
inline void SoftwareData::set_args(::std::string&& value) {
  
  args_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SoftwareData.args)
}
#endif
inline void SoftwareData::set_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SoftwareData.args)
}
inline void SoftwareData::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SoftwareData.args)
}
inline ::std::string* SoftwareData::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:proto.SoftwareData.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftwareData::release_args() {
  // @@protoc_insertion_point(field_release:proto.SoftwareData.args)
  
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftwareData::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:proto.SoftwareData.args)
}

// -------------------------------------------------------------------

// CtrlSoftwareStatusResponse

// int64 uniqueId = 1;
inline void CtrlSoftwareStatusResponse::clear_uniqueid() {
  uniqueid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CtrlSoftwareStatusResponse::uniqueid() const {
  // @@protoc_insertion_point(field_get:proto.CtrlSoftwareStatusResponse.uniqueId)
  return uniqueid_;
}
inline void CtrlSoftwareStatusResponse::set_uniqueid(::google::protobuf::int64 value) {
  
  uniqueid_ = value;
  // @@protoc_insertion_point(field_set:proto.CtrlSoftwareStatusResponse.uniqueId)
}

// .proto.SoftwareData.SoftwareCtrlTypeEnum ctrlType = 2;
inline void CtrlSoftwareStatusResponse::clear_ctrltype() {
  ctrltype_ = 0;
}
inline ::proto::SoftwareData_SoftwareCtrlTypeEnum CtrlSoftwareStatusResponse::ctrltype() const {
  // @@protoc_insertion_point(field_get:proto.CtrlSoftwareStatusResponse.ctrlType)
  return static_cast< ::proto::SoftwareData_SoftwareCtrlTypeEnum >(ctrltype_);
}
inline void CtrlSoftwareStatusResponse::set_ctrltype(::proto::SoftwareData_SoftwareCtrlTypeEnum value) {
  
  ctrltype_ = value;
  // @@protoc_insertion_point(field_set:proto.CtrlSoftwareStatusResponse.ctrlType)
}

// string swAppType = 3;
inline void CtrlSoftwareStatusResponse::clear_swapptype() {
  swapptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CtrlSoftwareStatusResponse::swapptype() const {
  // @@protoc_insertion_point(field_get:proto.CtrlSoftwareStatusResponse.swAppType)
  return swapptype_.GetNoArena();
}
inline void CtrlSoftwareStatusResponse::set_swapptype(const ::std::string& value) {
  
  swapptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CtrlSoftwareStatusResponse.swAppType)
}
#if LANG_CXX11
inline void CtrlSoftwareStatusResponse::set_swapptype(::std::string&& value) {
  
  swapptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CtrlSoftwareStatusResponse.swAppType)
}
#endif
inline void CtrlSoftwareStatusResponse::set_swapptype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  swapptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CtrlSoftwareStatusResponse.swAppType)
}
inline void CtrlSoftwareStatusResponse::set_swapptype(const char* value, size_t size) {
  
  swapptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CtrlSoftwareStatusResponse.swAppType)
}
inline ::std::string* CtrlSoftwareStatusResponse::mutable_swapptype() {
  
  // @@protoc_insertion_point(field_mutable:proto.CtrlSoftwareStatusResponse.swAppType)
  return swapptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlSoftwareStatusResponse::release_swapptype() {
  // @@protoc_insertion_point(field_release:proto.CtrlSoftwareStatusResponse.swAppType)
  
  return swapptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlSoftwareStatusResponse::set_allocated_swapptype(::std::string* swapptype) {
  if (swapptype != NULL) {
    
  } else {
    
  }
  swapptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), swapptype);
  // @@protoc_insertion_point(field_set_allocated:proto.CtrlSoftwareStatusResponse.swAppType)
}

// .proto.EnumDefineData.AppTypeEnum appTypeCode = 4;
inline void CtrlSoftwareStatusResponse::clear_apptypecode() {
  apptypecode_ = 0;
}
inline ::proto::EnumDefineData_AppTypeEnum CtrlSoftwareStatusResponse::apptypecode() const {
  // @@protoc_insertion_point(field_get:proto.CtrlSoftwareStatusResponse.appTypeCode)
  return static_cast< ::proto::EnumDefineData_AppTypeEnum >(apptypecode_);
}
inline void CtrlSoftwareStatusResponse::set_apptypecode(::proto::EnumDefineData_AppTypeEnum value) {
  
  apptypecode_ = value;
  // @@protoc_insertion_point(field_set:proto.CtrlSoftwareStatusResponse.appTypeCode)
}

// string swAppVersion = 5;
inline void CtrlSoftwareStatusResponse::clear_swappversion() {
  swappversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CtrlSoftwareStatusResponse::swappversion() const {
  // @@protoc_insertion_point(field_get:proto.CtrlSoftwareStatusResponse.swAppVersion)
  return swappversion_.GetNoArena();
}
inline void CtrlSoftwareStatusResponse::set_swappversion(const ::std::string& value) {
  
  swappversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CtrlSoftwareStatusResponse.swAppVersion)
}
#if LANG_CXX11
inline void CtrlSoftwareStatusResponse::set_swappversion(::std::string&& value) {
  
  swappversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CtrlSoftwareStatusResponse.swAppVersion)
}
#endif
inline void CtrlSoftwareStatusResponse::set_swappversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  swappversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CtrlSoftwareStatusResponse.swAppVersion)
}
inline void CtrlSoftwareStatusResponse::set_swappversion(const char* value, size_t size) {
  
  swappversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CtrlSoftwareStatusResponse.swAppVersion)
}
inline ::std::string* CtrlSoftwareStatusResponse::mutable_swappversion() {
  
  // @@protoc_insertion_point(field_mutable:proto.CtrlSoftwareStatusResponse.swAppVersion)
  return swappversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlSoftwareStatusResponse::release_swappversion() {
  // @@protoc_insertion_point(field_release:proto.CtrlSoftwareStatusResponse.swAppVersion)
  
  return swappversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlSoftwareStatusResponse::set_allocated_swappversion(::std::string* swappversion) {
  if (swappversion != NULL) {
    
  } else {
    
  }
  swappversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), swappversion);
  // @@protoc_insertion_point(field_set_allocated:proto.CtrlSoftwareStatusResponse.swAppVersion)
}

// .proto.CommonResponse.ResStatusEnum appTryInstallingStatus = 6;
inline void CtrlSoftwareStatusResponse::clear_apptryinstallingstatus() {
  apptryinstallingstatus_ = 0;
}
inline ::proto::CommonResponse_ResStatusEnum CtrlSoftwareStatusResponse::apptryinstallingstatus() const {
  // @@protoc_insertion_point(field_get:proto.CtrlSoftwareStatusResponse.appTryInstallingStatus)
  return static_cast< ::proto::CommonResponse_ResStatusEnum >(apptryinstallingstatus_);
}
inline void CtrlSoftwareStatusResponse::set_apptryinstallingstatus(::proto::CommonResponse_ResStatusEnum value) {
  
  apptryinstallingstatus_ = value;
  // @@protoc_insertion_point(field_set:proto.CtrlSoftwareStatusResponse.appTryInstallingStatus)
}

// string appTryInstallingFailedReason = 7;
inline void CtrlSoftwareStatusResponse::clear_apptryinstallingfailedreason() {
  apptryinstallingfailedreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CtrlSoftwareStatusResponse::apptryinstallingfailedreason() const {
  // @@protoc_insertion_point(field_get:proto.CtrlSoftwareStatusResponse.appTryInstallingFailedReason)
  return apptryinstallingfailedreason_.GetNoArena();
}
inline void CtrlSoftwareStatusResponse::set_apptryinstallingfailedreason(const ::std::string& value) {
  
  apptryinstallingfailedreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CtrlSoftwareStatusResponse.appTryInstallingFailedReason)
}
#if LANG_CXX11
inline void CtrlSoftwareStatusResponse::set_apptryinstallingfailedreason(::std::string&& value) {
  
  apptryinstallingfailedreason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CtrlSoftwareStatusResponse.appTryInstallingFailedReason)
}
#endif
inline void CtrlSoftwareStatusResponse::set_apptryinstallingfailedreason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apptryinstallingfailedreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CtrlSoftwareStatusResponse.appTryInstallingFailedReason)
}
inline void CtrlSoftwareStatusResponse::set_apptryinstallingfailedreason(const char* value, size_t size) {
  
  apptryinstallingfailedreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CtrlSoftwareStatusResponse.appTryInstallingFailedReason)
}
inline ::std::string* CtrlSoftwareStatusResponse::mutable_apptryinstallingfailedreason() {
  
  // @@protoc_insertion_point(field_mutable:proto.CtrlSoftwareStatusResponse.appTryInstallingFailedReason)
  return apptryinstallingfailedreason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CtrlSoftwareStatusResponse::release_apptryinstallingfailedreason() {
  // @@protoc_insertion_point(field_release:proto.CtrlSoftwareStatusResponse.appTryInstallingFailedReason)
  
  return apptryinstallingfailedreason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CtrlSoftwareStatusResponse::set_allocated_apptryinstallingfailedreason(::std::string* apptryinstallingfailedreason) {
  if (apptryinstallingfailedreason != NULL) {
    
  } else {
    
  }
  apptryinstallingfailedreason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptryinstallingfailedreason);
  // @@protoc_insertion_point(field_set_allocated:proto.CtrlSoftwareStatusResponse.appTryInstallingFailedReason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::SoftwareData_SoftwareCtrlTypeEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::SoftwareData_SoftwareCtrlTypeEnum>() {
  return ::proto::SoftwareData_SoftwareCtrlTypeEnum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SoftwareInstall_2eproto__INCLUDED

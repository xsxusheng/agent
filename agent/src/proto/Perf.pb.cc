// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Perf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Perf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace fiberhome {
namespace fums {
namespace proto {
class PerfDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PerfData>
     _instance;
} _PerfData_default_instance_;
class HostdataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Hostdata>
     _instance;
} _Hostdata_default_instance_;
class ProcessDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProcessData>
     _instance;
} _ProcessData_default_instance_;
class SingleProcessPerfDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SingleProcessPerfData>
     _instance;
} _SingleProcessPerfData_default_instance_;
class NicDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NicData>
     _instance;
} _NicData_default_instance_;
class DiskDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DiskData>
     _instance;
} _DiskData_default_instance_;
class SingleDiskPerfDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SingleDiskPerfData>
     _instance;
} _SingleDiskPerfData_default_instance_;
class AppPerfDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AppPerfData>
     _instance;
} _AppPerfData_default_instance_;
class SingleAppPerfDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SingleAppPerfData>
     _instance;
} _SingleAppPerfData_default_instance_;

namespace protobuf_Perf_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfData, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfData, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, querytime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, cpuaveusage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, cpumaxusge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, maxcontiuetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, memusageave_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, rxflowave_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, txflowave_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, tcplinknum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, tcpinboundtotal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, tcpoutboundtotal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, memtotal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, diskusage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, memmaxusage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hostdata, disktotal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessData, perfdata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleProcessPerfData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleProcessPerfData, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleProcessPerfData, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleProcessPerfData, cpu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleProcessPerfData, mem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleProcessPerfData, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleProcessPerfData, virt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleProcessPerfData, res_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleProcessPerfData, shr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleProcessPerfData, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleProcessPerfData, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleProcessPerfData, cpumax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleProcessPerfData, memmax_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicData, perfdata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskData, perfdata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDiskPerfData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDiskPerfData, dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDiskPerfData, tps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDiskPerfData, rd_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDiskPerfData, wr_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDiskPerfData, avgrq_sz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDiskPerfData, avgqu_sz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDiskPerfData, await_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDiskPerfData, svctm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDiskPerfData, util_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppPerfData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppPerfData, perfdata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, apptype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, apptypecode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, createtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, cpuratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, usedmemory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, usedsysdisk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, useddatadisk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, totaldatadisk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, cachein_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, cacheout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, curconn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, averagereq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, dnsrequests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, dnsresponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, httprequests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleAppPerfData, httpredirects_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(PerfData)},
  { 7, -1, sizeof(Hostdata)},
  { 26, -1, sizeof(ProcessData)},
  { 32, -1, sizeof(SingleProcessPerfData)},
  { 49, -1, sizeof(NicData)},
  { 55, -1, sizeof(DiskData)},
  { 61, -1, sizeof(SingleDiskPerfData)},
  { 75, -1, sizeof(AppPerfData)},
  { 81, -1, sizeof(SingleAppPerfData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PerfData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Hostdata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProcessData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SingleProcessPerfData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NicData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DiskData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SingleDiskPerfData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AppPerfData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SingleAppPerfData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Perf.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::fiberhome::fums::proto::protobuf_CommonDefine_2eproto::InitDefaults();
  _PerfData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PerfData_default_instance_);_Hostdata_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Hostdata_default_instance_);_ProcessData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProcessData_default_instance_);_SingleProcessPerfData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SingleProcessPerfData_default_instance_);_NicData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NicData_default_instance_);_DiskData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DiskData_default_instance_);_SingleDiskPerfData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SingleDiskPerfData_default_instance_);_AppPerfData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AppPerfData_default_instance_);_SingleAppPerfData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SingleAppPerfData_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nPerf.proto\022\030com.fiberhome.fums.proto\032\022"
      "CommonDefine.proto\"\263\001\n\010PerfData\022=\n\004type\030"
      "\001 \001(\0162/.com.fiberhome.fums.proto.PerfDat"
      "a.PERFDATATYPE\022\014\n\004data\030\002 \001(\t\"Z\n\014PERFDATA"
      "TYPE\022\r\n\tHOST_TYPE\020\000\022\020\n\014PROCESS_TYPE\020\001\022\r\n"
      "\tDISK_TYPE\020\002\022\014\n\010NIC_TYPE\020\003\022\014\n\010APP_PERF\020\004"
      "\"\255\002\n\010Hostdata\022\021\n\tqueryTime\030\001 \001(\t\022\023\n\013cpuA"
      "veUsage\030\002 \001(\001\022\022\n\ncpuMaxUsge\030\003 \001(\001\022\026\n\016max"
      "ContiueTime\030\004 \001(\005\022\023\n\013memUsageAve\030\005 \001(\001\022\021"
      "\n\trxFlowAve\030\006 \001(\003\022\021\n\ttxFlowAve\030\007 \001(\003\022\022\n\n"
      "tcpLinkNum\030\010 \001(\005\022\027\n\017tcpInboundTotal\030\t \001("
      "\005\022\030\n\020tcpOutboundTotal\030\n \001(\005\022\020\n\010memTotal\030"
      "\013 \001(\005\022\021\n\tdiskUsage\030\014 \001(\005\022\023\n\013memMaxUsage\030"
      "\r \001(\001\022\021\n\tdiskTotal\030\016 \001(\005\"P\n\013ProcessData\022"
      "A\n\010perfdata\030\001 \003(\0132/.com.fiberhome.fums.p"
      "roto.SingleProcessPerfData\"\302\001\n\025SinglePro"
      "cessPerfData\022\013\n\003PID\030\001 \001(\003\022\017\n\007COMMAND\030\002 \001"
      "(\t\022\013\n\003CPU\030\003 \001(\002\022\013\n\003MEM\030\004 \001(\002\022\014\n\004SIZE\030\005 \001"
      "(\003\022\014\n\004VIRT\030\006 \001(\003\022\013\n\003RES\030\007 \001(\003\022\013\n\003SHR\030\010 \001"
      "(\003\022\014\n\004TIME\030\t \001(\t\022\r\n\005STATE\030\n \001(\t\022\016\n\006CPUMA"
      "X\030\013 \001(\002\022\016\n\006MEMMAX\030\014 \001(\002\"H\n\007NicData\022=\n\010pe"
      "rfdata\030\001 \003(\0132+.com.fiberhome.fums.proto."
      "SingleNicPerfData\"J\n\010DiskData\022>\n\010perfdat"
      "a\030\001 \003(\0132,.com.fiberhome.fums.proto.Singl"
      "eDiskPerfData\"\236\001\n\022SingleDiskPerfData\022\013\n\003"
      "dev\030\001 \001(\t\022\013\n\003tps\030\002 \001(\002\022\016\n\006rd_sec\030\003 \001(\002\022\016"
      "\n\006wr_sec\030\004 \001(\002\022\020\n\010avgrq_sz\030\005 \001(\002\022\020\n\010avgq"
      "u_sz\030\006 \001(\002\022\r\n\005await\030\007 \001(\002\022\r\n\005svctm\030\010 \001(\002"
      "\022\014\n\004util\030\t \001(\002\"L\n\013AppPerfData\022=\n\010perfdat"
      "a\030\001 \003(\0132+.com.fiberhome.fums.proto.Singl"
      "eAppPerfData\"\236\004\n\021SingleAppPerfData\022\020\n\010se"
      "quence\030\001 \001(\005\022J\n\007appType\030\002 \001(\01629.com.fibe"
      "rhome.fums.proto.SingleAppPerfData.APP_T"
      "YPE_ENUM\022I\n\013appTypeCode\030\003 \001(\01624.com.fibe"
      "rhome.fums.proto.EnumDefineData.AppTypeE"
      "num\022\022\n\ncreateTime\030\004 \001(\t\022\020\n\010cpuRatio\030\005 \001("
      "\001\022\022\n\nusedMemory\030\006 \001(\005\022\023\n\013usedSysDisk\030\007 \001"
      "(\001\022\024\n\014usedDataDisk\030\010 \001(\001\022\025\n\rtotalDataDis"
      "k\030\t \001(\001\022\017\n\007cacheIn\030\n \001(\001\022\020\n\010cacheOut\030\013 \001"
      "(\001\022\017\n\007curconn\030\014 \001(\001\022\022\n\naveragereq\030\r \001(\001\022"
      "\023\n\013DNSRequests\030\016 \001(\001\022\023\n\013DNSResponse\030\017 \001("
      "\001\022\024\n\014httpRequests\030\020 \001(\001\022\025\n\rhttpRedirects"
      "\030\021 \001(\001\"E\n\rAPP_TYPE_ENUM\022\007\n\003CSD\020\000\022\007\n\003LRS\020"
      "\001\022\007\n\003CSV\020\002\022\007\n\003CSP\020\003\022\007\n\003CSX\020\004\022\007\n\003DRS\020\005B \n"
      "\030com.fiberhome.fums.protoB\004Perfb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1799);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Perf.proto", &protobuf_RegisterTypes);
  ::com::fiberhome::fums::proto::protobuf_CommonDefine_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_Perf_2eproto

const ::google::protobuf::EnumDescriptor* PerfData_PERFDATATYPE_descriptor() {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_enum_descriptors[0];
}
bool PerfData_PERFDATATYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerfData_PERFDATATYPE PerfData::HOST_TYPE;
const PerfData_PERFDATATYPE PerfData::PROCESS_TYPE;
const PerfData_PERFDATATYPE PerfData::DISK_TYPE;
const PerfData_PERFDATATYPE PerfData::NIC_TYPE;
const PerfData_PERFDATATYPE PerfData::APP_PERF;
const PerfData_PERFDATATYPE PerfData::PERFDATATYPE_MIN;
const PerfData_PERFDATATYPE PerfData::PERFDATATYPE_MAX;
const int PerfData::PERFDATATYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SingleAppPerfData_APP_TYPE_ENUM_descriptor() {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_enum_descriptors[1];
}
bool SingleAppPerfData_APP_TYPE_ENUM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SingleAppPerfData_APP_TYPE_ENUM SingleAppPerfData::CSD;
const SingleAppPerfData_APP_TYPE_ENUM SingleAppPerfData::LRS;
const SingleAppPerfData_APP_TYPE_ENUM SingleAppPerfData::CSV;
const SingleAppPerfData_APP_TYPE_ENUM SingleAppPerfData::CSP;
const SingleAppPerfData_APP_TYPE_ENUM SingleAppPerfData::CSX;
const SingleAppPerfData_APP_TYPE_ENUM SingleAppPerfData::DRS;
const SingleAppPerfData_APP_TYPE_ENUM SingleAppPerfData::APP_TYPE_ENUM_MIN;
const SingleAppPerfData_APP_TYPE_ENUM SingleAppPerfData::APP_TYPE_ENUM_MAX;
const int SingleAppPerfData::APP_TYPE_ENUM_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerfData::kTypeFieldNumber;
const int PerfData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerfData::PerfData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Perf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.PerfData)
}
PerfData::PerfData(const PerfData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.PerfData)
}

void PerfData::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

PerfData::~PerfData() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.PerfData)
  SharedDtor();
}

void PerfData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PerfData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerfData::descriptor() {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerfData& PerfData::default_instance() {
  protobuf_Perf_2eproto::InitDefaults();
  return *internal_default_instance();
}

PerfData* PerfData::New(::google::protobuf::Arena* arena) const {
  PerfData* n = new PerfData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerfData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.PerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool PerfData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.PerfData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fiberhome.fums.proto.PerfData.PERFDATATYPE type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::com::fiberhome::fums::proto::PerfData_PERFDATATYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.PerfData.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.PerfData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.PerfData)
  return false;
#undef DO_
}

void PerfData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.PerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.fiberhome.fums.proto.PerfData.PERFDATATYPE type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.PerfData.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.PerfData)
}

::google::protobuf::uint8* PerfData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.PerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.fiberhome.fums.proto.PerfData.PERFDATATYPE type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.PerfData.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.PerfData)
  return target;
}

size_t PerfData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.PerfData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // .com.fiberhome.fums.proto.PerfData.PERFDATATYPE type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerfData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.PerfData)
  GOOGLE_DCHECK_NE(&from, this);
  const PerfData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerfData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.PerfData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.PerfData)
    MergeFrom(*source);
  }
}

void PerfData::MergeFrom(const PerfData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.PerfData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PerfData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.PerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerfData::CopyFrom(const PerfData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.PerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfData::IsInitialized() const {
  return true;
}

void PerfData::Swap(PerfData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerfData::InternalSwap(PerfData* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PerfData::GetMetadata() const {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerfData

// .com.fiberhome.fums.proto.PerfData.PERFDATATYPE type = 1;
void PerfData::clear_type() {
  type_ = 0;
}
::com::fiberhome::fums::proto::PerfData_PERFDATATYPE PerfData::type() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.PerfData.type)
  return static_cast< ::com::fiberhome::fums::proto::PerfData_PERFDATATYPE >(type_);
}
void PerfData::set_type(::com::fiberhome::fums::proto::PerfData_PERFDATATYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.PerfData.type)
}

// string data = 2;
void PerfData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PerfData::data() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.PerfData.data)
  return data_.GetNoArena();
}
void PerfData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.PerfData.data)
}
#if LANG_CXX11
void PerfData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.PerfData.data)
}
#endif
void PerfData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.PerfData.data)
}
void PerfData::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.PerfData.data)
}
::std::string* PerfData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.PerfData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PerfData::release_data() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.PerfData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PerfData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.PerfData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Hostdata::kQueryTimeFieldNumber;
const int Hostdata::kCpuAveUsageFieldNumber;
const int Hostdata::kCpuMaxUsgeFieldNumber;
const int Hostdata::kMaxContiueTimeFieldNumber;
const int Hostdata::kMemUsageAveFieldNumber;
const int Hostdata::kRxFlowAveFieldNumber;
const int Hostdata::kTxFlowAveFieldNumber;
const int Hostdata::kTcpLinkNumFieldNumber;
const int Hostdata::kTcpInboundTotalFieldNumber;
const int Hostdata::kTcpOutboundTotalFieldNumber;
const int Hostdata::kMemTotalFieldNumber;
const int Hostdata::kDiskUsageFieldNumber;
const int Hostdata::kMemMaxUsageFieldNumber;
const int Hostdata::kDiskTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Hostdata::Hostdata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Perf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.Hostdata)
}
Hostdata::Hostdata(const Hostdata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  querytime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.querytime().size() > 0) {
    querytime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.querytime_);
  }
  ::memcpy(&cpuaveusage_, &from.cpuaveusage_,
    static_cast<size_t>(reinterpret_cast<char*>(&disktotal_) -
    reinterpret_cast<char*>(&cpuaveusage_)) + sizeof(disktotal_));
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.Hostdata)
}

void Hostdata::SharedCtor() {
  querytime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cpuaveusage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disktotal_) -
      reinterpret_cast<char*>(&cpuaveusage_)) + sizeof(disktotal_));
  _cached_size_ = 0;
}

Hostdata::~Hostdata() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.Hostdata)
  SharedDtor();
}

void Hostdata::SharedDtor() {
  querytime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Hostdata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hostdata::descriptor() {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Hostdata& Hostdata::default_instance() {
  protobuf_Perf_2eproto::InitDefaults();
  return *internal_default_instance();
}

Hostdata* Hostdata::New(::google::protobuf::Arena* arena) const {
  Hostdata* n = new Hostdata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Hostdata::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.Hostdata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  querytime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cpuaveusage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disktotal_) -
      reinterpret_cast<char*>(&cpuaveusage_)) + sizeof(disktotal_));
  _internal_metadata_.Clear();
}

bool Hostdata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.Hostdata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string queryTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_querytime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->querytime().data(), static_cast<int>(this->querytime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.Hostdata.queryTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cpuAveUsage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpuaveusage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cpuMaxUsge = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpumaxusge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxContiueTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcontiuetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double memUsageAve = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &memusageave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rxFlowAve = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rxflowave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 txFlowAve = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &txflowave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tcpLinkNum = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcplinknum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tcpInboundTotal = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcpinboundtotal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tcpOutboundTotal = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcpoutboundtotal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 memTotal = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memtotal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 diskUsage = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diskusage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double memMaxUsage = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &memmaxusage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 diskTotal = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disktotal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.Hostdata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.Hostdata)
  return false;
#undef DO_
}

void Hostdata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.Hostdata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queryTime = 1;
  if (this->querytime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->querytime().data(), static_cast<int>(this->querytime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.Hostdata.queryTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->querytime(), output);
  }

  // double cpuAveUsage = 2;
  if (this->cpuaveusage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cpuaveusage(), output);
  }

  // double cpuMaxUsge = 3;
  if (this->cpumaxusge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cpumaxusge(), output);
  }

  // int32 maxContiueTime = 4;
  if (this->maxcontiuetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxcontiuetime(), output);
  }

  // double memUsageAve = 5;
  if (this->memusageave() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->memusageave(), output);
  }

  // int64 rxFlowAve = 6;
  if (this->rxflowave() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->rxflowave(), output);
  }

  // int64 txFlowAve = 7;
  if (this->txflowave() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->txflowave(), output);
  }

  // int32 tcpLinkNum = 8;
  if (this->tcplinknum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tcplinknum(), output);
  }

  // int32 tcpInboundTotal = 9;
  if (this->tcpinboundtotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tcpinboundtotal(), output);
  }

  // int32 tcpOutboundTotal = 10;
  if (this->tcpoutboundtotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tcpoutboundtotal(), output);
  }

  // int32 memTotal = 11;
  if (this->memtotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->memtotal(), output);
  }

  // int32 diskUsage = 12;
  if (this->diskusage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->diskusage(), output);
  }

  // double memMaxUsage = 13;
  if (this->memmaxusage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->memmaxusage(), output);
  }

  // int32 diskTotal = 14;
  if (this->disktotal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->disktotal(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.Hostdata)
}

::google::protobuf::uint8* Hostdata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.Hostdata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string queryTime = 1;
  if (this->querytime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->querytime().data(), static_cast<int>(this->querytime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.Hostdata.queryTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->querytime(), target);
  }

  // double cpuAveUsage = 2;
  if (this->cpuaveusage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cpuaveusage(), target);
  }

  // double cpuMaxUsge = 3;
  if (this->cpumaxusge() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cpumaxusge(), target);
  }

  // int32 maxContiueTime = 4;
  if (this->maxcontiuetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxcontiuetime(), target);
  }

  // double memUsageAve = 5;
  if (this->memusageave() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->memusageave(), target);
  }

  // int64 rxFlowAve = 6;
  if (this->rxflowave() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->rxflowave(), target);
  }

  // int64 txFlowAve = 7;
  if (this->txflowave() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->txflowave(), target);
  }

  // int32 tcpLinkNum = 8;
  if (this->tcplinknum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tcplinknum(), target);
  }

  // int32 tcpInboundTotal = 9;
  if (this->tcpinboundtotal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tcpinboundtotal(), target);
  }

  // int32 tcpOutboundTotal = 10;
  if (this->tcpoutboundtotal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tcpoutboundtotal(), target);
  }

  // int32 memTotal = 11;
  if (this->memtotal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->memtotal(), target);
  }

  // int32 diskUsage = 12;
  if (this->diskusage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->diskusage(), target);
  }

  // double memMaxUsage = 13;
  if (this->memmaxusage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->memmaxusage(), target);
  }

  // int32 diskTotal = 14;
  if (this->disktotal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->disktotal(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.Hostdata)
  return target;
}

size_t Hostdata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.Hostdata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string queryTime = 1;
  if (this->querytime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->querytime());
  }

  // double cpuAveUsage = 2;
  if (this->cpuaveusage() != 0) {
    total_size += 1 + 8;
  }

  // double cpuMaxUsge = 3;
  if (this->cpumaxusge() != 0) {
    total_size += 1 + 8;
  }

  // double memUsageAve = 5;
  if (this->memusageave() != 0) {
    total_size += 1 + 8;
  }

  // int64 rxFlowAve = 6;
  if (this->rxflowave() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rxflowave());
  }

  // int32 maxContiueTime = 4;
  if (this->maxcontiuetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxcontiuetime());
  }

  // int32 tcpLinkNum = 8;
  if (this->tcplinknum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcplinknum());
  }

  // int64 txFlowAve = 7;
  if (this->txflowave() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->txflowave());
  }

  // int32 tcpInboundTotal = 9;
  if (this->tcpinboundtotal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcpinboundtotal());
  }

  // int32 tcpOutboundTotal = 10;
  if (this->tcpoutboundtotal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tcpoutboundtotal());
  }

  // int32 memTotal = 11;
  if (this->memtotal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->memtotal());
  }

  // int32 diskUsage = 12;
  if (this->diskusage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diskusage());
  }

  // double memMaxUsage = 13;
  if (this->memmaxusage() != 0) {
    total_size += 1 + 8;
  }

  // int32 diskTotal = 14;
  if (this->disktotal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->disktotal());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hostdata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.Hostdata)
  GOOGLE_DCHECK_NE(&from, this);
  const Hostdata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Hostdata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.Hostdata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.Hostdata)
    MergeFrom(*source);
  }
}

void Hostdata::MergeFrom(const Hostdata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.Hostdata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.querytime().size() > 0) {

    querytime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.querytime_);
  }
  if (from.cpuaveusage() != 0) {
    set_cpuaveusage(from.cpuaveusage());
  }
  if (from.cpumaxusge() != 0) {
    set_cpumaxusge(from.cpumaxusge());
  }
  if (from.memusageave() != 0) {
    set_memusageave(from.memusageave());
  }
  if (from.rxflowave() != 0) {
    set_rxflowave(from.rxflowave());
  }
  if (from.maxcontiuetime() != 0) {
    set_maxcontiuetime(from.maxcontiuetime());
  }
  if (from.tcplinknum() != 0) {
    set_tcplinknum(from.tcplinknum());
  }
  if (from.txflowave() != 0) {
    set_txflowave(from.txflowave());
  }
  if (from.tcpinboundtotal() != 0) {
    set_tcpinboundtotal(from.tcpinboundtotal());
  }
  if (from.tcpoutboundtotal() != 0) {
    set_tcpoutboundtotal(from.tcpoutboundtotal());
  }
  if (from.memtotal() != 0) {
    set_memtotal(from.memtotal());
  }
  if (from.diskusage() != 0) {
    set_diskusage(from.diskusage());
  }
  if (from.memmaxusage() != 0) {
    set_memmaxusage(from.memmaxusage());
  }
  if (from.disktotal() != 0) {
    set_disktotal(from.disktotal());
  }
}

void Hostdata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.Hostdata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hostdata::CopyFrom(const Hostdata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.Hostdata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hostdata::IsInitialized() const {
  return true;
}

void Hostdata::Swap(Hostdata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Hostdata::InternalSwap(Hostdata* other) {
  using std::swap;
  querytime_.Swap(&other->querytime_);
  swap(cpuaveusage_, other->cpuaveusage_);
  swap(cpumaxusge_, other->cpumaxusge_);
  swap(memusageave_, other->memusageave_);
  swap(rxflowave_, other->rxflowave_);
  swap(maxcontiuetime_, other->maxcontiuetime_);
  swap(tcplinknum_, other->tcplinknum_);
  swap(txflowave_, other->txflowave_);
  swap(tcpinboundtotal_, other->tcpinboundtotal_);
  swap(tcpoutboundtotal_, other->tcpoutboundtotal_);
  swap(memtotal_, other->memtotal_);
  swap(diskusage_, other->diskusage_);
  swap(memmaxusage_, other->memmaxusage_);
  swap(disktotal_, other->disktotal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Hostdata::GetMetadata() const {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Hostdata

// string queryTime = 1;
void Hostdata::clear_querytime() {
  querytime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Hostdata::querytime() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.queryTime)
  return querytime_.GetNoArena();
}
void Hostdata::set_querytime(const ::std::string& value) {
  
  querytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.queryTime)
}
#if LANG_CXX11
void Hostdata::set_querytime(::std::string&& value) {
  
  querytime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.Hostdata.queryTime)
}
#endif
void Hostdata::set_querytime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  querytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.Hostdata.queryTime)
}
void Hostdata::set_querytime(const char* value, size_t size) {
  
  querytime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.Hostdata.queryTime)
}
::std::string* Hostdata::mutable_querytime() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.Hostdata.queryTime)
  return querytime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Hostdata::release_querytime() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.Hostdata.queryTime)
  
  return querytime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Hostdata::set_allocated_querytime(::std::string* querytime) {
  if (querytime != NULL) {
    
  } else {
    
  }
  querytime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), querytime);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.Hostdata.queryTime)
}

// double cpuAveUsage = 2;
void Hostdata::clear_cpuaveusage() {
  cpuaveusage_ = 0;
}
double Hostdata::cpuaveusage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.cpuAveUsage)
  return cpuaveusage_;
}
void Hostdata::set_cpuaveusage(double value) {
  
  cpuaveusage_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.cpuAveUsage)
}

// double cpuMaxUsge = 3;
void Hostdata::clear_cpumaxusge() {
  cpumaxusge_ = 0;
}
double Hostdata::cpumaxusge() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.cpuMaxUsge)
  return cpumaxusge_;
}
void Hostdata::set_cpumaxusge(double value) {
  
  cpumaxusge_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.cpuMaxUsge)
}

// int32 maxContiueTime = 4;
void Hostdata::clear_maxcontiuetime() {
  maxcontiuetime_ = 0;
}
::google::protobuf::int32 Hostdata::maxcontiuetime() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.maxContiueTime)
  return maxcontiuetime_;
}
void Hostdata::set_maxcontiuetime(::google::protobuf::int32 value) {
  
  maxcontiuetime_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.maxContiueTime)
}

// double memUsageAve = 5;
void Hostdata::clear_memusageave() {
  memusageave_ = 0;
}
double Hostdata::memusageave() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.memUsageAve)
  return memusageave_;
}
void Hostdata::set_memusageave(double value) {
  
  memusageave_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.memUsageAve)
}

// int64 rxFlowAve = 6;
void Hostdata::clear_rxflowave() {
  rxflowave_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Hostdata::rxflowave() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.rxFlowAve)
  return rxflowave_;
}
void Hostdata::set_rxflowave(::google::protobuf::int64 value) {
  
  rxflowave_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.rxFlowAve)
}

// int64 txFlowAve = 7;
void Hostdata::clear_txflowave() {
  txflowave_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Hostdata::txflowave() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.txFlowAve)
  return txflowave_;
}
void Hostdata::set_txflowave(::google::protobuf::int64 value) {
  
  txflowave_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.txFlowAve)
}

// int32 tcpLinkNum = 8;
void Hostdata::clear_tcplinknum() {
  tcplinknum_ = 0;
}
::google::protobuf::int32 Hostdata::tcplinknum() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.tcpLinkNum)
  return tcplinknum_;
}
void Hostdata::set_tcplinknum(::google::protobuf::int32 value) {
  
  tcplinknum_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.tcpLinkNum)
}

// int32 tcpInboundTotal = 9;
void Hostdata::clear_tcpinboundtotal() {
  tcpinboundtotal_ = 0;
}
::google::protobuf::int32 Hostdata::tcpinboundtotal() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.tcpInboundTotal)
  return tcpinboundtotal_;
}
void Hostdata::set_tcpinboundtotal(::google::protobuf::int32 value) {
  
  tcpinboundtotal_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.tcpInboundTotal)
}

// int32 tcpOutboundTotal = 10;
void Hostdata::clear_tcpoutboundtotal() {
  tcpoutboundtotal_ = 0;
}
::google::protobuf::int32 Hostdata::tcpoutboundtotal() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.tcpOutboundTotal)
  return tcpoutboundtotal_;
}
void Hostdata::set_tcpoutboundtotal(::google::protobuf::int32 value) {
  
  tcpoutboundtotal_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.tcpOutboundTotal)
}

// int32 memTotal = 11;
void Hostdata::clear_memtotal() {
  memtotal_ = 0;
}
::google::protobuf::int32 Hostdata::memtotal() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.memTotal)
  return memtotal_;
}
void Hostdata::set_memtotal(::google::protobuf::int32 value) {
  
  memtotal_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.memTotal)
}

// int32 diskUsage = 12;
void Hostdata::clear_diskusage() {
  diskusage_ = 0;
}
::google::protobuf::int32 Hostdata::diskusage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.diskUsage)
  return diskusage_;
}
void Hostdata::set_diskusage(::google::protobuf::int32 value) {
  
  diskusage_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.diskUsage)
}

// double memMaxUsage = 13;
void Hostdata::clear_memmaxusage() {
  memmaxusage_ = 0;
}
double Hostdata::memmaxusage() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.memMaxUsage)
  return memmaxusage_;
}
void Hostdata::set_memmaxusage(double value) {
  
  memmaxusage_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.memMaxUsage)
}

// int32 diskTotal = 14;
void Hostdata::clear_disktotal() {
  disktotal_ = 0;
}
::google::protobuf::int32 Hostdata::disktotal() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.Hostdata.diskTotal)
  return disktotal_;
}
void Hostdata::set_disktotal(::google::protobuf::int32 value) {
  
  disktotal_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.Hostdata.diskTotal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessData::kPerfdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessData::ProcessData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Perf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.ProcessData)
}
ProcessData::ProcessData(const ProcessData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      perfdata_(from.perfdata_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.ProcessData)
}

void ProcessData::SharedCtor() {
  _cached_size_ = 0;
}

ProcessData::~ProcessData() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.ProcessData)
  SharedDtor();
}

void ProcessData::SharedDtor() {
}

void ProcessData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessData::descriptor() {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessData& ProcessData::default_instance() {
  protobuf_Perf_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProcessData* ProcessData::New(::google::protobuf::Arena* arena) const {
  ProcessData* n = new ProcessData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.ProcessData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perfdata_.Clear();
  _internal_metadata_.Clear();
}

bool ProcessData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.ProcessData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.fiberhome.fums.proto.SingleProcessPerfData perfdata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_perfdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.ProcessData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.ProcessData)
  return false;
#undef DO_
}

void ProcessData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.ProcessData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.SingleProcessPerfData perfdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perfdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->perfdata(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.ProcessData)
}

::google::protobuf::uint8* ProcessData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.ProcessData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.SingleProcessPerfData perfdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perfdata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->perfdata(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.ProcessData)
  return target;
}

size_t ProcessData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.ProcessData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.fiberhome.fums.proto.SingleProcessPerfData perfdata = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->perfdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perfdata(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.ProcessData)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.ProcessData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.ProcessData)
    MergeFrom(*source);
  }
}

void ProcessData::MergeFrom(const ProcessData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.ProcessData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perfdata_.MergeFrom(from.perfdata_);
}

void ProcessData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.ProcessData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessData::CopyFrom(const ProcessData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.ProcessData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessData::IsInitialized() const {
  return true;
}

void ProcessData::Swap(ProcessData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessData::InternalSwap(ProcessData* other) {
  using std::swap;
  perfdata_.InternalSwap(&other->perfdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessData::GetMetadata() const {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessData

// repeated .com.fiberhome.fums.proto.SingleProcessPerfData perfdata = 1;
int ProcessData::perfdata_size() const {
  return perfdata_.size();
}
void ProcessData::clear_perfdata() {
  perfdata_.Clear();
}
const ::com::fiberhome::fums::proto::SingleProcessPerfData& ProcessData::perfdata(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.ProcessData.perfdata)
  return perfdata_.Get(index);
}
::com::fiberhome::fums::proto::SingleProcessPerfData* ProcessData::mutable_perfdata(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.ProcessData.perfdata)
  return perfdata_.Mutable(index);
}
::com::fiberhome::fums::proto::SingleProcessPerfData* ProcessData::add_perfdata() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.ProcessData.perfdata)
  return perfdata_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleProcessPerfData >*
ProcessData::mutable_perfdata() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.ProcessData.perfdata)
  return &perfdata_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleProcessPerfData >&
ProcessData::perfdata() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.ProcessData.perfdata)
  return perfdata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleProcessPerfData::kPIDFieldNumber;
const int SingleProcessPerfData::kCOMMANDFieldNumber;
const int SingleProcessPerfData::kCPUFieldNumber;
const int SingleProcessPerfData::kMEMFieldNumber;
const int SingleProcessPerfData::kSIZEFieldNumber;
const int SingleProcessPerfData::kVIRTFieldNumber;
const int SingleProcessPerfData::kRESFieldNumber;
const int SingleProcessPerfData::kSHRFieldNumber;
const int SingleProcessPerfData::kTIMEFieldNumber;
const int SingleProcessPerfData::kSTATEFieldNumber;
const int SingleProcessPerfData::kCPUMAXFieldNumber;
const int SingleProcessPerfData::kMEMMAXFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleProcessPerfData::SingleProcessPerfData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Perf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.SingleProcessPerfData)
}
SingleProcessPerfData::SingleProcessPerfData(const SingleProcessPerfData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.command().size() > 0) {
    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.time().size() > 0) {
    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&memmax_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(memmax_));
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.SingleProcessPerfData)
}

void SingleProcessPerfData::SharedCtor() {
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memmax_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(memmax_));
  _cached_size_ = 0;
}

SingleProcessPerfData::~SingleProcessPerfData() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.SingleProcessPerfData)
  SharedDtor();
}

void SingleProcessPerfData::SharedDtor() {
  command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SingleProcessPerfData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleProcessPerfData::descriptor() {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleProcessPerfData& SingleProcessPerfData::default_instance() {
  protobuf_Perf_2eproto::InitDefaults();
  return *internal_default_instance();
}

SingleProcessPerfData* SingleProcessPerfData::New(::google::protobuf::Arena* arena) const {
  SingleProcessPerfData* n = new SingleProcessPerfData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleProcessPerfData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.SingleProcessPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memmax_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(memmax_));
  _internal_metadata_.Clear();
}

bool SingleProcessPerfData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.SingleProcessPerfData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 PID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string COMMAND = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->command().data(), static_cast<int>(this->command().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float CPU = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float MEM = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 SIZE = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 VIRT = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &virt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 RES = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &res_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 SHR = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string TIME = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), static_cast<int>(this->time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.SingleProcessPerfData.TIME"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string STATE = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.SingleProcessPerfData.STATE"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float CPUMAX = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpumax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float MEMMAX = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &memmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.SingleProcessPerfData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.SingleProcessPerfData)
  return false;
#undef DO_
}

void SingleProcessPerfData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.SingleProcessPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 PID = 1;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // string COMMAND = 2;
  if (this->command().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command().data(), static_cast<int>(this->command().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->command(), output);
  }

  // float CPU = 3;
  if (this->cpu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cpu(), output);
  }

  // float MEM = 4;
  if (this->mem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->mem(), output);
  }

  // int64 SIZE = 5;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->size(), output);
  }

  // int64 VIRT = 6;
  if (this->virt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->virt(), output);
  }

  // int64 RES = 7;
  if (this->res() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->res(), output);
  }

  // int64 SHR = 8;
  if (this->shr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->shr(), output);
  }

  // string TIME = 9;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), static_cast<int>(this->time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleProcessPerfData.TIME");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->time(), output);
  }

  // string STATE = 10;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleProcessPerfData.STATE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->state(), output);
  }

  // float CPUMAX = 11;
  if (this->cpumax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->cpumax(), output);
  }

  // float MEMMAX = 12;
  if (this->memmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->memmax(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.SingleProcessPerfData)
}

::google::protobuf::uint8* SingleProcessPerfData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.SingleProcessPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 PID = 1;
  if (this->pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // string COMMAND = 2;
  if (this->command().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->command().data(), static_cast<int>(this->command().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->command(), target);
  }

  // float CPU = 3;
  if (this->cpu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cpu(), target);
  }

  // float MEM = 4;
  if (this->mem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->mem(), target);
  }

  // int64 SIZE = 5;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->size(), target);
  }

  // int64 VIRT = 6;
  if (this->virt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->virt(), target);
  }

  // int64 RES = 7;
  if (this->res() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->res(), target);
  }

  // int64 SHR = 8;
  if (this->shr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->shr(), target);
  }

  // string TIME = 9;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), static_cast<int>(this->time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleProcessPerfData.TIME");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->time(), target);
  }

  // string STATE = 10;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleProcessPerfData.STATE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->state(), target);
  }

  // float CPUMAX = 11;
  if (this->cpumax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->cpumax(), target);
  }

  // float MEMMAX = 12;
  if (this->memmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->memmax(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.SingleProcessPerfData)
  return target;
}

size_t SingleProcessPerfData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.SingleProcessPerfData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string COMMAND = 2;
  if (this->command().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->command());
  }

  // string TIME = 9;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  // string STATE = 10;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // int64 PID = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pid());
  }

  // float CPU = 3;
  if (this->cpu() != 0) {
    total_size += 1 + 4;
  }

  // float MEM = 4;
  if (this->mem() != 0) {
    total_size += 1 + 4;
  }

  // int64 SIZE = 5;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size());
  }

  // int64 VIRT = 6;
  if (this->virt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->virt());
  }

  // int64 RES = 7;
  if (this->res() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->res());
  }

  // int64 SHR = 8;
  if (this->shr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->shr());
  }

  // float CPUMAX = 11;
  if (this->cpumax() != 0) {
    total_size += 1 + 4;
  }

  // float MEMMAX = 12;
  if (this->memmax() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleProcessPerfData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.SingleProcessPerfData)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleProcessPerfData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleProcessPerfData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.SingleProcessPerfData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.SingleProcessPerfData)
    MergeFrom(*source);
  }
}

void SingleProcessPerfData::MergeFrom(const SingleProcessPerfData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.SingleProcessPerfData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command().size() > 0) {

    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
  if (from.cpu() != 0) {
    set_cpu(from.cpu());
  }
  if (from.mem() != 0) {
    set_mem(from.mem());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.virt() != 0) {
    set_virt(from.virt());
  }
  if (from.res() != 0) {
    set_res(from.res());
  }
  if (from.shr() != 0) {
    set_shr(from.shr());
  }
  if (from.cpumax() != 0) {
    set_cpumax(from.cpumax());
  }
  if (from.memmax() != 0) {
    set_memmax(from.memmax());
  }
}

void SingleProcessPerfData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.SingleProcessPerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleProcessPerfData::CopyFrom(const SingleProcessPerfData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.SingleProcessPerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleProcessPerfData::IsInitialized() const {
  return true;
}

void SingleProcessPerfData::Swap(SingleProcessPerfData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleProcessPerfData::InternalSwap(SingleProcessPerfData* other) {
  using std::swap;
  command_.Swap(&other->command_);
  time_.Swap(&other->time_);
  state_.Swap(&other->state_);
  swap(pid_, other->pid_);
  swap(cpu_, other->cpu_);
  swap(mem_, other->mem_);
  swap(size_, other->size_);
  swap(virt_, other->virt_);
  swap(res_, other->res_);
  swap(shr_, other->shr_);
  swap(cpumax_, other->cpumax_);
  swap(memmax_, other->memmax_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleProcessPerfData::GetMetadata() const {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleProcessPerfData

// int64 PID = 1;
void SingleProcessPerfData::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleProcessPerfData::pid() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.PID)
  return pid_;
}
void SingleProcessPerfData::set_pid(::google::protobuf::int64 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.PID)
}

// string COMMAND = 2;
void SingleProcessPerfData::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SingleProcessPerfData::command() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
  return command_.GetNoArena();
}
void SingleProcessPerfData::set_command(const ::std::string& value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
}
#if LANG_CXX11
void SingleProcessPerfData::set_command(::std::string&& value) {
  
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
}
#endif
void SingleProcessPerfData::set_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
}
void SingleProcessPerfData::set_command(const char* value, size_t size) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
}
::std::string* SingleProcessPerfData::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SingleProcessPerfData::release_command() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
  
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SingleProcessPerfData::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleProcessPerfData.COMMAND)
}

// float CPU = 3;
void SingleProcessPerfData::clear_cpu() {
  cpu_ = 0;
}
float SingleProcessPerfData::cpu() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.CPU)
  return cpu_;
}
void SingleProcessPerfData::set_cpu(float value) {
  
  cpu_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.CPU)
}

// float MEM = 4;
void SingleProcessPerfData::clear_mem() {
  mem_ = 0;
}
float SingleProcessPerfData::mem() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.MEM)
  return mem_;
}
void SingleProcessPerfData::set_mem(float value) {
  
  mem_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.MEM)
}

// int64 SIZE = 5;
void SingleProcessPerfData::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleProcessPerfData::size() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.SIZE)
  return size_;
}
void SingleProcessPerfData::set_size(::google::protobuf::int64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.SIZE)
}

// int64 VIRT = 6;
void SingleProcessPerfData::clear_virt() {
  virt_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleProcessPerfData::virt() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.VIRT)
  return virt_;
}
void SingleProcessPerfData::set_virt(::google::protobuf::int64 value) {
  
  virt_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.VIRT)
}

// int64 RES = 7;
void SingleProcessPerfData::clear_res() {
  res_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleProcessPerfData::res() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.RES)
  return res_;
}
void SingleProcessPerfData::set_res(::google::protobuf::int64 value) {
  
  res_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.RES)
}

// int64 SHR = 8;
void SingleProcessPerfData::clear_shr() {
  shr_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SingleProcessPerfData::shr() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.SHR)
  return shr_;
}
void SingleProcessPerfData::set_shr(::google::protobuf::int64 value) {
  
  shr_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.SHR)
}

// string TIME = 9;
void SingleProcessPerfData::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SingleProcessPerfData::time() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
  return time_.GetNoArena();
}
void SingleProcessPerfData::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
}
#if LANG_CXX11
void SingleProcessPerfData::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
}
#endif
void SingleProcessPerfData::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
}
void SingleProcessPerfData::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
}
::std::string* SingleProcessPerfData::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SingleProcessPerfData::release_time() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SingleProcessPerfData::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleProcessPerfData.TIME)
}

// string STATE = 10;
void SingleProcessPerfData::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SingleProcessPerfData::state() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
  return state_.GetNoArena();
}
void SingleProcessPerfData::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
}
#if LANG_CXX11
void SingleProcessPerfData::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
}
#endif
void SingleProcessPerfData::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
}
void SingleProcessPerfData::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
}
::std::string* SingleProcessPerfData::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SingleProcessPerfData::release_state() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SingleProcessPerfData::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleProcessPerfData.STATE)
}

// float CPUMAX = 11;
void SingleProcessPerfData::clear_cpumax() {
  cpumax_ = 0;
}
float SingleProcessPerfData::cpumax() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.CPUMAX)
  return cpumax_;
}
void SingleProcessPerfData::set_cpumax(float value) {
  
  cpumax_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.CPUMAX)
}

// float MEMMAX = 12;
void SingleProcessPerfData::clear_memmax() {
  memmax_ = 0;
}
float SingleProcessPerfData::memmax() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleProcessPerfData.MEMMAX)
  return memmax_;
}
void SingleProcessPerfData::set_memmax(float value) {
  
  memmax_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleProcessPerfData.MEMMAX)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NicData::kPerfdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NicData::NicData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Perf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.NicData)
}
NicData::NicData(const NicData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      perfdata_(from.perfdata_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.NicData)
}

void NicData::SharedCtor() {
  _cached_size_ = 0;
}

NicData::~NicData() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.NicData)
  SharedDtor();
}

void NicData::SharedDtor() {
}

void NicData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NicData::descriptor() {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NicData& NicData::default_instance() {
  protobuf_Perf_2eproto::InitDefaults();
  return *internal_default_instance();
}

NicData* NicData::New(::google::protobuf::Arena* arena) const {
  NicData* n = new NicData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NicData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.NicData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perfdata_.Clear();
  _internal_metadata_.Clear();
}

bool NicData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.NicData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.fiberhome.fums.proto.SingleNicPerfData perfdata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_perfdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.NicData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.NicData)
  return false;
#undef DO_
}

void NicData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.NicData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.SingleNicPerfData perfdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perfdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->perfdata(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.NicData)
}

::google::protobuf::uint8* NicData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.NicData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.SingleNicPerfData perfdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perfdata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->perfdata(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.NicData)
  return target;
}

size_t NicData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.NicData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.fiberhome.fums.proto.SingleNicPerfData perfdata = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->perfdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perfdata(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NicData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.NicData)
  GOOGLE_DCHECK_NE(&from, this);
  const NicData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NicData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.NicData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.NicData)
    MergeFrom(*source);
  }
}

void NicData::MergeFrom(const NicData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.NicData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perfdata_.MergeFrom(from.perfdata_);
}

void NicData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.NicData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NicData::CopyFrom(const NicData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.NicData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NicData::IsInitialized() const {
  return true;
}

void NicData::Swap(NicData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NicData::InternalSwap(NicData* other) {
  using std::swap;
  perfdata_.InternalSwap(&other->perfdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NicData::GetMetadata() const {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NicData

// repeated .com.fiberhome.fums.proto.SingleNicPerfData perfdata = 1;
int NicData::perfdata_size() const {
  return perfdata_.size();
}
void NicData::clear_perfdata() {
  perfdata_.Clear();
}
const ::com::fiberhome::fums::proto::SingleNicPerfData& NicData::perfdata(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.NicData.perfdata)
  return perfdata_.Get(index);
}
::com::fiberhome::fums::proto::SingleNicPerfData* NicData::mutable_perfdata(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.NicData.perfdata)
  return perfdata_.Mutable(index);
}
::com::fiberhome::fums::proto::SingleNicPerfData* NicData::add_perfdata() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.NicData.perfdata)
  return perfdata_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleNicPerfData >*
NicData::mutable_perfdata() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.NicData.perfdata)
  return &perfdata_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleNicPerfData >&
NicData::perfdata() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.NicData.perfdata)
  return perfdata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiskData::kPerfdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiskData::DiskData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Perf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.DiskData)
}
DiskData::DiskData(const DiskData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      perfdata_(from.perfdata_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.DiskData)
}

void DiskData::SharedCtor() {
  _cached_size_ = 0;
}

DiskData::~DiskData() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.DiskData)
  SharedDtor();
}

void DiskData::SharedDtor() {
}

void DiskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskData::descriptor() {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DiskData& DiskData::default_instance() {
  protobuf_Perf_2eproto::InitDefaults();
  return *internal_default_instance();
}

DiskData* DiskData::New(::google::protobuf::Arena* arena) const {
  DiskData* n = new DiskData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiskData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.DiskData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perfdata_.Clear();
  _internal_metadata_.Clear();
}

bool DiskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.DiskData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.fiberhome.fums.proto.SingleDiskPerfData perfdata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_perfdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.DiskData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.DiskData)
  return false;
#undef DO_
}

void DiskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.DiskData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.SingleDiskPerfData perfdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perfdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->perfdata(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.DiskData)
}

::google::protobuf::uint8* DiskData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.DiskData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.SingleDiskPerfData perfdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perfdata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->perfdata(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.DiskData)
  return target;
}

size_t DiskData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.DiskData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.fiberhome.fums.proto.SingleDiskPerfData perfdata = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->perfdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perfdata(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.DiskData)
  GOOGLE_DCHECK_NE(&from, this);
  const DiskData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DiskData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.DiskData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.DiskData)
    MergeFrom(*source);
  }
}

void DiskData::MergeFrom(const DiskData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.DiskData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perfdata_.MergeFrom(from.perfdata_);
}

void DiskData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.DiskData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskData::CopyFrom(const DiskData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.DiskData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskData::IsInitialized() const {
  return true;
}

void DiskData::Swap(DiskData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiskData::InternalSwap(DiskData* other) {
  using std::swap;
  perfdata_.InternalSwap(&other->perfdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiskData::GetMetadata() const {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiskData

// repeated .com.fiberhome.fums.proto.SingleDiskPerfData perfdata = 1;
int DiskData::perfdata_size() const {
  return perfdata_.size();
}
void DiskData::clear_perfdata() {
  perfdata_.Clear();
}
const ::com::fiberhome::fums::proto::SingleDiskPerfData& DiskData::perfdata(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.DiskData.perfdata)
  return perfdata_.Get(index);
}
::com::fiberhome::fums::proto::SingleDiskPerfData* DiskData::mutable_perfdata(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.DiskData.perfdata)
  return perfdata_.Mutable(index);
}
::com::fiberhome::fums::proto::SingleDiskPerfData* DiskData::add_perfdata() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.DiskData.perfdata)
  return perfdata_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleDiskPerfData >*
DiskData::mutable_perfdata() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.DiskData.perfdata)
  return &perfdata_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleDiskPerfData >&
DiskData::perfdata() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.DiskData.perfdata)
  return perfdata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleDiskPerfData::kDevFieldNumber;
const int SingleDiskPerfData::kTpsFieldNumber;
const int SingleDiskPerfData::kRdSecFieldNumber;
const int SingleDiskPerfData::kWrSecFieldNumber;
const int SingleDiskPerfData::kAvgrqSzFieldNumber;
const int SingleDiskPerfData::kAvgquSzFieldNumber;
const int SingleDiskPerfData::kAwaitFieldNumber;
const int SingleDiskPerfData::kSvctmFieldNumber;
const int SingleDiskPerfData::kUtilFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleDiskPerfData::SingleDiskPerfData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Perf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.SingleDiskPerfData)
}
SingleDiskPerfData::SingleDiskPerfData(const SingleDiskPerfData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dev_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dev().size() > 0) {
    dev_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_);
  }
  ::memcpy(&tps_, &from.tps_,
    static_cast<size_t>(reinterpret_cast<char*>(&util_) -
    reinterpret_cast<char*>(&tps_)) + sizeof(util_));
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.SingleDiskPerfData)
}

void SingleDiskPerfData::SharedCtor() {
  dev_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&util_) -
      reinterpret_cast<char*>(&tps_)) + sizeof(util_));
  _cached_size_ = 0;
}

SingleDiskPerfData::~SingleDiskPerfData() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.SingleDiskPerfData)
  SharedDtor();
}

void SingleDiskPerfData::SharedDtor() {
  dev_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SingleDiskPerfData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleDiskPerfData::descriptor() {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleDiskPerfData& SingleDiskPerfData::default_instance() {
  protobuf_Perf_2eproto::InitDefaults();
  return *internal_default_instance();
}

SingleDiskPerfData* SingleDiskPerfData::New(::google::protobuf::Arena* arena) const {
  SingleDiskPerfData* n = new SingleDiskPerfData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleDiskPerfData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.SingleDiskPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&util_) -
      reinterpret_cast<char*>(&tps_)) + sizeof(util_));
  _internal_metadata_.Clear();
}

bool SingleDiskPerfData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.SingleDiskPerfData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dev()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dev().data(), static_cast<int>(this->dev().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.SingleDiskPerfData.dev"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rd_sec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rd_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float wr_sec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wr_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float avgrq_sz = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avgrq_sz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float avgqu_sz = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avgqu_sz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float await = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &await_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float svctm = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &svctm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float util = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &util_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.SingleDiskPerfData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.SingleDiskPerfData)
  return false;
#undef DO_
}

void SingleDiskPerfData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.SingleDiskPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev = 1;
  if (this->dev().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dev().data(), static_cast<int>(this->dev().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleDiskPerfData.dev");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dev(), output);
  }

  // float tps = 2;
  if (this->tps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->tps(), output);
  }

  // float rd_sec = 3;
  if (this->rd_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rd_sec(), output);
  }

  // float wr_sec = 4;
  if (this->wr_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->wr_sec(), output);
  }

  // float avgrq_sz = 5;
  if (this->avgrq_sz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->avgrq_sz(), output);
  }

  // float avgqu_sz = 6;
  if (this->avgqu_sz() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->avgqu_sz(), output);
  }

  // float await = 7;
  if (this->await() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->await(), output);
  }

  // float svctm = 8;
  if (this->svctm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->svctm(), output);
  }

  // float util = 9;
  if (this->util() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->util(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.SingleDiskPerfData)
}

::google::protobuf::uint8* SingleDiskPerfData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.SingleDiskPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dev = 1;
  if (this->dev().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dev().data(), static_cast<int>(this->dev().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleDiskPerfData.dev");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dev(), target);
  }

  // float tps = 2;
  if (this->tps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->tps(), target);
  }

  // float rd_sec = 3;
  if (this->rd_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rd_sec(), target);
  }

  // float wr_sec = 4;
  if (this->wr_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->wr_sec(), target);
  }

  // float avgrq_sz = 5;
  if (this->avgrq_sz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->avgrq_sz(), target);
  }

  // float avgqu_sz = 6;
  if (this->avgqu_sz() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->avgqu_sz(), target);
  }

  // float await = 7;
  if (this->await() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->await(), target);
  }

  // float svctm = 8;
  if (this->svctm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->svctm(), target);
  }

  // float util = 9;
  if (this->util() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->util(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.SingleDiskPerfData)
  return target;
}

size_t SingleDiskPerfData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.SingleDiskPerfData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dev = 1;
  if (this->dev().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dev());
  }

  // float tps = 2;
  if (this->tps() != 0) {
    total_size += 1 + 4;
  }

  // float rd_sec = 3;
  if (this->rd_sec() != 0) {
    total_size += 1 + 4;
  }

  // float wr_sec = 4;
  if (this->wr_sec() != 0) {
    total_size += 1 + 4;
  }

  // float avgrq_sz = 5;
  if (this->avgrq_sz() != 0) {
    total_size += 1 + 4;
  }

  // float avgqu_sz = 6;
  if (this->avgqu_sz() != 0) {
    total_size += 1 + 4;
  }

  // float await = 7;
  if (this->await() != 0) {
    total_size += 1 + 4;
  }

  // float svctm = 8;
  if (this->svctm() != 0) {
    total_size += 1 + 4;
  }

  // float util = 9;
  if (this->util() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleDiskPerfData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.SingleDiskPerfData)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleDiskPerfData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleDiskPerfData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.SingleDiskPerfData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.SingleDiskPerfData)
    MergeFrom(*source);
  }
}

void SingleDiskPerfData::MergeFrom(const SingleDiskPerfData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.SingleDiskPerfData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev().size() > 0) {

    dev_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_);
  }
  if (from.tps() != 0) {
    set_tps(from.tps());
  }
  if (from.rd_sec() != 0) {
    set_rd_sec(from.rd_sec());
  }
  if (from.wr_sec() != 0) {
    set_wr_sec(from.wr_sec());
  }
  if (from.avgrq_sz() != 0) {
    set_avgrq_sz(from.avgrq_sz());
  }
  if (from.avgqu_sz() != 0) {
    set_avgqu_sz(from.avgqu_sz());
  }
  if (from.await() != 0) {
    set_await(from.await());
  }
  if (from.svctm() != 0) {
    set_svctm(from.svctm());
  }
  if (from.util() != 0) {
    set_util(from.util());
  }
}

void SingleDiskPerfData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.SingleDiskPerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleDiskPerfData::CopyFrom(const SingleDiskPerfData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.SingleDiskPerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDiskPerfData::IsInitialized() const {
  return true;
}

void SingleDiskPerfData::Swap(SingleDiskPerfData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleDiskPerfData::InternalSwap(SingleDiskPerfData* other) {
  using std::swap;
  dev_.Swap(&other->dev_);
  swap(tps_, other->tps_);
  swap(rd_sec_, other->rd_sec_);
  swap(wr_sec_, other->wr_sec_);
  swap(avgrq_sz_, other->avgrq_sz_);
  swap(avgqu_sz_, other->avgqu_sz_);
  swap(await_, other->await_);
  swap(svctm_, other->svctm_);
  swap(util_, other->util_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleDiskPerfData::GetMetadata() const {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleDiskPerfData

// string dev = 1;
void SingleDiskPerfData::clear_dev() {
  dev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SingleDiskPerfData::dev() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
  return dev_.GetNoArena();
}
void SingleDiskPerfData::set_dev(const ::std::string& value) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
}
#if LANG_CXX11
void SingleDiskPerfData::set_dev(::std::string&& value) {
  
  dev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
}
#endif
void SingleDiskPerfData::set_dev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
}
void SingleDiskPerfData::set_dev(const char* value, size_t size) {
  
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
}
::std::string* SingleDiskPerfData::mutable_dev() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
  return dev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SingleDiskPerfData::release_dev() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
  
  return dev_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SingleDiskPerfData::set_allocated_dev(::std::string* dev) {
  if (dev != NULL) {
    
  } else {
    
  }
  dev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleDiskPerfData.dev)
}

// float tps = 2;
void SingleDiskPerfData::clear_tps() {
  tps_ = 0;
}
float SingleDiskPerfData::tps() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.tps)
  return tps_;
}
void SingleDiskPerfData::set_tps(float value) {
  
  tps_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.tps)
}

// float rd_sec = 3;
void SingleDiskPerfData::clear_rd_sec() {
  rd_sec_ = 0;
}
float SingleDiskPerfData::rd_sec() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.rd_sec)
  return rd_sec_;
}
void SingleDiskPerfData::set_rd_sec(float value) {
  
  rd_sec_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.rd_sec)
}

// float wr_sec = 4;
void SingleDiskPerfData::clear_wr_sec() {
  wr_sec_ = 0;
}
float SingleDiskPerfData::wr_sec() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.wr_sec)
  return wr_sec_;
}
void SingleDiskPerfData::set_wr_sec(float value) {
  
  wr_sec_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.wr_sec)
}

// float avgrq_sz = 5;
void SingleDiskPerfData::clear_avgrq_sz() {
  avgrq_sz_ = 0;
}
float SingleDiskPerfData::avgrq_sz() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.avgrq_sz)
  return avgrq_sz_;
}
void SingleDiskPerfData::set_avgrq_sz(float value) {
  
  avgrq_sz_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.avgrq_sz)
}

// float avgqu_sz = 6;
void SingleDiskPerfData::clear_avgqu_sz() {
  avgqu_sz_ = 0;
}
float SingleDiskPerfData::avgqu_sz() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.avgqu_sz)
  return avgqu_sz_;
}
void SingleDiskPerfData::set_avgqu_sz(float value) {
  
  avgqu_sz_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.avgqu_sz)
}

// float await = 7;
void SingleDiskPerfData::clear_await() {
  await_ = 0;
}
float SingleDiskPerfData::await() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.await)
  return await_;
}
void SingleDiskPerfData::set_await(float value) {
  
  await_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.await)
}

// float svctm = 8;
void SingleDiskPerfData::clear_svctm() {
  svctm_ = 0;
}
float SingleDiskPerfData::svctm() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.svctm)
  return svctm_;
}
void SingleDiskPerfData::set_svctm(float value) {
  
  svctm_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.svctm)
}

// float util = 9;
void SingleDiskPerfData::clear_util() {
  util_ = 0;
}
float SingleDiskPerfData::util() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleDiskPerfData.util)
  return util_;
}
void SingleDiskPerfData::set_util(float value) {
  
  util_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleDiskPerfData.util)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppPerfData::kPerfdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppPerfData::AppPerfData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Perf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.AppPerfData)
}
AppPerfData::AppPerfData(const AppPerfData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      perfdata_(from.perfdata_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.AppPerfData)
}

void AppPerfData::SharedCtor() {
  _cached_size_ = 0;
}

AppPerfData::~AppPerfData() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.AppPerfData)
  SharedDtor();
}

void AppPerfData::SharedDtor() {
}

void AppPerfData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppPerfData::descriptor() {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppPerfData& AppPerfData::default_instance() {
  protobuf_Perf_2eproto::InitDefaults();
  return *internal_default_instance();
}

AppPerfData* AppPerfData::New(::google::protobuf::Arena* arena) const {
  AppPerfData* n = new AppPerfData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppPerfData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.AppPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perfdata_.Clear();
  _internal_metadata_.Clear();
}

bool AppPerfData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.AppPerfData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.fiberhome.fums.proto.SingleAppPerfData perfdata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_perfdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.AppPerfData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.AppPerfData)
  return false;
#undef DO_
}

void AppPerfData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.AppPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.SingleAppPerfData perfdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perfdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->perfdata(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.AppPerfData)
}

::google::protobuf::uint8* AppPerfData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.AppPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.fiberhome.fums.proto.SingleAppPerfData perfdata = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perfdata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->perfdata(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.AppPerfData)
  return target;
}

size_t AppPerfData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.AppPerfData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .com.fiberhome.fums.proto.SingleAppPerfData perfdata = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->perfdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perfdata(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppPerfData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.AppPerfData)
  GOOGLE_DCHECK_NE(&from, this);
  const AppPerfData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppPerfData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.AppPerfData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.AppPerfData)
    MergeFrom(*source);
  }
}

void AppPerfData::MergeFrom(const AppPerfData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.AppPerfData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perfdata_.MergeFrom(from.perfdata_);
}

void AppPerfData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.AppPerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppPerfData::CopyFrom(const AppPerfData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.AppPerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppPerfData::IsInitialized() const {
  return true;
}

void AppPerfData::Swap(AppPerfData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppPerfData::InternalSwap(AppPerfData* other) {
  using std::swap;
  perfdata_.InternalSwap(&other->perfdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppPerfData::GetMetadata() const {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppPerfData

// repeated .com.fiberhome.fums.proto.SingleAppPerfData perfdata = 1;
int AppPerfData::perfdata_size() const {
  return perfdata_.size();
}
void AppPerfData::clear_perfdata() {
  perfdata_.Clear();
}
const ::com::fiberhome::fums::proto::SingleAppPerfData& AppPerfData::perfdata(int index) const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.AppPerfData.perfdata)
  return perfdata_.Get(index);
}
::com::fiberhome::fums::proto::SingleAppPerfData* AppPerfData::mutable_perfdata(int index) {
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.AppPerfData.perfdata)
  return perfdata_.Mutable(index);
}
::com::fiberhome::fums::proto::SingleAppPerfData* AppPerfData::add_perfdata() {
  // @@protoc_insertion_point(field_add:com.fiberhome.fums.proto.AppPerfData.perfdata)
  return perfdata_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleAppPerfData >*
AppPerfData::mutable_perfdata() {
  // @@protoc_insertion_point(field_mutable_list:com.fiberhome.fums.proto.AppPerfData.perfdata)
  return &perfdata_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fiberhome::fums::proto::SingleAppPerfData >&
AppPerfData::perfdata() const {
  // @@protoc_insertion_point(field_list:com.fiberhome.fums.proto.AppPerfData.perfdata)
  return perfdata_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleAppPerfData::kSequenceFieldNumber;
const int SingleAppPerfData::kAppTypeFieldNumber;
const int SingleAppPerfData::kAppTypeCodeFieldNumber;
const int SingleAppPerfData::kCreateTimeFieldNumber;
const int SingleAppPerfData::kCpuRatioFieldNumber;
const int SingleAppPerfData::kUsedMemoryFieldNumber;
const int SingleAppPerfData::kUsedSysDiskFieldNumber;
const int SingleAppPerfData::kUsedDataDiskFieldNumber;
const int SingleAppPerfData::kTotalDataDiskFieldNumber;
const int SingleAppPerfData::kCacheInFieldNumber;
const int SingleAppPerfData::kCacheOutFieldNumber;
const int SingleAppPerfData::kCurconnFieldNumber;
const int SingleAppPerfData::kAveragereqFieldNumber;
const int SingleAppPerfData::kDNSRequestsFieldNumber;
const int SingleAppPerfData::kDNSResponseFieldNumber;
const int SingleAppPerfData::kHttpRequestsFieldNumber;
const int SingleAppPerfData::kHttpRedirectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleAppPerfData::SingleAppPerfData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_Perf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fiberhome.fums.proto.SingleAppPerfData)
}
SingleAppPerfData::SingleAppPerfData(const SingleAppPerfData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  createtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.createtime().size() > 0) {
    createtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createtime_);
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&httpredirects_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(httpredirects_));
  // @@protoc_insertion_point(copy_constructor:com.fiberhome.fums.proto.SingleAppPerfData)
}

void SingleAppPerfData::SharedCtor() {
  createtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&httpredirects_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(httpredirects_));
  _cached_size_ = 0;
}

SingleAppPerfData::~SingleAppPerfData() {
  // @@protoc_insertion_point(destructor:com.fiberhome.fums.proto.SingleAppPerfData)
  SharedDtor();
}

void SingleAppPerfData::SharedDtor() {
  createtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SingleAppPerfData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleAppPerfData::descriptor() {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleAppPerfData& SingleAppPerfData::default_instance() {
  protobuf_Perf_2eproto::InitDefaults();
  return *internal_default_instance();
}

SingleAppPerfData* SingleAppPerfData::New(::google::protobuf::Arena* arena) const {
  SingleAppPerfData* n = new SingleAppPerfData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SingleAppPerfData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fiberhome.fums.proto.SingleAppPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  createtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&httpredirects_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(httpredirects_));
  _internal_metadata_.Clear();
}

bool SingleAppPerfData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fiberhome.fums.proto.SingleAppPerfData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sequence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fiberhome.fums.proto.SingleAppPerfData.APP_TYPE_ENUM appType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_apptype(static_cast< ::com::fiberhome::fums::proto::SingleAppPerfData_APP_TYPE_ENUM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fiberhome.fums.proto.EnumDefineData.AppTypeEnum appTypeCode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_apptypecode(static_cast< ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string createTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->createtime().data(), static_cast<int>(this->createtime().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fiberhome.fums.proto.SingleAppPerfData.createTime"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cpuRatio = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpuratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 usedMemory = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usedmemory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double usedSysDisk = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usedsysdisk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double usedDataDisk = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &useddatadisk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double totalDataDisk = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totaldatadisk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cacheIn = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cachein_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cacheOut = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cacheout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double curconn = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curconn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double averagereq = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averagereq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DNSRequests = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dnsrequests_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double DNSResponse = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dnsresponse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double httpRequests = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &httprequests_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double httpRedirects = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &httpredirects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fiberhome.fums.proto.SingleAppPerfData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fiberhome.fums.proto.SingleAppPerfData)
  return false;
#undef DO_
}

void SingleAppPerfData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fiberhome.fums.proto.SingleAppPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence(), output);
  }

  // .com.fiberhome.fums.proto.SingleAppPerfData.APP_TYPE_ENUM appType = 2;
  if (this->apptype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->apptype(), output);
  }

  // .com.fiberhome.fums.proto.EnumDefineData.AppTypeEnum appTypeCode = 3;
  if (this->apptypecode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->apptypecode(), output);
  }

  // string createTime = 4;
  if (this->createtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createtime().data(), static_cast<int>(this->createtime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleAppPerfData.createTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->createtime(), output);
  }

  // double cpuRatio = 5;
  if (this->cpuratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->cpuratio(), output);
  }

  // int32 usedMemory = 6;
  if (this->usedmemory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->usedmemory(), output);
  }

  // double usedSysDisk = 7;
  if (this->usedsysdisk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->usedsysdisk(), output);
  }

  // double usedDataDisk = 8;
  if (this->useddatadisk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->useddatadisk(), output);
  }

  // double totalDataDisk = 9;
  if (this->totaldatadisk() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->totaldatadisk(), output);
  }

  // double cacheIn = 10;
  if (this->cachein() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->cachein(), output);
  }

  // double cacheOut = 11;
  if (this->cacheout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->cacheout(), output);
  }

  // double curconn = 12;
  if (this->curconn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->curconn(), output);
  }

  // double averagereq = 13;
  if (this->averagereq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->averagereq(), output);
  }

  // double DNSRequests = 14;
  if (this->dnsrequests() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->dnsrequests(), output);
  }

  // double DNSResponse = 15;
  if (this->dnsresponse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->dnsresponse(), output);
  }

  // double httpRequests = 16;
  if (this->httprequests() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->httprequests(), output);
  }

  // double httpRedirects = 17;
  if (this->httpredirects() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->httpredirects(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.fiberhome.fums.proto.SingleAppPerfData)
}

::google::protobuf::uint8* SingleAppPerfData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fiberhome.fums.proto.SingleAppPerfData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence(), target);
  }

  // .com.fiberhome.fums.proto.SingleAppPerfData.APP_TYPE_ENUM appType = 2;
  if (this->apptype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->apptype(), target);
  }

  // .com.fiberhome.fums.proto.EnumDefineData.AppTypeEnum appTypeCode = 3;
  if (this->apptypecode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->apptypecode(), target);
  }

  // string createTime = 4;
  if (this->createtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->createtime().data(), static_cast<int>(this->createtime().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fiberhome.fums.proto.SingleAppPerfData.createTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->createtime(), target);
  }

  // double cpuRatio = 5;
  if (this->cpuratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->cpuratio(), target);
  }

  // int32 usedMemory = 6;
  if (this->usedmemory() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->usedmemory(), target);
  }

  // double usedSysDisk = 7;
  if (this->usedsysdisk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->usedsysdisk(), target);
  }

  // double usedDataDisk = 8;
  if (this->useddatadisk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->useddatadisk(), target);
  }

  // double totalDataDisk = 9;
  if (this->totaldatadisk() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->totaldatadisk(), target);
  }

  // double cacheIn = 10;
  if (this->cachein() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->cachein(), target);
  }

  // double cacheOut = 11;
  if (this->cacheout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->cacheout(), target);
  }

  // double curconn = 12;
  if (this->curconn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->curconn(), target);
  }

  // double averagereq = 13;
  if (this->averagereq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->averagereq(), target);
  }

  // double DNSRequests = 14;
  if (this->dnsrequests() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->dnsrequests(), target);
  }

  // double DNSResponse = 15;
  if (this->dnsresponse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->dnsresponse(), target);
  }

  // double httpRequests = 16;
  if (this->httprequests() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->httprequests(), target);
  }

  // double httpRedirects = 17;
  if (this->httpredirects() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->httpredirects(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.fiberhome.fums.proto.SingleAppPerfData)
  return target;
}

size_t SingleAppPerfData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fiberhome.fums.proto.SingleAppPerfData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string createTime = 4;
  if (this->createtime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->createtime());
  }

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence());
  }

  // .com.fiberhome.fums.proto.SingleAppPerfData.APP_TYPE_ENUM appType = 2;
  if (this->apptype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->apptype());
  }

  // .com.fiberhome.fums.proto.EnumDefineData.AppTypeEnum appTypeCode = 3;
  if (this->apptypecode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->apptypecode());
  }

  // int32 usedMemory = 6;
  if (this->usedmemory() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->usedmemory());
  }

  // double cpuRatio = 5;
  if (this->cpuratio() != 0) {
    total_size += 1 + 8;
  }

  // double usedSysDisk = 7;
  if (this->usedsysdisk() != 0) {
    total_size += 1 + 8;
  }

  // double usedDataDisk = 8;
  if (this->useddatadisk() != 0) {
    total_size += 1 + 8;
  }

  // double totalDataDisk = 9;
  if (this->totaldatadisk() != 0) {
    total_size += 1 + 8;
  }

  // double cacheIn = 10;
  if (this->cachein() != 0) {
    total_size += 1 + 8;
  }

  // double cacheOut = 11;
  if (this->cacheout() != 0) {
    total_size += 1 + 8;
  }

  // double curconn = 12;
  if (this->curconn() != 0) {
    total_size += 1 + 8;
  }

  // double averagereq = 13;
  if (this->averagereq() != 0) {
    total_size += 1 + 8;
  }

  // double DNSRequests = 14;
  if (this->dnsrequests() != 0) {
    total_size += 1 + 8;
  }

  // double DNSResponse = 15;
  if (this->dnsresponse() != 0) {
    total_size += 1 + 8;
  }

  // double httpRequests = 16;
  if (this->httprequests() != 0) {
    total_size += 2 + 8;
  }

  // double httpRedirects = 17;
  if (this->httpredirects() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleAppPerfData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fiberhome.fums.proto.SingleAppPerfData)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleAppPerfData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleAppPerfData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fiberhome.fums.proto.SingleAppPerfData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fiberhome.fums.proto.SingleAppPerfData)
    MergeFrom(*source);
  }
}

void SingleAppPerfData::MergeFrom(const SingleAppPerfData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fiberhome.fums.proto.SingleAppPerfData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.createtime().size() > 0) {

    createtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.createtime_);
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
  if (from.apptype() != 0) {
    set_apptype(from.apptype());
  }
  if (from.apptypecode() != 0) {
    set_apptypecode(from.apptypecode());
  }
  if (from.usedmemory() != 0) {
    set_usedmemory(from.usedmemory());
  }
  if (from.cpuratio() != 0) {
    set_cpuratio(from.cpuratio());
  }
  if (from.usedsysdisk() != 0) {
    set_usedsysdisk(from.usedsysdisk());
  }
  if (from.useddatadisk() != 0) {
    set_useddatadisk(from.useddatadisk());
  }
  if (from.totaldatadisk() != 0) {
    set_totaldatadisk(from.totaldatadisk());
  }
  if (from.cachein() != 0) {
    set_cachein(from.cachein());
  }
  if (from.cacheout() != 0) {
    set_cacheout(from.cacheout());
  }
  if (from.curconn() != 0) {
    set_curconn(from.curconn());
  }
  if (from.averagereq() != 0) {
    set_averagereq(from.averagereq());
  }
  if (from.dnsrequests() != 0) {
    set_dnsrequests(from.dnsrequests());
  }
  if (from.dnsresponse() != 0) {
    set_dnsresponse(from.dnsresponse());
  }
  if (from.httprequests() != 0) {
    set_httprequests(from.httprequests());
  }
  if (from.httpredirects() != 0) {
    set_httpredirects(from.httpredirects());
  }
}

void SingleAppPerfData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fiberhome.fums.proto.SingleAppPerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleAppPerfData::CopyFrom(const SingleAppPerfData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fiberhome.fums.proto.SingleAppPerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleAppPerfData::IsInitialized() const {
  return true;
}

void SingleAppPerfData::Swap(SingleAppPerfData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleAppPerfData::InternalSwap(SingleAppPerfData* other) {
  using std::swap;
  createtime_.Swap(&other->createtime_);
  swap(sequence_, other->sequence_);
  swap(apptype_, other->apptype_);
  swap(apptypecode_, other->apptypecode_);
  swap(usedmemory_, other->usedmemory_);
  swap(cpuratio_, other->cpuratio_);
  swap(usedsysdisk_, other->usedsysdisk_);
  swap(useddatadisk_, other->useddatadisk_);
  swap(totaldatadisk_, other->totaldatadisk_);
  swap(cachein_, other->cachein_);
  swap(cacheout_, other->cacheout_);
  swap(curconn_, other->curconn_);
  swap(averagereq_, other->averagereq_);
  swap(dnsrequests_, other->dnsrequests_);
  swap(dnsresponse_, other->dnsresponse_);
  swap(httprequests_, other->httprequests_);
  swap(httpredirects_, other->httpredirects_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SingleAppPerfData::GetMetadata() const {
  protobuf_Perf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Perf_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SingleAppPerfData

// int32 sequence = 1;
void SingleAppPerfData::clear_sequence() {
  sequence_ = 0;
}
::google::protobuf::int32 SingleAppPerfData::sequence() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.sequence)
  return sequence_;
}
void SingleAppPerfData::set_sequence(::google::protobuf::int32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.sequence)
}

// .com.fiberhome.fums.proto.SingleAppPerfData.APP_TYPE_ENUM appType = 2;
void SingleAppPerfData::clear_apptype() {
  apptype_ = 0;
}
::com::fiberhome::fums::proto::SingleAppPerfData_APP_TYPE_ENUM SingleAppPerfData::apptype() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.appType)
  return static_cast< ::com::fiberhome::fums::proto::SingleAppPerfData_APP_TYPE_ENUM >(apptype_);
}
void SingleAppPerfData::set_apptype(::com::fiberhome::fums::proto::SingleAppPerfData_APP_TYPE_ENUM value) {
  
  apptype_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.appType)
}

// .com.fiberhome.fums.proto.EnumDefineData.AppTypeEnum appTypeCode = 3;
void SingleAppPerfData::clear_apptypecode() {
  apptypecode_ = 0;
}
::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum SingleAppPerfData::apptypecode() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.appTypeCode)
  return static_cast< ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum >(apptypecode_);
}
void SingleAppPerfData::set_apptypecode(::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum value) {
  
  apptypecode_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.appTypeCode)
}

// string createTime = 4;
void SingleAppPerfData::clear_createtime() {
  createtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SingleAppPerfData::createtime() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
  return createtime_.GetNoArena();
}
void SingleAppPerfData::set_createtime(const ::std::string& value) {
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
}
#if LANG_CXX11
void SingleAppPerfData::set_createtime(::std::string&& value) {
  
  createtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
}
#endif
void SingleAppPerfData::set_createtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
}
void SingleAppPerfData::set_createtime(const char* value, size_t size) {
  
  createtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
}
::std::string* SingleAppPerfData::mutable_createtime() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
  return createtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SingleAppPerfData::release_createtime() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
  
  return createtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SingleAppPerfData::set_allocated_createtime(::std::string* createtime) {
  if (createtime != NULL) {
    
  } else {
    
  }
  createtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), createtime);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleAppPerfData.createTime)
}

// double cpuRatio = 5;
void SingleAppPerfData::clear_cpuratio() {
  cpuratio_ = 0;
}
double SingleAppPerfData::cpuratio() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.cpuRatio)
  return cpuratio_;
}
void SingleAppPerfData::set_cpuratio(double value) {
  
  cpuratio_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.cpuRatio)
}

// int32 usedMemory = 6;
void SingleAppPerfData::clear_usedmemory() {
  usedmemory_ = 0;
}
::google::protobuf::int32 SingleAppPerfData::usedmemory() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.usedMemory)
  return usedmemory_;
}
void SingleAppPerfData::set_usedmemory(::google::protobuf::int32 value) {
  
  usedmemory_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.usedMemory)
}

// double usedSysDisk = 7;
void SingleAppPerfData::clear_usedsysdisk() {
  usedsysdisk_ = 0;
}
double SingleAppPerfData::usedsysdisk() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.usedSysDisk)
  return usedsysdisk_;
}
void SingleAppPerfData::set_usedsysdisk(double value) {
  
  usedsysdisk_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.usedSysDisk)
}

// double usedDataDisk = 8;
void SingleAppPerfData::clear_useddatadisk() {
  useddatadisk_ = 0;
}
double SingleAppPerfData::useddatadisk() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.usedDataDisk)
  return useddatadisk_;
}
void SingleAppPerfData::set_useddatadisk(double value) {
  
  useddatadisk_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.usedDataDisk)
}

// double totalDataDisk = 9;
void SingleAppPerfData::clear_totaldatadisk() {
  totaldatadisk_ = 0;
}
double SingleAppPerfData::totaldatadisk() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.totalDataDisk)
  return totaldatadisk_;
}
void SingleAppPerfData::set_totaldatadisk(double value) {
  
  totaldatadisk_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.totalDataDisk)
}

// double cacheIn = 10;
void SingleAppPerfData::clear_cachein() {
  cachein_ = 0;
}
double SingleAppPerfData::cachein() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.cacheIn)
  return cachein_;
}
void SingleAppPerfData::set_cachein(double value) {
  
  cachein_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.cacheIn)
}

// double cacheOut = 11;
void SingleAppPerfData::clear_cacheout() {
  cacheout_ = 0;
}
double SingleAppPerfData::cacheout() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.cacheOut)
  return cacheout_;
}
void SingleAppPerfData::set_cacheout(double value) {
  
  cacheout_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.cacheOut)
}

// double curconn = 12;
void SingleAppPerfData::clear_curconn() {
  curconn_ = 0;
}
double SingleAppPerfData::curconn() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.curconn)
  return curconn_;
}
void SingleAppPerfData::set_curconn(double value) {
  
  curconn_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.curconn)
}

// double averagereq = 13;
void SingleAppPerfData::clear_averagereq() {
  averagereq_ = 0;
}
double SingleAppPerfData::averagereq() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.averagereq)
  return averagereq_;
}
void SingleAppPerfData::set_averagereq(double value) {
  
  averagereq_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.averagereq)
}

// double DNSRequests = 14;
void SingleAppPerfData::clear_dnsrequests() {
  dnsrequests_ = 0;
}
double SingleAppPerfData::dnsrequests() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.DNSRequests)
  return dnsrequests_;
}
void SingleAppPerfData::set_dnsrequests(double value) {
  
  dnsrequests_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.DNSRequests)
}

// double DNSResponse = 15;
void SingleAppPerfData::clear_dnsresponse() {
  dnsresponse_ = 0;
}
double SingleAppPerfData::dnsresponse() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.DNSResponse)
  return dnsresponse_;
}
void SingleAppPerfData::set_dnsresponse(double value) {
  
  dnsresponse_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.DNSResponse)
}

// double httpRequests = 16;
void SingleAppPerfData::clear_httprequests() {
  httprequests_ = 0;
}
double SingleAppPerfData::httprequests() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.httpRequests)
  return httprequests_;
}
void SingleAppPerfData::set_httprequests(double value) {
  
  httprequests_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.httpRequests)
}

// double httpRedirects = 17;
void SingleAppPerfData::clear_httpredirects() {
  httpredirects_ = 0;
}
double SingleAppPerfData::httpredirects() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleAppPerfData.httpRedirects)
  return httpredirects_;
}
void SingleAppPerfData::set_httpredirects(double value) {
  
  httpredirects_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleAppPerfData.httpRedirects)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

// @@protoc_insertion_point(global_scope)

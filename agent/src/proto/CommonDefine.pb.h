// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonDefine.proto

#ifndef PROTOBUF_CommonDefine_2eproto__INCLUDED
#define PROTOBUF_CommonDefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace com {
namespace fiberhome {
namespace fums {
namespace proto {
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class EnumDefineData;
class EnumDefineDataDefaultTypeInternal;
extern EnumDefineDataDefaultTypeInternal _EnumDefineData_default_instance_;
class SingleNicPerfData;
class SingleNicPerfDataDefaultTypeInternal;
extern SingleNicPerfDataDefaultTypeInternal _SingleNicPerfData_default_instance_;
}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

namespace com {
namespace fiberhome {
namespace fums {
namespace proto {

namespace protobuf_CommonDefine_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_CommonDefine_2eproto

enum CommonResponse_ResStatusEnum {
  CommonResponse_ResStatusEnum_SUCCESS = 0,
  CommonResponse_ResStatusEnum_FAILED = 1,
  CommonResponse_ResStatusEnum_CommonResponse_ResStatusEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CommonResponse_ResStatusEnum_CommonResponse_ResStatusEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CommonResponse_ResStatusEnum_IsValid(int value);
const CommonResponse_ResStatusEnum CommonResponse_ResStatusEnum_ResStatusEnum_MIN = CommonResponse_ResStatusEnum_SUCCESS;
const CommonResponse_ResStatusEnum CommonResponse_ResStatusEnum_ResStatusEnum_MAX = CommonResponse_ResStatusEnum_FAILED;
const int CommonResponse_ResStatusEnum_ResStatusEnum_ARRAYSIZE = CommonResponse_ResStatusEnum_ResStatusEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* CommonResponse_ResStatusEnum_descriptor();
inline const ::std::string& CommonResponse_ResStatusEnum_Name(CommonResponse_ResStatusEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    CommonResponse_ResStatusEnum_descriptor(), value);
}
inline bool CommonResponse_ResStatusEnum_Parse(
    const ::std::string& name, CommonResponse_ResStatusEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommonResponse_ResStatusEnum>(
    CommonResponse_ResStatusEnum_descriptor(), name, value);
}
enum EnumDefineData_AppTypeEnum {
  EnumDefineData_AppTypeEnum_GSLB = 0,
  EnumDefineData_AppTypeEnum_SS = 1,
  EnumDefineData_AppTypeEnum_EPG = 2,
  EnumDefineData_AppTypeEnum_EPG_DB = 3,
  EnumDefineData_AppTypeEnum_EPG_CACHE = 4,
  EnumDefineData_AppTypeEnum_EPG_WEB = 5,
  EnumDefineData_AppTypeEnum_EPG_LB = 6,
  EnumDefineData_AppTypeEnum_EPG_HA = 7,
  EnumDefineData_AppTypeEnum_EPG_LOG = 8,
  EnumDefineData_AppTypeEnum_EPG_RSYNC = 9,
  EnumDefineData_AppTypeEnum_ACS_WEB = 10,
  EnumDefineData_AppTypeEnum_ACS_HA = 11,
  EnumDefineData_AppTypeEnum_ACS_LB = 12,
  EnumDefineData_AppTypeEnum_ACS = 13,
  EnumDefineData_AppTypeEnum_ACS_ALL = 14,
  EnumDefineData_AppTypeEnum_AAA = 15,
  EnumDefineData_AppTypeEnum_AAA_WEB = 16,
  EnumDefineData_AppTypeEnum_AAA_HA = 17,
  EnumDefineData_AppTypeEnum_AAA_LB = 18,
  EnumDefineData_AppTypeEnum_AAA_ALL = 19,
  EnumDefineData_AppTypeEnum_VODLD = 20,
  EnumDefineData_AppTypeEnum_TVLD = 21,
  EnumDefineData_AppTypeEnum_TVLD_TVLD = 22,
  EnumDefineData_AppTypeEnum_TVLD_TLCC = 23,
  EnumDefineData_AppTypeEnum_VCC = 24,
  EnumDefineData_AppTypeEnum_MW = 25,
  EnumDefineData_AppTypeEnum_MW_MA = 26,
  EnumDefineData_AppTypeEnum_MW_OSS = 27,
  EnumDefineData_AppTypeEnum_MW_JBOSS = 28,
  EnumDefineData_AppTypeEnum_MW_HA = 29,
  EnumDefineData_AppTypeEnum_DB = 30,
  EnumDefineData_AppTypeEnum_DB_HA = 31,
  EnumDefineData_AppTypeEnum_PC_EPG = 32,
  EnumDefineData_AppTypeEnum_ADS = 33,
  EnumDefineData_AppTypeEnum_RRS = 34,
  EnumDefineData_AppTypeEnum_RRS_HA = 35,
  EnumDefineData_AppTypeEnum_CMM = 36,
  EnumDefineData_AppTypeEnum_CMMD2 = 37,
  EnumDefineData_AppTypeEnum_TMS = 38,
  EnumDefineData_AppTypeEnum_CMS = 39,
  EnumDefineData_AppTypeEnum_ESS = 40,
  EnumDefineData_AppTypeEnum_OSS = 41,
  EnumDefineData_AppTypeEnum_TCMS = 42,
  EnumDefineData_AppTypeEnum_TVMS = 43,
  EnumDefineData_AppTypeEnum_NGINX = 44,
  EnumDefineData_AppTypeEnum_EPG4K = 45,
  EnumDefineData_AppTypeEnum_TVGW = 46,
  EnumDefineData_AppTypeEnum_CSD = 47,
  EnumDefineData_AppTypeEnum_LRS = 48,
  EnumDefineData_AppTypeEnum_LCM = 49,
  EnumDefineData_AppTypeEnum_CSP = 50,
  EnumDefineData_AppTypeEnum_CSV = 51,
  EnumDefineData_AppTypeEnum_DRS = 52,
  EnumDefineData_AppTypeEnum_CSX = 53,
  EnumDefineData_AppTypeEnum_CSJ = 54,
  EnumDefineData_AppTypeEnum_AGENT = 55,
  EnumDefineData_AppTypeEnum_EnumDefineData_AppTypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnumDefineData_AppTypeEnum_EnumDefineData_AppTypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EnumDefineData_AppTypeEnum_IsValid(int value);
const EnumDefineData_AppTypeEnum EnumDefineData_AppTypeEnum_AppTypeEnum_MIN = EnumDefineData_AppTypeEnum_GSLB;
const EnumDefineData_AppTypeEnum EnumDefineData_AppTypeEnum_AppTypeEnum_MAX = EnumDefineData_AppTypeEnum_AGENT;
const int EnumDefineData_AppTypeEnum_AppTypeEnum_ARRAYSIZE = EnumDefineData_AppTypeEnum_AppTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnumDefineData_AppTypeEnum_descriptor();
inline const ::std::string& EnumDefineData_AppTypeEnum_Name(EnumDefineData_AppTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnumDefineData_AppTypeEnum_descriptor(), value);
}
inline bool EnumDefineData_AppTypeEnum_Parse(
    const ::std::string& name, EnumDefineData_AppTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnumDefineData_AppTypeEnum>(
    EnumDefineData_AppTypeEnum_descriptor(), name, value);
}
// ===================================================================

class CommonResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.CommonResponse) */ {
 public:
  CommonResponse();
  virtual ~CommonResponse();

  CommonResponse(const CommonResponse& from);

  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonResponse(CommonResponse&& from) noexcept
    : CommonResponse() {
    *this = ::std::move(from);
  }

  inline CommonResponse& operator=(CommonResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonResponse& default_instance();

  static inline const CommonResponse* internal_default_instance() {
    return reinterpret_cast<const CommonResponse*>(
               &_CommonResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CommonResponse* other);
  friend void swap(CommonResponse& a, CommonResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonResponse& from);
  void MergeFrom(const CommonResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CommonResponse_ResStatusEnum ResStatusEnum;
  static const ResStatusEnum SUCCESS =
    CommonResponse_ResStatusEnum_SUCCESS;
  static const ResStatusEnum FAILED =
    CommonResponse_ResStatusEnum_FAILED;
  static inline bool ResStatusEnum_IsValid(int value) {
    return CommonResponse_ResStatusEnum_IsValid(value);
  }
  static const ResStatusEnum ResStatusEnum_MIN =
    CommonResponse_ResStatusEnum_ResStatusEnum_MIN;
  static const ResStatusEnum ResStatusEnum_MAX =
    CommonResponse_ResStatusEnum_ResStatusEnum_MAX;
  static const int ResStatusEnum_ARRAYSIZE =
    CommonResponse_ResStatusEnum_ResStatusEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResStatusEnum_descriptor() {
    return CommonResponse_ResStatusEnum_descriptor();
  }
  static inline const ::std::string& ResStatusEnum_Name(ResStatusEnum value) {
    return CommonResponse_ResStatusEnum_Name(value);
  }
  static inline bool ResStatusEnum_Parse(const ::std::string& name,
      ResStatusEnum* value) {
    return CommonResponse_ResStatusEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string responseMsg = 1;
  void clear_responsemsg();
  static const int kResponseMsgFieldNumber = 1;
  const ::std::string& responsemsg() const;
  void set_responsemsg(const ::std::string& value);
  #if LANG_CXX11
  void set_responsemsg(::std::string&& value);
  #endif
  void set_responsemsg(const char* value);
  void set_responsemsg(const char* value, size_t size);
  ::std::string* mutable_responsemsg();
  ::std::string* release_responsemsg();
  void set_allocated_responsemsg(::std::string* responsemsg);

  // int32 responseCode = 2;
  void clear_responsecode();
  static const int kResponseCodeFieldNumber = 2;
  ::google::protobuf::int32 responsecode() const;
  void set_responsecode(::google::protobuf::int32 value);

  // .com.fiberhome.fums.proto.CommonResponse.ResStatusEnum status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::com::fiberhome::fums::proto::CommonResponse_ResStatusEnum status() const;
  void set_status(::com::fiberhome::fums::proto::CommonResponse_ResStatusEnum value);

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.CommonResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr responsemsg_;
  ::google::protobuf::int32 responsecode_;
  int status_;
  mutable int _cached_size_;
  friend struct protobuf_CommonDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleNicPerfData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.SingleNicPerfData) */ {
 public:
  SingleNicPerfData();
  virtual ~SingleNicPerfData();

  SingleNicPerfData(const SingleNicPerfData& from);

  inline SingleNicPerfData& operator=(const SingleNicPerfData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleNicPerfData(SingleNicPerfData&& from) noexcept
    : SingleNicPerfData() {
    *this = ::std::move(from);
  }

  inline SingleNicPerfData& operator=(SingleNicPerfData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleNicPerfData& default_instance();

  static inline const SingleNicPerfData* internal_default_instance() {
    return reinterpret_cast<const SingleNicPerfData*>(
               &_SingleNicPerfData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SingleNicPerfData* other);
  friend void swap(SingleNicPerfData& a, SingleNicPerfData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleNicPerfData* New() const PROTOBUF_FINAL { return New(NULL); }

  SingleNicPerfData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SingleNicPerfData& from);
  void MergeFrom(const SingleNicPerfData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SingleNicPerfData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nicName = 1;
  void clear_nicname();
  static const int kNicNameFieldNumber = 1;
  const ::std::string& nicname() const;
  void set_nicname(const ::std::string& value);
  #if LANG_CXX11
  void set_nicname(::std::string&& value);
  #endif
  void set_nicname(const char* value);
  void set_nicname(const char* value, size_t size);
  ::std::string* mutable_nicname();
  ::std::string* release_nicname();
  void set_allocated_nicname(::std::string* nicname);

  // string nicIpAddress = 2;
  void clear_nicipaddress();
  static const int kNicIpAddressFieldNumber = 2;
  const ::std::string& nicipaddress() const;
  void set_nicipaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_nicipaddress(::std::string&& value);
  #endif
  void set_nicipaddress(const char* value);
  void set_nicipaddress(const char* value, size_t size);
  ::std::string* mutable_nicipaddress();
  ::std::string* release_nicipaddress();
  void set_allocated_nicipaddress(::std::string* nicipaddress);

  // string nicSpeed = 3;
  void clear_nicspeed();
  static const int kNicSpeedFieldNumber = 3;
  const ::std::string& nicspeed() const;
  void set_nicspeed(const ::std::string& value);
  #if LANG_CXX11
  void set_nicspeed(::std::string&& value);
  #endif
  void set_nicspeed(const char* value);
  void set_nicspeed(const char* value, size_t size);
  ::std::string* mutable_nicspeed();
  ::std::string* release_nicspeed();
  void set_allocated_nicspeed(::std::string* nicspeed);

  // int64 nicRxBytes = 4;
  void clear_nicrxbytes();
  static const int kNicRxBytesFieldNumber = 4;
  ::google::protobuf::int64 nicrxbytes() const;
  void set_nicrxbytes(::google::protobuf::int64 value);

  // int64 nicTxBytes = 5;
  void clear_nictxbytes();
  static const int kNicTxBytesFieldNumber = 5;
  ::google::protobuf::int64 nictxbytes() const;
  void set_nictxbytes(::google::protobuf::int64 value);

  // int64 nicRxPackets = 6;
  void clear_nicrxpackets();
  static const int kNicRxPacketsFieldNumber = 6;
  ::google::protobuf::int64 nicrxpackets() const;
  void set_nicrxpackets(::google::protobuf::int64 value);

  // int64 nicRxDropped = 7;
  void clear_nicrxdropped();
  static const int kNicRxDroppedFieldNumber = 7;
  ::google::protobuf::int64 nicrxdropped() const;
  void set_nicrxdropped(::google::protobuf::int64 value);

  // int64 nicRxErrors = 8;
  void clear_nicrxerrors();
  static const int kNicRxErrorsFieldNumber = 8;
  ::google::protobuf::int64 nicrxerrors() const;
  void set_nicrxerrors(::google::protobuf::int64 value);

  // int64 nicRxFrame = 9;
  void clear_nicrxframe();
  static const int kNicRxFrameFieldNumber = 9;
  ::google::protobuf::int64 nicrxframe() const;
  void set_nicrxframe(::google::protobuf::int64 value);

  // int64 nicRxOverruns = 10;
  void clear_nicrxoverruns();
  static const int kNicRxOverrunsFieldNumber = 10;
  ::google::protobuf::int64 nicrxoverruns() const;
  void set_nicrxoverruns(::google::protobuf::int64 value);

  // int64 nicTxPackets = 11;
  void clear_nictxpackets();
  static const int kNicTxPacketsFieldNumber = 11;
  ::google::protobuf::int64 nictxpackets() const;
  void set_nictxpackets(::google::protobuf::int64 value);

  // int64 nicTxDropped = 12;
  void clear_nictxdropped();
  static const int kNicTxDroppedFieldNumber = 12;
  ::google::protobuf::int64 nictxdropped() const;
  void set_nictxdropped(::google::protobuf::int64 value);

  // int64 nicTxErrors = 13;
  void clear_nictxerrors();
  static const int kNicTxErrorsFieldNumber = 13;
  ::google::protobuf::int64 nictxerrors() const;
  void set_nictxerrors(::google::protobuf::int64 value);

  // int64 nicTxOverruns = 14;
  void clear_nictxoverruns();
  static const int kNicTxOverrunsFieldNumber = 14;
  ::google::protobuf::int64 nictxoverruns() const;
  void set_nictxoverruns(::google::protobuf::int64 value);

  // int32 nicOutputBandWidth = 15;
  void clear_nicoutputbandwidth();
  static const int kNicOutputBandWidthFieldNumber = 15;
  ::google::protobuf::int32 nicoutputbandwidth() const;
  void set_nicoutputbandwidth(::google::protobuf::int32 value);

  // int32 nicInputBandWidth = 16;
  void clear_nicinputbandwidth();
  static const int kNicInputBandWidthFieldNumber = 16;
  ::google::protobuf::int32 nicinputbandwidth() const;
  void set_nicinputbandwidth(::google::protobuf::int32 value);

  // int64 nicRxBytesMax = 17;
  void clear_nicrxbytesmax();
  static const int kNicRxBytesMaxFieldNumber = 17;
  ::google::protobuf::int64 nicrxbytesmax() const;
  void set_nicrxbytesmax(::google::protobuf::int64 value);

  // int64 nicTxBytesMax = 18;
  void clear_nictxbytesmax();
  static const int kNicTxBytesMaxFieldNumber = 18;
  ::google::protobuf::int64 nictxbytesmax() const;
  void set_nictxbytesmax(::google::protobuf::int64 value);

  // int64 nicRxSpeed = 19;
  void clear_nicrxspeed();
  static const int kNicRxSpeedFieldNumber = 19;
  ::google::protobuf::int64 nicrxspeed() const;
  void set_nicrxspeed(::google::protobuf::int64 value);

  // int64 nicTxSpeed = 20;
  void clear_nictxspeed();
  static const int kNicTxSpeedFieldNumber = 20;
  ::google::protobuf::int64 nictxspeed() const;
  void set_nictxspeed(::google::protobuf::int64 value);

  // int64 nicRxMaxSpeed = 21;
  void clear_nicrxmaxspeed();
  static const int kNicRxMaxSpeedFieldNumber = 21;
  ::google::protobuf::int64 nicrxmaxspeed() const;
  void set_nicrxmaxspeed(::google::protobuf::int64 value);

  // int64 nicTxMaxSpeed = 22;
  void clear_nictxmaxspeed();
  static const int kNicTxMaxSpeedFieldNumber = 22;
  ::google::protobuf::int64 nictxmaxspeed() const;
  void set_nictxmaxspeed(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.SingleNicPerfData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nicname_;
  ::google::protobuf::internal::ArenaStringPtr nicipaddress_;
  ::google::protobuf::internal::ArenaStringPtr nicspeed_;
  ::google::protobuf::int64 nicrxbytes_;
  ::google::protobuf::int64 nictxbytes_;
  ::google::protobuf::int64 nicrxpackets_;
  ::google::protobuf::int64 nicrxdropped_;
  ::google::protobuf::int64 nicrxerrors_;
  ::google::protobuf::int64 nicrxframe_;
  ::google::protobuf::int64 nicrxoverruns_;
  ::google::protobuf::int64 nictxpackets_;
  ::google::protobuf::int64 nictxdropped_;
  ::google::protobuf::int64 nictxerrors_;
  ::google::protobuf::int64 nictxoverruns_;
  ::google::protobuf::int32 nicoutputbandwidth_;
  ::google::protobuf::int32 nicinputbandwidth_;
  ::google::protobuf::int64 nicrxbytesmax_;
  ::google::protobuf::int64 nictxbytesmax_;
  ::google::protobuf::int64 nicrxspeed_;
  ::google::protobuf::int64 nictxspeed_;
  ::google::protobuf::int64 nicrxmaxspeed_;
  ::google::protobuf::int64 nictxmaxspeed_;
  mutable int _cached_size_;
  friend struct protobuf_CommonDefine_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnumDefineData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fiberhome.fums.proto.EnumDefineData) */ {
 public:
  EnumDefineData();
  virtual ~EnumDefineData();

  EnumDefineData(const EnumDefineData& from);

  inline EnumDefineData& operator=(const EnumDefineData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnumDefineData(EnumDefineData&& from) noexcept
    : EnumDefineData() {
    *this = ::std::move(from);
  }

  inline EnumDefineData& operator=(EnumDefineData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnumDefineData& default_instance();

  static inline const EnumDefineData* internal_default_instance() {
    return reinterpret_cast<const EnumDefineData*>(
               &_EnumDefineData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EnumDefineData* other);
  friend void swap(EnumDefineData& a, EnumDefineData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnumDefineData* New() const PROTOBUF_FINAL { return New(NULL); }

  EnumDefineData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EnumDefineData& from);
  void MergeFrom(const EnumDefineData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnumDefineData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EnumDefineData_AppTypeEnum AppTypeEnum;
  static const AppTypeEnum GSLB =
    EnumDefineData_AppTypeEnum_GSLB;
  static const AppTypeEnum SS =
    EnumDefineData_AppTypeEnum_SS;
  static const AppTypeEnum EPG =
    EnumDefineData_AppTypeEnum_EPG;
  static const AppTypeEnum EPG_DB =
    EnumDefineData_AppTypeEnum_EPG_DB;
  static const AppTypeEnum EPG_CACHE =
    EnumDefineData_AppTypeEnum_EPG_CACHE;
  static const AppTypeEnum EPG_WEB =
    EnumDefineData_AppTypeEnum_EPG_WEB;
  static const AppTypeEnum EPG_LB =
    EnumDefineData_AppTypeEnum_EPG_LB;
  static const AppTypeEnum EPG_HA =
    EnumDefineData_AppTypeEnum_EPG_HA;
  static const AppTypeEnum EPG_LOG =
    EnumDefineData_AppTypeEnum_EPG_LOG;
  static const AppTypeEnum EPG_RSYNC =
    EnumDefineData_AppTypeEnum_EPG_RSYNC;
  static const AppTypeEnum ACS_WEB =
    EnumDefineData_AppTypeEnum_ACS_WEB;
  static const AppTypeEnum ACS_HA =
    EnumDefineData_AppTypeEnum_ACS_HA;
  static const AppTypeEnum ACS_LB =
    EnumDefineData_AppTypeEnum_ACS_LB;
  static const AppTypeEnum ACS =
    EnumDefineData_AppTypeEnum_ACS;
  static const AppTypeEnum ACS_ALL =
    EnumDefineData_AppTypeEnum_ACS_ALL;
  static const AppTypeEnum AAA =
    EnumDefineData_AppTypeEnum_AAA;
  static const AppTypeEnum AAA_WEB =
    EnumDefineData_AppTypeEnum_AAA_WEB;
  static const AppTypeEnum AAA_HA =
    EnumDefineData_AppTypeEnum_AAA_HA;
  static const AppTypeEnum AAA_LB =
    EnumDefineData_AppTypeEnum_AAA_LB;
  static const AppTypeEnum AAA_ALL =
    EnumDefineData_AppTypeEnum_AAA_ALL;
  static const AppTypeEnum VODLD =
    EnumDefineData_AppTypeEnum_VODLD;
  static const AppTypeEnum TVLD =
    EnumDefineData_AppTypeEnum_TVLD;
  static const AppTypeEnum TVLD_TVLD =
    EnumDefineData_AppTypeEnum_TVLD_TVLD;
  static const AppTypeEnum TVLD_TLCC =
    EnumDefineData_AppTypeEnum_TVLD_TLCC;
  static const AppTypeEnum VCC =
    EnumDefineData_AppTypeEnum_VCC;
  static const AppTypeEnum MW =
    EnumDefineData_AppTypeEnum_MW;
  static const AppTypeEnum MW_MA =
    EnumDefineData_AppTypeEnum_MW_MA;
  static const AppTypeEnum MW_OSS =
    EnumDefineData_AppTypeEnum_MW_OSS;
  static const AppTypeEnum MW_JBOSS =
    EnumDefineData_AppTypeEnum_MW_JBOSS;
  static const AppTypeEnum MW_HA =
    EnumDefineData_AppTypeEnum_MW_HA;
  static const AppTypeEnum DB =
    EnumDefineData_AppTypeEnum_DB;
  static const AppTypeEnum DB_HA =
    EnumDefineData_AppTypeEnum_DB_HA;
  static const AppTypeEnum PC_EPG =
    EnumDefineData_AppTypeEnum_PC_EPG;
  static const AppTypeEnum ADS =
    EnumDefineData_AppTypeEnum_ADS;
  static const AppTypeEnum RRS =
    EnumDefineData_AppTypeEnum_RRS;
  static const AppTypeEnum RRS_HA =
    EnumDefineData_AppTypeEnum_RRS_HA;
  static const AppTypeEnum CMM =
    EnumDefineData_AppTypeEnum_CMM;
  static const AppTypeEnum CMMD2 =
    EnumDefineData_AppTypeEnum_CMMD2;
  static const AppTypeEnum TMS =
    EnumDefineData_AppTypeEnum_TMS;
  static const AppTypeEnum CMS =
    EnumDefineData_AppTypeEnum_CMS;
  static const AppTypeEnum ESS =
    EnumDefineData_AppTypeEnum_ESS;
  static const AppTypeEnum OSS =
    EnumDefineData_AppTypeEnum_OSS;
  static const AppTypeEnum TCMS =
    EnumDefineData_AppTypeEnum_TCMS;
  static const AppTypeEnum TVMS =
    EnumDefineData_AppTypeEnum_TVMS;
  static const AppTypeEnum NGINX =
    EnumDefineData_AppTypeEnum_NGINX;
  static const AppTypeEnum EPG4K =
    EnumDefineData_AppTypeEnum_EPG4K;
  static const AppTypeEnum TVGW =
    EnumDefineData_AppTypeEnum_TVGW;
  static const AppTypeEnum CSD =
    EnumDefineData_AppTypeEnum_CSD;
  static const AppTypeEnum LRS =
    EnumDefineData_AppTypeEnum_LRS;
  static const AppTypeEnum LCM =
    EnumDefineData_AppTypeEnum_LCM;
  static const AppTypeEnum CSP =
    EnumDefineData_AppTypeEnum_CSP;
  static const AppTypeEnum CSV =
    EnumDefineData_AppTypeEnum_CSV;
  static const AppTypeEnum DRS =
    EnumDefineData_AppTypeEnum_DRS;
  static const AppTypeEnum CSX =
    EnumDefineData_AppTypeEnum_CSX;
  static const AppTypeEnum CSJ =
    EnumDefineData_AppTypeEnum_CSJ;
  static const AppTypeEnum AGENT =
    EnumDefineData_AppTypeEnum_AGENT;
  static inline bool AppTypeEnum_IsValid(int value) {
    return EnumDefineData_AppTypeEnum_IsValid(value);
  }
  static const AppTypeEnum AppTypeEnum_MIN =
    EnumDefineData_AppTypeEnum_AppTypeEnum_MIN;
  static const AppTypeEnum AppTypeEnum_MAX =
    EnumDefineData_AppTypeEnum_AppTypeEnum_MAX;
  static const int AppTypeEnum_ARRAYSIZE =
    EnumDefineData_AppTypeEnum_AppTypeEnum_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AppTypeEnum_descriptor() {
    return EnumDefineData_AppTypeEnum_descriptor();
  }
  static inline const ::std::string& AppTypeEnum_Name(AppTypeEnum value) {
    return EnumDefineData_AppTypeEnum_Name(value);
  }
  static inline bool AppTypeEnum_Parse(const ::std::string& name,
      AppTypeEnum* value) {
    return EnumDefineData_AppTypeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.fiberhome.fums.proto.EnumDefineData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_CommonDefine_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonResponse

// string responseMsg = 1;
inline void CommonResponse::clear_responsemsg() {
  responsemsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommonResponse::responsemsg() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.CommonResponse.responseMsg)
  return responsemsg_.GetNoArena();
}
inline void CommonResponse::set_responsemsg(const ::std::string& value) {
  
  responsemsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.CommonResponse.responseMsg)
}
#if LANG_CXX11
inline void CommonResponse::set_responsemsg(::std::string&& value) {
  
  responsemsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.CommonResponse.responseMsg)
}
#endif
inline void CommonResponse::set_responsemsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsemsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.CommonResponse.responseMsg)
}
inline void CommonResponse::set_responsemsg(const char* value, size_t size) {
  
  responsemsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.CommonResponse.responseMsg)
}
inline ::std::string* CommonResponse::mutable_responsemsg() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.CommonResponse.responseMsg)
  return responsemsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonResponse::release_responsemsg() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.CommonResponse.responseMsg)
  
  return responsemsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonResponse::set_allocated_responsemsg(::std::string* responsemsg) {
  if (responsemsg != NULL) {
    
  } else {
    
  }
  responsemsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsemsg);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.CommonResponse.responseMsg)
}

// int32 responseCode = 2;
inline void CommonResponse::clear_responsecode() {
  responsecode_ = 0;
}
inline ::google::protobuf::int32 CommonResponse::responsecode() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.CommonResponse.responseCode)
  return responsecode_;
}
inline void CommonResponse::set_responsecode(::google::protobuf::int32 value) {
  
  responsecode_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.CommonResponse.responseCode)
}

// .com.fiberhome.fums.proto.CommonResponse.ResStatusEnum status = 3;
inline void CommonResponse::clear_status() {
  status_ = 0;
}
inline ::com::fiberhome::fums::proto::CommonResponse_ResStatusEnum CommonResponse::status() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.CommonResponse.status)
  return static_cast< ::com::fiberhome::fums::proto::CommonResponse_ResStatusEnum >(status_);
}
inline void CommonResponse::set_status(::com::fiberhome::fums::proto::CommonResponse_ResStatusEnum value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.CommonResponse.status)
}

// -------------------------------------------------------------------

// SingleNicPerfData

// string nicName = 1;
inline void SingleNicPerfData::clear_nicname() {
  nicname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleNicPerfData::nicname() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
  return nicname_.GetNoArena();
}
inline void SingleNicPerfData::set_nicname(const ::std::string& value) {
  
  nicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
}
#if LANG_CXX11
inline void SingleNicPerfData::set_nicname(::std::string&& value) {
  
  nicname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
}
#endif
inline void SingleNicPerfData::set_nicname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
}
inline void SingleNicPerfData::set_nicname(const char* value, size_t size) {
  
  nicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
}
inline ::std::string* SingleNicPerfData::mutable_nicname() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
  return nicname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleNicPerfData::release_nicname() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
  
  return nicname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleNicPerfData::set_allocated_nicname(::std::string* nicname) {
  if (nicname != NULL) {
    
  } else {
    
  }
  nicname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nicname);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleNicPerfData.nicName)
}

// string nicIpAddress = 2;
inline void SingleNicPerfData::clear_nicipaddress() {
  nicipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleNicPerfData::nicipaddress() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
  return nicipaddress_.GetNoArena();
}
inline void SingleNicPerfData::set_nicipaddress(const ::std::string& value) {
  
  nicipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
}
#if LANG_CXX11
inline void SingleNicPerfData::set_nicipaddress(::std::string&& value) {
  
  nicipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
}
#endif
inline void SingleNicPerfData::set_nicipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nicipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
}
inline void SingleNicPerfData::set_nicipaddress(const char* value, size_t size) {
  
  nicipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
}
inline ::std::string* SingleNicPerfData::mutable_nicipaddress() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
  return nicipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleNicPerfData::release_nicipaddress() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
  
  return nicipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleNicPerfData::set_allocated_nicipaddress(::std::string* nicipaddress) {
  if (nicipaddress != NULL) {
    
  } else {
    
  }
  nicipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nicipaddress);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleNicPerfData.nicIpAddress)
}

// string nicSpeed = 3;
inline void SingleNicPerfData::clear_nicspeed() {
  nicspeed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SingleNicPerfData::nicspeed() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
  return nicspeed_.GetNoArena();
}
inline void SingleNicPerfData::set_nicspeed(const ::std::string& value) {
  
  nicspeed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
}
#if LANG_CXX11
inline void SingleNicPerfData::set_nicspeed(::std::string&& value) {
  
  nicspeed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
}
#endif
inline void SingleNicPerfData::set_nicspeed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nicspeed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
}
inline void SingleNicPerfData::set_nicspeed(const char* value, size_t size) {
  
  nicspeed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
}
inline ::std::string* SingleNicPerfData::mutable_nicspeed() {
  
  // @@protoc_insertion_point(field_mutable:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
  return nicspeed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleNicPerfData::release_nicspeed() {
  // @@protoc_insertion_point(field_release:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
  
  return nicspeed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleNicPerfData::set_allocated_nicspeed(::std::string* nicspeed) {
  if (nicspeed != NULL) {
    
  } else {
    
  }
  nicspeed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nicspeed);
  // @@protoc_insertion_point(field_set_allocated:com.fiberhome.fums.proto.SingleNicPerfData.nicSpeed)
}

// int64 nicRxBytes = 4;
inline void SingleNicPerfData::clear_nicrxbytes() {
  nicrxbytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nicrxbytes() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxBytes)
  return nicrxbytes_;
}
inline void SingleNicPerfData::set_nicrxbytes(::google::protobuf::int64 value) {
  
  nicrxbytes_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxBytes)
}

// int64 nicTxBytes = 5;
inline void SingleNicPerfData::clear_nictxbytes() {
  nictxbytes_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nictxbytes() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxBytes)
  return nictxbytes_;
}
inline void SingleNicPerfData::set_nictxbytes(::google::protobuf::int64 value) {
  
  nictxbytes_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxBytes)
}

// int64 nicRxPackets = 6;
inline void SingleNicPerfData::clear_nicrxpackets() {
  nicrxpackets_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nicrxpackets() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxPackets)
  return nicrxpackets_;
}
inline void SingleNicPerfData::set_nicrxpackets(::google::protobuf::int64 value) {
  
  nicrxpackets_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxPackets)
}

// int64 nicRxDropped = 7;
inline void SingleNicPerfData::clear_nicrxdropped() {
  nicrxdropped_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nicrxdropped() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxDropped)
  return nicrxdropped_;
}
inline void SingleNicPerfData::set_nicrxdropped(::google::protobuf::int64 value) {
  
  nicrxdropped_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxDropped)
}

// int64 nicRxErrors = 8;
inline void SingleNicPerfData::clear_nicrxerrors() {
  nicrxerrors_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nicrxerrors() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxErrors)
  return nicrxerrors_;
}
inline void SingleNicPerfData::set_nicrxerrors(::google::protobuf::int64 value) {
  
  nicrxerrors_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxErrors)
}

// int64 nicRxFrame = 9;
inline void SingleNicPerfData::clear_nicrxframe() {
  nicrxframe_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nicrxframe() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxFrame)
  return nicrxframe_;
}
inline void SingleNicPerfData::set_nicrxframe(::google::protobuf::int64 value) {
  
  nicrxframe_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxFrame)
}

// int64 nicRxOverruns = 10;
inline void SingleNicPerfData::clear_nicrxoverruns() {
  nicrxoverruns_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nicrxoverruns() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxOverruns)
  return nicrxoverruns_;
}
inline void SingleNicPerfData::set_nicrxoverruns(::google::protobuf::int64 value) {
  
  nicrxoverruns_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxOverruns)
}

// int64 nicTxPackets = 11;
inline void SingleNicPerfData::clear_nictxpackets() {
  nictxpackets_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nictxpackets() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxPackets)
  return nictxpackets_;
}
inline void SingleNicPerfData::set_nictxpackets(::google::protobuf::int64 value) {
  
  nictxpackets_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxPackets)
}

// int64 nicTxDropped = 12;
inline void SingleNicPerfData::clear_nictxdropped() {
  nictxdropped_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nictxdropped() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxDropped)
  return nictxdropped_;
}
inline void SingleNicPerfData::set_nictxdropped(::google::protobuf::int64 value) {
  
  nictxdropped_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxDropped)
}

// int64 nicTxErrors = 13;
inline void SingleNicPerfData::clear_nictxerrors() {
  nictxerrors_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nictxerrors() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxErrors)
  return nictxerrors_;
}
inline void SingleNicPerfData::set_nictxerrors(::google::protobuf::int64 value) {
  
  nictxerrors_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxErrors)
}

// int64 nicTxOverruns = 14;
inline void SingleNicPerfData::clear_nictxoverruns() {
  nictxoverruns_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nictxoverruns() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxOverruns)
  return nictxoverruns_;
}
inline void SingleNicPerfData::set_nictxoverruns(::google::protobuf::int64 value) {
  
  nictxoverruns_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxOverruns)
}

// int32 nicOutputBandWidth = 15;
inline void SingleNicPerfData::clear_nicoutputbandwidth() {
  nicoutputbandwidth_ = 0;
}
inline ::google::protobuf::int32 SingleNicPerfData::nicoutputbandwidth() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicOutputBandWidth)
  return nicoutputbandwidth_;
}
inline void SingleNicPerfData::set_nicoutputbandwidth(::google::protobuf::int32 value) {
  
  nicoutputbandwidth_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicOutputBandWidth)
}

// int32 nicInputBandWidth = 16;
inline void SingleNicPerfData::clear_nicinputbandwidth() {
  nicinputbandwidth_ = 0;
}
inline ::google::protobuf::int32 SingleNicPerfData::nicinputbandwidth() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicInputBandWidth)
  return nicinputbandwidth_;
}
inline void SingleNicPerfData::set_nicinputbandwidth(::google::protobuf::int32 value) {
  
  nicinputbandwidth_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicInputBandWidth)
}

// int64 nicRxBytesMax = 17;
inline void SingleNicPerfData::clear_nicrxbytesmax() {
  nicrxbytesmax_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nicrxbytesmax() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxBytesMax)
  return nicrxbytesmax_;
}
inline void SingleNicPerfData::set_nicrxbytesmax(::google::protobuf::int64 value) {
  
  nicrxbytesmax_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxBytesMax)
}

// int64 nicTxBytesMax = 18;
inline void SingleNicPerfData::clear_nictxbytesmax() {
  nictxbytesmax_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nictxbytesmax() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxBytesMax)
  return nictxbytesmax_;
}
inline void SingleNicPerfData::set_nictxbytesmax(::google::protobuf::int64 value) {
  
  nictxbytesmax_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxBytesMax)
}

// int64 nicRxSpeed = 19;
inline void SingleNicPerfData::clear_nicrxspeed() {
  nicrxspeed_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nicrxspeed() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxSpeed)
  return nicrxspeed_;
}
inline void SingleNicPerfData::set_nicrxspeed(::google::protobuf::int64 value) {
  
  nicrxspeed_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxSpeed)
}

// int64 nicTxSpeed = 20;
inline void SingleNicPerfData::clear_nictxspeed() {
  nictxspeed_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nictxspeed() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxSpeed)
  return nictxspeed_;
}
inline void SingleNicPerfData::set_nictxspeed(::google::protobuf::int64 value) {
  
  nictxspeed_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxSpeed)
}

// int64 nicRxMaxSpeed = 21;
inline void SingleNicPerfData::clear_nicrxmaxspeed() {
  nicrxmaxspeed_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nicrxmaxspeed() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicRxMaxSpeed)
  return nicrxmaxspeed_;
}
inline void SingleNicPerfData::set_nicrxmaxspeed(::google::protobuf::int64 value) {
  
  nicrxmaxspeed_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicRxMaxSpeed)
}

// int64 nicTxMaxSpeed = 22;
inline void SingleNicPerfData::clear_nictxmaxspeed() {
  nictxmaxspeed_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SingleNicPerfData::nictxmaxspeed() const {
  // @@protoc_insertion_point(field_get:com.fiberhome.fums.proto.SingleNicPerfData.nicTxMaxSpeed)
  return nictxmaxspeed_;
}
inline void SingleNicPerfData::set_nictxmaxspeed(::google::protobuf::int64 value) {
  
  nictxmaxspeed_ = value;
  // @@protoc_insertion_point(field_set:com.fiberhome.fums.proto.SingleNicPerfData.nicTxMaxSpeed)
}

// -------------------------------------------------------------------

// EnumDefineData

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace fums
}  // namespace fiberhome
}  // namespace com

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fiberhome::fums::proto::CommonResponse_ResStatusEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fiberhome::fums::proto::CommonResponse_ResStatusEnum>() {
  return ::com::fiberhome::fums::proto::CommonResponse_ResStatusEnum_descriptor();
}
template <> struct is_proto_enum< ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum>() {
  return ::com::fiberhome::fums::proto::EnumDefineData_AppTypeEnum_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CommonDefine_2eproto__INCLUDED
